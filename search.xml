<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2018南京区域赛I 最大流 Dinic</title>
    <url>/2019/09/03/2018%E5%8D%97%E4%BA%AC%E5%8C%BA%E5%9F%9F%E8%B5%9BI-%E6%9C%80%E5%A4%A7%E6%B5%81-Dinic/</url>
    <content><![CDATA[<p>奇思妙想最大流</p>
<span id="more"></span>

<p><a href="https://vjudge.net/contest/323739#problem/I">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p> 给你N个士兵的信息，给出每个士兵可以杀的一些人的编号，但是士兵只能挑选一个敌人并杀死他，现在有K个药水，1瓶药水只能作用在一个士兵的身上，每个士兵服用一瓶药水就可以多杀一个人，每个敌人只能被一个士兵杀死，现在问你所有士兵最多可以杀死多少人。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>建最大流的图， 源点连到每个士兵上，权值为1，代表每个士兵一开始就可以杀一人，源点到另外特殊的一点权值为K，然后这个特殊点连到每个士兵身上，每个权值为1，代表这K个药水可以分给士兵，并且每人最多1个。每个士兵连到对应的敌人上，代表他可以杀死某个敌人，敌人最终连到汇点，代表每个士兵只能被杀死一次。然后最大流就是答案了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">typedef long long ll;</span><br><span class="line"></span><br><span class="line">int G[1005][1005];</span><br><span class="line">int n, m,k;</span><br><span class="line">const int inf = 0x3f3f3f3f;</span><br><span class="line">int deep[1005];</span><br><span class="line">int bfs(int s, int t)</span><br><span class="line">&#123;</span><br><span class="line">    queue&lt;int&gt;Q;</span><br><span class="line">    Q.push(s);</span><br><span class="line">    memset(deep, 0, sizeof(deep));</span><br><span class="line">    deep[s] = 1;</span><br><span class="line">    while(!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        int u = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        for(int i = 0; i &lt;= n + m + 2; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(G[u][i] == 0) continue;</span><br><span class="line">            int w = G[u][i];</span><br><span class="line">            if(deep[i] == 0 &amp;&amp; w &gt; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                deep[i] = deep[u] + 1;</span><br><span class="line">                Q.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(deep[t] == 0)  return 0;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int dfs(int s, int dis)</span><br><span class="line">&#123;</span><br><span class="line">    if(s == n + m + 2) return dis;</span><br><span class="line">    for(int i = 0; i &lt;= n + m + 2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(G[s][i] == 0) continue;</span><br><span class="line">        int w = G[s][i];</span><br><span class="line">        if(w &gt; 0 &amp;&amp; deep[i] == deep[s] + 1)</span><br><span class="line">        &#123;</span><br><span class="line">            int d = dfs(i, min(dis, w));</span><br><span class="line">            if(d &gt; 0)&#123;</span><br><span class="line">                G[s][i] -= d;</span><br><span class="line">                G[i][s] += d;</span><br><span class="line">                return d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">   int num, num1;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">     memset(G, 0, sizeof(G));</span><br><span class="line">    for(int i = 1; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; num;</span><br><span class="line">        G[0][i] = 1;</span><br><span class="line">        G[n + m + 1][i] = 1;</span><br><span class="line">        for(int j = 1; j &lt;= num; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;num1);</span><br><span class="line">            G[i][num1 + n] = 1;</span><br><span class="line">            G[num1 + n][n + m + 2] = 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    G[0][n + m + 1] = k;</span><br><span class="line">    int sum = 0;</span><br><span class="line">    while(bfs(0, n + m + 2))</span><br><span class="line">    &#123;</span><br><span class="line">        while(int d = dfs(0, inf))</span><br><span class="line">            sum += d;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; &#x27;\n&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>Dinic最大流</tag>
      </tags>
  </entry>
  <entry>
    <title>2019 CCPC 秦皇岛F</title>
    <url>/2019/10/30/2019-CCPC-%E7%A7%A6%E7%9A%87%E5%B2%9BF/</url>
    <content><![CDATA[<p>比赛时已经推出公式了， 问题是不会求环的个数。</p>
<span id="more"></span>

<p>公式这里就不写了，只是附上dfs + 时间戳的求环。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;G[<span class="number">300005</span>];</span><br><span class="line"><span class="type">int</span> dln[<span class="number">300005</span>], d[<span class="number">300005</span>];</span><br><span class="line"><span class="type">int</span> cnt ;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dln[now] = dln[p] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[now].<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = G[now][i];</span><br><span class="line">        <span class="keyword">if</span>(v == p)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(dln[v] != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dln[v] &lt; dln[now])</span><br><span class="line">            d[++cnt] = dln[now] - dln[v] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">dfs</span>(v, now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">pow</span><span class="params">(ll a, ll b, ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)</span><br><span class="line">            ans = ans * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m ,u, v;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dln, <span class="number">0</span>, <span class="built_in">sizeof</span>(dln));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">        G[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">   <span class="comment">// cout &lt;&lt; cnt &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">    <span class="type">int</span> edge = m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        edge -= d[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="built_in">pow</span>(<span class="number">2</span>, edge, mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll num = <span class="built_in">pow</span>(<span class="number">2</span>, d[i], mod);</span><br><span class="line">        ll num1 = (num - <span class="number">1</span> + mod) % mod;</span><br><span class="line">        ans = (ans * num1) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>2019 ICPC 南昌网络赛 I 单调栈 + 前缀和</title>
    <url>/2019/09/05/2019-ICPC-%E5%8D%97%E6%98%8C%E7%BD%91%E7%BB%9C%E8%B5%9B-I-%E5%8D%95%E8%B0%83%E6%A0%88-%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    <content><![CDATA[<p>单调栈 + 前缀和</p>
<span id="more"></span>

<p><a href="https://nanti.jisuanke.com/t/38228">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你一个序列，每一段区间的值&#x3D;这段区间的和*这段区间的最小值。现在让你求区间的最大值。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们枚举每个数字，以他为最小值进行左右延伸，假设这个数字是正数，那么就直接是左右延伸后的区间和*这个数字。如果这个数字是负数，那么我们需要让这个区间的和尽量的低，先把这个数字当做右边界求出这个数字的左边的值到这个数字的区间的和的最小值，在以这个数字为左边界，求出这个数字到这个数字右边的值的区间和的最小值，这样把这两个值相加就是这个负数为最小值的区间的最小的和，这样再乘以这个负数，就可以求出这段区间的最大值了。关键就是利用单调栈求出左右延伸的边界。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">500005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   ll value;</span><br><span class="line">   <span class="type">int</span> pos;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll sum[maxn];</span><br><span class="line">ll Max[maxn], Max1[maxn],a[maxn],L[maxn],R[maxn],Max2[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;node&gt;S1,S2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(!S<span class="number">1.</span><span class="built_in">empty</span>() &amp;&amp; S<span class="number">1.</span><span class="built_in">top</span>().value &gt;= a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            S<span class="number">1.</span><span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(S<span class="number">1.</span><span class="built_in">size</span>() == <span class="number">0</span>) L[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> L[i] = S<span class="number">1.</span><span class="built_in">top</span>().pos + <span class="number">1</span>;</span><br><span class="line">        S<span class="number">1.</span><span class="built_in">push</span>(&#123;a[i],i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(!S<span class="number">2.</span><span class="built_in">empty</span>() &amp;&amp; S<span class="number">2.</span><span class="built_in">top</span>().value &gt;= a[i])&#123;</span><br><span class="line">            S<span class="number">2.</span><span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(S<span class="number">2.</span><span class="built_in">size</span>() == <span class="number">0</span>) R[i] = n;</span><br><span class="line">        <span class="keyword">else</span> R[i] = S<span class="number">2.</span><span class="built_in">top</span>().pos - <span class="number">1</span>;</span><br><span class="line">        S<span class="number">2.</span><span class="built_in">push</span>(&#123;a[i], i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &gt;= <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = L[i]; j &lt;= i; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            Max[i] = <span class="built_in">min</span>(Max[i], sum[i] - sum[j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= R[i]; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            Max1[i] = <span class="built_in">min</span>(Max1[i] , sum[j] - sum[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Max2[i] = Max[i] + Max1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, a[i] * (sum[R[i]] - sum[L[i]<span class="number">-1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, a[i] * Max2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">            sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>2019 SDNU Contest 14 赛后总结</title>
    <url>/2019/05/03/2019-SDNU-Constest%2014%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>总结一下5月2日比赛： 除去最强的师哥队，每支队伍都A了6题，但是我们却A了5道。 我赛后总结一下，是真的读不懂题啊。。。</p>
<span id="more"></span>

<p><a href="https://vjudge.net/contest/294607#problem/A">比赛链接</a> </p>
<h2 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h2><p>上来顺耳听到是个签到题，一看这不寒假做过的一道差不多的题么。纯粹考察英语，趁着想着点东西赶紧敲。给你一个数字，让你输出对应形式。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span>hexo </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line"> &#123;</span><br><span class="line">     cin &gt;&gt; num;</span><br><span class="line">     <span class="keyword">if</span>(num % <span class="number">10</span> == <span class="number">1</span> &amp;&amp; num % <span class="number">100</span> != <span class="number">11</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         cout &lt;&lt; num &lt;&lt; <span class="string">&quot;st&quot;</span> &lt;&lt; endl;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span>(num % <span class="number">10</span> == <span class="number">2</span> &amp;&amp; num % <span class="number">100</span> != <span class="number">12</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         cout &lt;&lt; num &lt;&lt; <span class="string">&quot;nd&quot;</span> &lt;&lt; endl;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span>(num % <span class="number">10</span> == <span class="number">3</span> &amp;&amp; num % <span class="number">100</span> != <span class="number">13</span>)&#123;</span><br><span class="line">        cout &lt;&lt; num &lt;&lt; <span class="string">&quot;rd&quot;</span> &lt;&lt; endl;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; num &lt;&lt; <span class="string">&quot;th&quot;</span> &lt;&lt; endl;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h2><p>输入a b c d e f六个数字，按题目的格式写出来。看看这个形式下的公式是双曲线 还是椭圆 还是抛物线，还是圆。和队友讨论一会，确定绝对正确的答案之后开敲。WA了，想了好一段时间，愣是不知道为什么WA，直到看到 输入的a b c d e f 是实数，我们惊呆了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const double eps = 1e-6;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    double a,b,c,d,e,f;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">        while(t--)&#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt;b &gt;&gt;c &gt;&gt; d &gt;&gt; e &gt;&gt; f;</span><br><span class="line">        if(fabs(a - c) &lt; eps)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;circle\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else if((fabs(a*1.0 - 0.0)) &lt; eps || (fabs(c*1.0 - 0.0)) &lt; eps)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;parabola\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(a * c &gt; 0 )</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;ellipse\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            printf(&quot;hyperbola\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D题"><a href="#D题" class="headerlink" title="D题"></a>D题</h2><p>模拟题，题目怎么说就怎么做。问题是读不懂啊。能A过的都是神仙QAQ。  题意这里就不列举了。太长了。 不过这道题还是有收获的。 再输出string s 的时候，如果 cout &lt;&lt; s &lt;&lt; endl 超时 用 cout &lt;&lt; s &lt;&lt;</p>
<p>‘\n’  就过了，一个10ms,一个超时，什么鬼啊。 好吧，看见宝乐总结的了但是没有放在心上，我长记性了QWQ。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">char</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isdigit</span>(s) || <span class="built_in">isalpha</span>(s))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">change</span><span class="params">(string &amp;s, <span class="type">int</span> n,<span class="type">int</span> flag,<span class="type">char</span> &amp;ch,<span class="type">int</span> &amp;last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    last = n;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s[n] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[n] == <span class="string">&#x27;z&#x27;</span> + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s[n] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[n] == <span class="string">&#x27;Z&#x27;</span> + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s[n] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            ch = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[n] == <span class="string">&#x27;9&#x27;</span> + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s[n] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            ch = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T, n;</span><br><span class="line">    string s;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; s &gt;&gt; n;</span><br><span class="line">        <span class="keyword">while</span>(n--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> index;</span><br><span class="line">            <span class="type">int</span> sz = s.<span class="built_in">size</span>() - <span class="number">1</span>, i;</span><br><span class="line">            <span class="keyword">for</span>(i = sz; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">check</span>(s[i]))</span><br><span class="line">                &#123;</span><br><span class="line">                    index = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                s[sz]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                string s1;</span><br><span class="line">                <span class="type">char</span> ch;</span><br><span class="line">                <span class="type">int</span> flag = <span class="number">1</span>,last;</span><br><span class="line">                <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="built_in">change</span>(s,index,flag,ch,last);</span><br><span class="line">                    <span class="keyword">if</span>(!flag)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">for</span>( i = index - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">                    &#123;</span><br><span class="line">                         <span class="keyword">if</span>(<span class="built_in">check</span>(s[i]))</span><br><span class="line">                         &#123;</span><br><span class="line">                             index = i;</span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                         &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(i == <span class="number">-1</span> &amp;&amp; flag)</span><br><span class="line">                    &#123;</span><br><span class="line">                        s.<span class="built_in">insert</span>(s.<span class="built_in">begin</span>() + last, ch);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(i == <span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; s &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F题"><a href="#F题" class="headerlink" title="F题"></a>F题</h2><p>F题是我们过的比较茫然的，题目我们都不太理解，但是其他队伍也都早早A了，而且代码很短，于是我快速按规律敲了一遍，WA了，于是我认为是我的没理解题意导致的，就先放在一边了。后来想到了其中的BUG，人的名字是一个circle，所以还是在茫然的状态下又来了一遍，A了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,n,index;</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">     <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">       string s[<span class="number">2001</span>];</span><br><span class="line">       string s1;</span><br><span class="line">       cin &gt;&gt; n &gt;&gt; s1;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">       &#123;</span><br><span class="line">           cin &gt;&gt; s[i];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; i++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span>(s[i] == s1)</span><br><span class="line">           &#123;</span><br><span class="line">               index = i;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> counter = <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = index ; i &lt;= n; ++i)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span>(counter ==  n/<span class="number">2</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               flag = <span class="number">1</span>;</span><br><span class="line">               cout &lt;&lt; s[i] &lt;&lt; endl;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           counter++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(!flag)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span>(counter ==  n /<span class="number">2</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                cout &lt;&lt; s[i] &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               counter++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="L题"><a href="#L题" class="headerlink" title="L题"></a>L题</h2><p>嗯，又是一个类似寒假做过的题目，但是我是真的忘了。队友提出了她的规律公式 f[n] &#x3D; f[n &#x2F; 2] + 1, 验证了一下，果然正确，好强大。 问题是n可以达到1e9, 于是我按照这个公式手写了一下前几项，发现其实可以用Log2(n)来计算。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t)!= EOF)</span><br><span class="line">    &#123;</span><br><span class="line">     <span class="keyword">while</span>(t--)</span><br><span class="line">     &#123;</span><br><span class="line">         cin &gt;&gt; n;</span><br><span class="line">         <span class="type">int</span> a = (<span class="type">int</span>)<span class="built_in">log2</span>(n);</span><br><span class="line">         cout &lt;&lt; a + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="M题"><a href="#M题" class="headerlink" title="M题"></a>M题</h2><p>找中位数的水题，第二道A的题目</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="type">double</span> a[<span class="number">10001</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>,a + n + <span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.3f\n&quot;</span>,a[n / <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.3f\n&quot;</span>,(a[n/ <span class="number">2</span>] + a[n/<span class="number">2</span><span class="number">+1</span>])/<span class="number">2.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>比赛总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2019 SDNU Contest 13 题解</title>
    <url>/2019/05/06/2019-SDNU-Contest-13-%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>比赛题解</p>
<span id="more"></span>

<h4 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h4><p>给你两个数字A, C，可以把某一个数字拆成两个数字, 然后就组成新的三个数,比如说A B C。然后可以任意组合（几个数都行），符号也随便。问你某一种拆分方法之后所组合的数的最多种数。第一遍的时候就做的差不多对了，但是看了第一个样例，4 9 输出13，又被混淆了。最后终于改了回来，但是因为考虑的种类不够，还是没法输出正确答案，在队友的提醒下，想到还可以两个数组合（开始我只考虑了1个数和3个数的情况），终于A了，不过代码不忍直视。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,a ,b,num1 , num2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    set&lt;<span class="type">int</span>&gt;S;</span><br><span class="line">    <span class="type">int</span> sz;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="type">int</span> maxer = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a ; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            num1 = i;</span><br><span class="line">            num2 = a - i;</span><br><span class="line">            S.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">if</span>(num1 &gt; <span class="number">0</span> &amp;&amp; num2 &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(num1 &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num1);</span><br><span class="line">                <span class="keyword">if</span>(num2 &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num2);</span><br><span class="line">                <span class="keyword">if</span>(b &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(b);</span><br><span class="line">                <span class="keyword">if</span>(num1 + num2 + b &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num1 + num2 + b);</span><br><span class="line">                <span class="keyword">if</span>(num1 + num2 - b &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num1 + num2 - b);</span><br><span class="line">                <span class="keyword">if</span>(num1 - num2 + b &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num1 - num2 + b);</span><br><span class="line">                <span class="keyword">if</span>(num1 - num2 - b &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num1 - num2 - b);</span><br><span class="line">                <span class="keyword">if</span>(-num1 + num2 + b &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(-num1 + num2 + b);</span><br><span class="line">                <span class="keyword">if</span>(-num1 + num2 - b &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(-num1 + num2 - b);</span><br><span class="line">                <span class="keyword">if</span>(-num1 - num2 + b &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(-num1 - num2 + b);</span><br><span class="line">                <span class="keyword">if</span>(-num1 - num2 - b &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(-num1 - num2 - b);</span><br><span class="line">                <span class="keyword">if</span>(num2 + num1 &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num1 + num2);</span><br><span class="line">                <span class="keyword">if</span>(num1 -num2 &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num1 - num2);</span><br><span class="line">                <span class="keyword">if</span>(num1 + b &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num1 + b);</span><br><span class="line">                <span class="keyword">if</span>(num1 - b &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num1 - b);</span><br><span class="line">                <span class="keyword">if</span>(num2 + b &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num2 + b);</span><br><span class="line">                <span class="keyword">if</span>(num2 -b &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num2 - b);</span><br><span class="line">                <span class="keyword">if</span>(num2 - num1 &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num2 - num1);</span><br><span class="line">                <span class="keyword">if</span>(b - num1 &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(b -num1);</span><br><span class="line">                <span class="keyword">if</span>(b - num2 &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(b - num2);</span><br><span class="line">                sz = S.<span class="built_in">size</span>();</span><br><span class="line">                maxer = <span class="built_in">max</span>(maxer,sz);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> maxer1 = <span class="number">-1</span>;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b ; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            num1 = i;</span><br><span class="line">            num2 = b - i;</span><br><span class="line">            S.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">if</span>(num1 &gt; <span class="number">0</span> &amp;&amp; num2 &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                 <span class="keyword">if</span>(num1 &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num1);</span><br><span class="line">                <span class="keyword">if</span>(num2 &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num2);</span><br><span class="line">                <span class="keyword">if</span>(a &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(a);</span><br><span class="line">                <span class="keyword">if</span>(num1 + num2 + a &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num1 + num2 + a);</span><br><span class="line">                <span class="keyword">if</span>(num1 + num2 - a &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num1 + num2 - a);</span><br><span class="line">                <span class="keyword">if</span>(num1 - num2 + a &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num1 - num2 + a);</span><br><span class="line">                <span class="keyword">if</span>(num1 - num2 - a &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num1 - num2 - a);</span><br><span class="line">                <span class="keyword">if</span>(-num1 + num2 + a &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(-num1 + num2 + a);</span><br><span class="line">                <span class="keyword">if</span>(-num1 + num2 - a &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(-num1 + num2 - a);</span><br><span class="line">                <span class="keyword">if</span>(-num1 - num2 + a &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(-num1 - num2 + a);</span><br><span class="line">                <span class="keyword">if</span>(-num1 - num2 - a &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(-num1 - num2 - a);</span><br><span class="line">                <span class="keyword">if</span>(num2 + num1 &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num1 + num2);</span><br><span class="line">                <span class="keyword">if</span>(num1 -num2 &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num1 - num2);</span><br><span class="line">                <span class="keyword">if</span>(num1 + a &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num1 + a);</span><br><span class="line">                <span class="keyword">if</span>(num1 - a &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num1 - a);</span><br><span class="line">                <span class="keyword">if</span>(num2 + a &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num2 + a);</span><br><span class="line">                <span class="keyword">if</span>(num2 - a &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num2 - a);</span><br><span class="line">                <span class="keyword">if</span>(num2 - num1 &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(num2 - num1);</span><br><span class="line">                <span class="keyword">if</span>(a - num1 &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(a -num1);</span><br><span class="line">                <span class="keyword">if</span>(a - num2 &gt; <span class="number">0</span>)</span><br><span class="line">                S.<span class="built_in">insert</span>(a - num2);</span><br><span class="line">                sz = S.<span class="built_in">size</span>();</span><br><span class="line">                maxer1 = <span class="built_in">max</span>(maxer1,sz);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">max</span>(maxer,maxer1) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="D题"><a href="#D题" class="headerlink" title="D题"></a>D题</h4><p>给你车站的数目，以及车线的数目，车线是用来连接车站的。但是注意的是，如果有多条车线连接是相同的两个车站，那么只能看成一条车线。然后让你输出密度&#x3D; 车线的数目&#x2F;车站的数目。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf =<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">bool</span> a[<span class="number">501</span>][<span class="number">501</span>];</span><br><span class="line"><span class="type">int</span> A[<span class="number">2001</span>],B[<span class="number">2001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;B[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ;i &lt;= m ;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!a[A[i]][B[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                a[A[i]][B[i]] = a[B[i]][A[i]] = <span class="number">1</span>;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> c = (sum*<span class="number">1.0</span>)/n;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.3f\n&quot;</span>,c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="F题"><a href="#F题" class="headerlink" title="F题"></a>F题</h4><p>告诉你谁和谁是好朋友，然后如果满足：两个本身不是朋友的人的共同好友大于等于K个，那么这两个人就是好友了。一开始我考虑的不周到，更新了两个人的朋友关系之后，只是把这个更新的关系应用到了后续的判断当中，忘记了可能这个朋友关系也可以更新原本可能未更新的人。但是考虑到如果外边在套上一个N的循环，那么就达到了O（n^4），n是可以达到100的，这样数据很大。所以没敢写。后来看队友宝乐的代码，发现他的优化还是蛮多的，看来有时候小的优化也是需要重视的。这里稍微改动一下队友的代码，发现队友写的挺不错。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf =<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,n,m,k,A,B;</span><br><span class="line">    <span class="type">bool</span> a[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;A,&amp;B);</span><br><span class="line">            a[A][B] = <span class="number">1</span>;</span><br><span class="line">            a[B][A] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> tem = n;</span><br><span class="line">        <span class="keyword">while</span>(tem--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span> ; j &lt; n; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(a[i][j] == <span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> p = <span class="number">0</span>; p &lt; n; ++p)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[i][p] &amp;&amp; a[j][p])</span><br><span class="line">                        &#123;</span><br><span class="line">                            sum++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(sum &gt;= k)</span><br><span class="line">                        &#123;</span><br><span class="line">                            sum1++;</span><br><span class="line">                            a[i][j] = <span class="number">1</span>;</span><br><span class="line">                            a[j][i] = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum1 == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; sum1 &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="H题"><a href="#H题" class="headerlink" title="H题"></a>H题</h4><p>看图说话，题目中告诉你公式了，让你输出一个最小值一个最大值，只是简单的排个序即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf =<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,A,B,C;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3001</span>],b[<span class="number">3001</span>];</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;A,&amp;B,&amp;C);</span><br><span class="line">        <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= A; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            a[++tot] = <span class="number">300</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= B; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            a[++tot] = <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= C; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            a[++tot] = <span class="number">50</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= A + B + C; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum1 += a[i] * ((i - <span class="number">1</span>)*<span class="number">2</span><span class="number">+1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(a + <span class="number">1</span>, a+ tot + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> sum2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= A + B + C; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum2 += a[i] * ((i - <span class="number">1</span>)*<span class="number">2</span><span class="number">+1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; sum1 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; sum2 &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="I题"><a href="#I题" class="headerlink" title="I题"></a>I题</h4><p>比赛的时候看不懂题意，后来补过了。给你一个字符串，你首先需要处理他的长度。把他的长度写成一个二进制串，然后从最后的7位挨着看，7位7位的输出16进制，但是如果这7位之前的某个高位是1，那么就不能7位输出了，需要把第8位上补上1再把这8位进行16进制输出。然后再把长度左移7位，继续处理下面的七位，直到这个二进制数字处理完。最后就简单了，直接输出原来字符串每个字符的16进制，注意用%02X输出</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> t;</span><br><span class="line">   string s;</span><br><span class="line">   cin &gt;&gt; t;</span><br><span class="line">   <span class="built_in">getchar</span>();</span><br><span class="line">   <span class="keyword">while</span>(t--)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">getline</span>(cin , s);</span><br><span class="line">       <span class="type">int</span> sz = s.<span class="built_in">size</span>();</span><br><span class="line">       <span class="keyword">if</span>(sz == <span class="number">0</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;00\n&quot;</span>);</span><br><span class="line">           <span class="keyword">continue</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span>(sz)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="type">int</span> k = sz % <span class="number">128</span>;</span><br><span class="line">           sz /= <span class="number">128</span>;</span><br><span class="line">           <span class="keyword">if</span>(sz)</span><br><span class="line">            k += <span class="number">128</span>;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>,k);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>,s[i]);</span><br><span class="line">       &#125;</span><br><span class="line">       cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="J题"><a href="#J题" class="headerlink" title="J题"></a>J题</h4><p>又是一个circle,同五一假期做的我们感到很茫然的F题一样，用了同样的方法。同时我们注意到M是小于等于N的，那我们就在本身的数组上面再加上一个数组，这样我们就不用什么取余了，直接挨着往后找就行，不管怎么找都不会超过数组大小。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf =<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> t;</span><br><span class="line">   <span class="type">int</span> a[<span class="number">1001</span>],n,m;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">   <span class="keyword">while</span>(t--)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j = n + <span class="number">1</span>; j &lt;= <span class="number">2</span>*n; ++j)</span><br><span class="line">       &#123;</span><br><span class="line">           a[j] = a[j - n];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> maxer = <span class="number">-1</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">           <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> j = i; ;j++)</span><br><span class="line">           &#123;</span><br><span class="line">               sum += a[j];</span><br><span class="line">               maxer = <span class="built_in">max</span>(maxer,sum);</span><br><span class="line">               cnt++;</span><br><span class="line">               <span class="keyword">if</span>(cnt == m)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       cout &lt;&lt; maxer &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>比赛题解</tag>
      </tags>
  </entry>
  <entry>
    <title>2019 SDNU Contest 15 赛后总结</title>
    <url>/2019/05/04/2019-SDNU-Contest-15-%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><a href="https://vjudge.net/contest/294612#problem/A">比赛链接</a></p>
<p>5月4日比赛总结：各种纠结，各种WA。共A了4题，赛后又补了1道，也是因为细节问题，赛中没有过。</p>
<span id="more"></span>

<h2 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h2><p>告诉你出行的两种方式，就是日常中的出租车，起步价多少钱，超过几公里多少钱，然后让你求两种方式的差价是多少。关键问题在于要四舍五入。第一次WA是忘记返回double, 第二次WA是因为不是最终的答案四舍五入，而是说两种方式的答案分别进行四舍五入，再求差值（队友点睛之笔）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">jisuan1</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> wait)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">3</span> &amp;&amp; n &lt;= <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span> + (n - <span class="number">3</span>)*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( n &gt; <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">24</span> +  (n - <span class="number">10</span>)*<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">jisuan2</span><span class="params">(<span class="type">int</span> n ,<span class="type">int</span> wait)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">11.0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">3</span> &amp;&amp; n &lt;= <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">11.0</span> + (n - <span class="number">3</span>)*<span class="number">2.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( n &gt; <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">28.5</span> +  (n - <span class="number">10</span>)*<span class="number">3.75</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="type">int</span> n,wait;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;wait);</span><br><span class="line">        <span class="type">double</span> a = <span class="built_in">jisuan1</span>(n,wait);</span><br><span class="line">        a += <span class="number">0.4</span> * wait + <span class="number">1</span>;</span><br><span class="line">        <span class="type">double</span> b = <span class="built_in">jisuan2</span>(n,wait);</span><br><span class="line">        b += <span class="number">0.625</span> * wait;</span><br><span class="line">        <span class="keyword">if</span>(b - <span class="built_in">int</span>(b) &gt;= <span class="number">0.5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            b = <span class="built_in">ceil</span>(b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            b = <span class="built_in">floor</span>(b);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">if</span>(a - <span class="built_in">int</span>(a) &gt;= <span class="number">0.5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a = <span class="built_in">ceil</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            a = <span class="built_in">floor</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; b- a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h2><p>一度写的崩溃，本来写完了，后来发现我理解错了题，交上去WA了， 发现是n &#x3D;&#x3D; 1的时候没有处理好，再交，AC。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="type">int</span> vis[<span class="number">13</span>];</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;<span class="type">char</span>&gt;V[<span class="number">21</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        string s[<span class="number">21</span>];</span><br><span class="line">        cin &gt;&gt; s[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            V[<span class="number">0</span>].<span class="built_in">push_back</span>(s[<span class="number">0</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">sort</span>(s[<span class="number">0</span>].<span class="built_in">begin</span>(),s[<span class="number">0</span>].<span class="built_in">end</span>());</span><br><span class="line">            cout &lt;&lt; s[<span class="number">0</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; s[i];</span><br><span class="line">            <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; s[i].<span class="built_in">size</span>(); ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; V[i - <span class="number">1</span>].<span class="built_in">size</span>(); ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(s[i][j] == V[i - <span class="number">1</span>][k] &amp;&amp; !vis[k])</span><br><span class="line">                    &#123;</span><br><span class="line">                        vis[k] = <span class="number">1</span>;</span><br><span class="line">                        V[i].<span class="built_in">push_back</span>(s[i][j]);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        string s3;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; V[n - <span class="number">1</span>].<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            s3 += V[n<span class="number">-1</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(s<span class="number">3.</span><span class="built_in">begin</span>(),s<span class="number">3.</span><span class="built_in">end</span>());</span><br><span class="line">        cout &lt;&lt; s3;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="H题"><a href="#H题" class="headerlink" title="H题"></a>H题</h2><p>一个女孩，非常懒惰，喜欢睡觉，<del>套用高中级部主任的话： 喜欢睡，回家睡去</del>，然后她要卖东西给顾客，输入的是： 从第i个顾客获得利益，以及第i个顾客几分钟之后来。 现在让你求最大的平均利润，以及该利润下的最小的睡眠时间（为什么说最小呢，因为最大的平均利润可能有好几种情况），与队友已经讨论的很明白了，发现题目也并不难，但是后来才知道我们忽略了一个问题，也是网上很多人也犯得错误。 就是这句话：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(i &lt; n &amp;&amp; t[i] + Max[i] &gt;= t[i + <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure>

<p>我们只考虑了他在这种情况下可以卖给前i个人的最大平均利益，但是忘记了也要保证在此状态下，他必须在第i + 1个人来之前睡着，如果不能睡着的话，此状态不成立。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T,n;</span><br><span class="line">    <span class="type">double</span> tt[<span class="number">1001</span>],sump[<span class="number">1001</span>],Max[<span class="number">1001</span>],t[<span class="number">1001</span>],p[<span class="number">1001</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        sump[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;p[i]);</span><br><span class="line">            sump[i] = sump[i - <span class="number">1</span>] + p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        tt[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        Max[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;t[i]);</span><br><span class="line">            tt[i] = t[i] - t[i - <span class="number">1</span>];</span><br><span class="line">            Max[i] = <span class="built_in">max</span>(Max[i - <span class="number">1</span>], tt[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> v[<span class="number">1001</span>];</span><br><span class="line">        <span class="type">double</span> miner = <span class="number">-1.0</span>;</span><br><span class="line">        <span class="type">double</span> miner1 = inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            v[i] = sump[i] / (i * <span class="number">1.0</span>);</span><br><span class="line">            <span class="keyword">if</span>(i &lt; n &amp;&amp; t[i] + Max[i] &gt;= t[i + <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(v[i] &gt;= miner)</span><br><span class="line">            &#123;</span><br><span class="line">                miner = v[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(v[i] == miner)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i &lt; n &amp;&amp; t[i] + Max[i] &gt;= t[i + <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(Max[i] &lt; miner1)</span><br><span class="line">                &#123;</span><br><span class="line">                    miner1 = Max[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.6f %.6f\n&quot;</span>,miner1,miner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="J题"><a href="#J题" class="headerlink" title="J题"></a>J题</h2><p>求逆元模板，最让我们崩溃的题目，开场一出题，我直接开A这道，好兴奋啊，模板上去，第一个A完就行。嗯 ，就这样直到比赛剩下不到一个小时，我真的是最后一个A过去的QAQ。而且最后过的还是用的暴力，没用模板，因为此题的数据范围很小。我和队友一直在讨论拓展欧几里得的模板为什么不行，各种样例都试了。在比赛的最后几分钟，我想起来了一个问题。题目要求的是 (a * x) % m &#x3D;&#x3D; 1 % m , 在我的思想中，包括师哥在讲的时候，我始终认为右边的 % m是无关紧要的。因为我认为 1 % m 都为 1，直到遇到这个题，我想到如果m &#x3D;&#x3D; 1，其实就是让你求 (a * x) % 1 &#x3D;&#x3D; 0 了 那么 x &#x3D;&#x3D; 1 ，需要单独把这个样例特判一下就过了。看来主观臆断害人不浅。中间WA了大于3到4次还是因为 Exist 没有大写，我和队友都惊呆了。</p>
<p><strong>代码1</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">extend</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d = <span class="built_in">extend</span>(b, a % b,x,y);</span><br><span class="line">    <span class="type">int</span> t = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = t - a/b*y;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mod</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="type">int</span> d = <span class="built_in">extend</span>(a,n,x,y);</span><br><span class="line">    <span class="keyword">if</span>(d == <span class="number">1</span>)<span class="keyword">return</span> (x % n + n)% n;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="type">int</span> a,n;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; n;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> c = <span class="built_in">mod</span>(a,n);</span><br><span class="line">        <span class="keyword">if</span>(c &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Not Exist&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; c &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>代码2：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t, i, a, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;m);</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>( i = <span class="number">1</span>; i &lt;= <span class="number">10000</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((a * i) % m == (<span class="number">1</span> % m))</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Not Exist\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="K题"><a href="#K题" class="headerlink" title="K题"></a>K题</h2><p>签到题目，题目挺长的。</p>
<p>说的是一男一女完猜拳的游戏。他们一开始约定好都出相同的姿势，但是男孩想赢，女孩想输，现在给你男，女的名字，以及他们开始约定好的出的姿势。问最后谁会赢。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t, n;</span><br><span class="line">    string s,s1,s2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">            cin &gt;&gt; s &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">            cout &lt;&lt; s1 &lt;&lt; <span class="string">&quot; will survive&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>比赛总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2019 SDNU Contest 18 赛后总结</title>
    <url>/2019/05/04/2019-SDNU-Contest-18-%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><a href="https://vjudge.net/contest/299247#problem/E">比赛链接</a></p>
<p>5月3日比赛总结：前期发育良好，后期猥琐发育。这是2019年刚刚过去的浙江省ACM省赛题目 。后期看群里，7题铜9题银？只有两支师哥队伍是铜牌? 太真实了。看榜单浙江省的前几名好多都是中学生，惭愧啊。</p>
<span id="more"></span>

<h2 id="E题"><a href="#E题" class="headerlink" title="E题"></a>E题</h2><p>每次可以把一个数字移动到最前面去，问你最少移动多少次能够使得该序列为非递减序列。离比赛完毕还有3个小时零13分钟，我们一直在看这个题，<del>emmm,只是单纯的看，没别的，连想都不想</del>，是真的想不出来QAQ，我们智商不够啊。看了题解才知道什么思路： 我们每次往前移动，自然是移动小的数字，那我们从最后一个数字开始往前看有多少个已经排好的数字，那么用总的个数-已经排好的数字个数就是最终的答案了。举个例子： 1 3 5  4 6 7 2 8 我们从后面看，8 7 6 5是已经按顺序排好的，剩下1 3 4 2 未排好，那么最终的答案就是 8 - 4 &#x3D; 4。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int a[100001];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t, n;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">    while(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        priority_queue&lt;int&gt;Q;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">        for(int i = 1; i &lt;= n ;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">            Q.push(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        int ans = n;</span><br><span class="line">        for(int i = n ; i &gt;= 1; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            if(a[i] == Q.top())</span><br><span class="line">            &#123;</span><br><span class="line">                ans--;</span><br><span class="line">                Q.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F题"><a href="#F题" class="headerlink" title="F题"></a>F题</h2><p>将已给的字符串删掉其中的几个字母，签到题。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> t;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">   <span class="keyword">while</span>(t--)</span><br><span class="line">   &#123;</span><br><span class="line">       string s,s1;</span><br><span class="line">       cin &gt;&gt; s;</span><br><span class="line">       s1 += s[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span>(s[i] != <span class="string">&#x27;a&#x27;</span> &amp;&amp; s[i] != <span class="string">&#x27;e&#x27;</span> &amp;&amp; s[i] != <span class="string">&#x27;i&#x27;</span> &amp;&amp; s[i] != <span class="string">&#x27;y&#x27;</span> &amp;&amp; s[i] != <span class="string">&#x27;o&#x27;</span> &amp;&amp; s[i] != <span class="string">&#x27;u&#x27;</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               s1 += s[i];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="G题"><a href="#G题" class="headerlink" title="G题"></a>G题</h2><p>找大于等于该数字的能被7整除但不能被4整除的最小数字。签到题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n; ; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">7</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">4</span> !=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="H题"><a href="#H题" class="headerlink" title="H题"></a>H题</h2><p>通俗点说，如果一个数既大于他左边的数字，也大于他右边的数字那么这个数是个不好的数字。</p>
<p>现在让你最多删除一个数字（不删也行，可以删除任意一个数字），问最后剩下的不好的数字的个数最少是多少。队友翻译完后，想了一会，觉得删除一个数字只对他左右两边的数字产生影响，因此可以进行O（N）的遍历，看看删除哪个数更好一些。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n <span class="number">-1</span> ;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt; a[i - <span class="number">1</span>] &amp;&amp; a[i] &gt; a[i + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> maxer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> cnt2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[<span class="number">2</span>] &gt; a[<span class="number">1</span>] &amp;&amp; a[<span class="number">2</span>] &gt; a[<span class="number">3</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    cnt2++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cnt2 == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    maxer = <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[n - <span class="number">1</span>] &gt; a[n] &amp;&amp; a[n - <span class="number">1</span>] &gt; a[n - <span class="number">2</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    cnt2++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cnt2 == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    maxer = <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="keyword">if</span>(a[<span class="number">3</span>] &gt; a[<span class="number">1</span>] &amp;&amp; a[<span class="number">3</span>] &gt; a[<span class="number">4</span>])</span><br><span class="line">               &#123;</span><br><span class="line">                   cnt2++;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span>(a[<span class="number">3</span>] &gt; a[<span class="number">2</span>] &amp;&amp; a[<span class="number">3</span>] &gt; a[<span class="number">4</span>])</span><br><span class="line">               &#123;</span><br><span class="line">                   cnt2--;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span>(a[<span class="number">2</span>] &gt; a[<span class="number">1</span>] &amp;&amp; a[<span class="number">2</span>] &gt; a[<span class="number">3</span>])</span><br><span class="line">               &#123;</span><br><span class="line">                   cnt2--;</span><br><span class="line">               &#125;</span><br><span class="line">               maxer = <span class="built_in">min</span>(maxer,cnt2);</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == n - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i - <span class="number">1</span>] &gt; a[i - <span class="number">2</span>] &amp;&amp; a[i - <span class="number">1</span> ] &gt; a[i + <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    cnt2++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(a[i - <span class="number">1</span>] &gt; a[i - <span class="number">2</span>] &amp;&amp; a[i - <span class="number">1</span>] &gt; a[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    cnt2--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(a[i] &gt; a[i - <span class="number">1</span>] &amp;&amp; a[i] &gt; a[i + <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    cnt2--;</span><br><span class="line">                &#125;</span><br><span class="line">                maxer = <span class="built_in">min</span>(maxer,cnt2);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt; a[i - <span class="number">1</span>] &amp;&amp; a[i] &gt; a[i + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                cnt2--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[i - <span class="number">1</span>] &gt; a[i - <span class="number">2</span>] &amp;&amp; a[i - <span class="number">1</span>] &gt; a[i + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                cnt2++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[i - <span class="number">1</span>] &gt; a[i] &amp;&amp; a[i - <span class="number">1</span>] &gt; a[i - <span class="number">2</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                cnt2--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[i + <span class="number">1</span>] &gt; a[i - <span class="number">1</span>] &amp;&amp; a[i + <span class="number">1</span>] &gt; a[i + <span class="number">2</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                cnt2++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[i + <span class="number">1</span>] &gt; a[i] &amp;&amp; a[i + <span class="number">1</span>] &gt; a[i + <span class="number">2</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                cnt2--;</span><br><span class="line">            &#125;</span><br><span class="line">            maxer = <span class="built_in">min</span>(maxer, cnt2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt + maxer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="I题"><a href="#I题" class="headerlink" title="I题"></a>I题</h2><p>给你一个斐波那契数列，然后问你第a 到第b项的斐波那契数字之和是奇数还是偶数。开场我就看到这个题目，发现每三个数就是循环，但是我的思路需要a先减掉1,a可以是个非常大的数字，C++进行大数-1应该是很麻烦，所以直接用JAVA写，最后直接写了9个if AC, 赛后发现9种if可以合并。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">cin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">		BigInteger a,b;</span><br><span class="line">		<span class="type">int</span> t;</span><br><span class="line">		t = cin.nextInt();</span><br><span class="line">		<span class="keyword">while</span>(t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		a = cin.nextBigInteger();</span><br><span class="line">		a= a.add(BigInteger.valueOf(-<span class="number">1</span>));</span><br><span class="line">		b = cin.nextBigInteger();</span><br><span class="line">		BigInteger flag , flag1, c;</span><br><span class="line">		flag = a.mod(BigInteger.valueOf(<span class="number">3</span>));</span><br><span class="line">		flag1 = b.mod(BigInteger.valueOf(<span class="number">3</span>));</span><br><span class="line">		c = flag.subtract(flag1);</span><br><span class="line">		<span class="keyword">if</span>(c.mod(BigInteger.valueOf(<span class="number">2</span>)).compareTo(BigInteger.valueOf(<span class="number">0</span>)) == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="J题"><a href="#J题" class="headerlink" title="J题"></a>J题</h2><p>赛后好多人都补了这个题，发现考察的是优先队列和并查集，题目确实不错。说的是有n个人，m对关系，都是朋友关系，现在一个人一个人进场，如果这个人发现场内没有他的朋友，他就会不高兴，现在让你最小化不高兴的人数，同时输出最小字典序的进场顺序。注意A和B是朋友，B和C是朋友，但是A和C不一定是朋友。</p>
<p>开始我想的是谁的朋友多先输出谁，后来想出了这个思路不对。比如说 1和2是朋友，2和3是朋友，3和4是朋友，4和5是朋友，5还和2 3 4 是朋友，5的朋友最多，但是你不能先输出5，应该输出1 2 3 4 5这才是最小字典序。也就是说我们不应该找朋友最多的人，而是把这些关系利用并查集合并成一个一个的联通块，只有根节点是不高兴的人，后面的人都是和这个并查集里的人有关系的。最终f[i] &#x3D; i的个数就是不高兴的人的个数。我们先把这些不高兴的人放进优先队列里，然后在逐渐的找和这些人是朋友的那些人，在把他们放进队列里，这样不断重复，知道队列为空。我们做的就是从一开始就是字典序，然后后面每一步都是最小字典序了。为了保证一开始是最小字典序，我们在进行并查集的合并的时候，要尽量的把序号小的人放在根节点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;V[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> vis[<span class="number">1000001</span>],f[<span class="number">1000001</span>],b[<span class="number">1000001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != f[x])</span><br><span class="line">    &#123;</span><br><span class="line">        f[x] = <span class="built_in">Find</span>(f[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">combine</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> fa = <span class="built_in">Find</span>(a);</span><br><span class="line">    <span class="type">int</span> fb = <span class="built_in">Find</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(fa &lt; fb)</span><br><span class="line">        f[fb] = fa;</span><br><span class="line">    <span class="keyword">if</span>(fa &gt; fb)</span><br><span class="line">        f[fa] = fb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,n,m,aa,bb;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i] = i;</span><br><span class="line">            vis[i] = <span class="number">0</span>;</span><br><span class="line">            V[i].<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;aa,&amp;bb);</span><br><span class="line">            <span class="built_in">combine</span>(aa ,bb);</span><br><span class="line">            V[aa].<span class="built_in">push_back</span>(bb);</span><br><span class="line">            V[bb].<span class="built_in">push_back</span>(aa);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt; &gt;P;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(f[i] == i)</span><br><span class="line">            &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                P.<span class="built_in">push</span>(i);</span><br><span class="line">                vis[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!P.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> num = P.<span class="built_in">top</span>();</span><br><span class="line">            P.<span class="built_in">pop</span>();</span><br><span class="line">            b[++tot] = num;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; V[num].<span class="built_in">size</span>(); ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> t = V[num][i];</span><br><span class="line">                <span class="keyword">if</span>(!vis[t])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[t] = <span class="number">1</span>;</span><br><span class="line">                    P.<span class="built_in">push</span>(t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; b[i];</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; b[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>比赛总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2019ICPC南昌网络赛 E 双端队列模拟</title>
    <url>/2019/09/09/2019ICPC%E5%8D%97%E6%98%8C%E7%BD%91%E7%BB%9C%E8%B5%9B-E-%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97%E6%A8%A1%E6%8B%9F/</url>
    <content><![CDATA[<p>直接搞自闭的一道题。</p>
<span id="more"></span>

<p><a href="https://nanti.jisuanke.com/t/41352">题目连接</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>模拟一个双端队列，双端队列反推摸牌过程，最后双端队列可以当作数组用，直接输出对应标号即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="type">int</span> value = n,q;</span><br><span class="line">        deque&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">        <span class="keyword">while</span>(Q.<span class="built_in">size</span>() &lt; n - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Q.<span class="built_in">push_front</span>(value--);</span><br><span class="line">            <span class="type">int</span> num = m;</span><br><span class="line">            <span class="keyword">while</span>(num--)</span><br><span class="line">            &#123;</span><br><span class="line">                Q.<span class="built_in">push_front</span>(Q.<span class="built_in">back</span>());</span><br><span class="line">                Q.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Q.<span class="built_in">push_front</span>(<span class="number">1</span>);</span><br><span class="line">        cin &gt;&gt; q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x; cin &gt;&gt; x;</span><br><span class="line">            cout &lt;&lt;  Q[x - <span class="number">1</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>双端队列</tag>
      </tags>
  </entry>
  <entry>
    <title>2019ICPC徐州网络赛 E 线段树 + 二分</title>
    <url>/2019/09/07/2019ICPC%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B-E-%E7%BA%BF%E6%AE%B5%E6%A0%91-%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<p>竟然是线段树?</p>
<span id="more"></span>

<p>队友二分过的，tql</p>
<p><a href="https://nanti.jisuanke.com/t/41387">链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意+"></a>题意+</h2><p>让你求大于这个数+m的最远的那个数与当前数字的中间有几个数字。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们先将这个序列排序，并记录每个数字的位置。然后我们遍历每个数字的时候： 首先找到大于当前数字的排好序的序列中的位置，查询这个位置到最后位置的区间中坐标的最大值。这个查询就是线段树，我们需要事先建好以排好序的序列中的元素的下标为叶子节点的线段树。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">500005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> value,pos;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="type">int</span> b[maxn],c[maxn],ans[maxn],d[maxn];</span><br><span class="line"><span class="type">int</span> tr[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.value == b.value)</span><br><span class="line">        <span class="keyword">return</span> a.pos &lt; b.pos;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.value &lt; b.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        tr[node] = b[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span>, l,mid);</span><br><span class="line">    <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    tr[node] = <span class="built_in">max</span>(tr[node &lt;&lt; <span class="number">1</span>], tr[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Max ;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql &gt; r || qr &lt; l)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ql &lt;= l &amp;&amp; qr &gt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        Max = <span class="built_in">max</span>(Max,tr[node]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">query</span>(node &lt;&lt;<span class="number">1</span>, l, mid, ql, qr);</span><br><span class="line">    <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid <span class="number">+1</span>, r, ql, qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> n,m ;</span><br><span class="line">   cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].value);</span><br><span class="line">       d[i] = a[i].value;</span><br><span class="line">       a[i].pos = i;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">      c[i] = a[i].value;</span><br><span class="line">      b[i] = a[i].pos;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ;i &lt;= n; ++i)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="type">int</span> pos = <span class="built_in">lower_bound</span>(c + <span class="number">1</span>,c + n + <span class="number">1</span>, d[i] + m) - c;</span><br><span class="line">       <span class="keyword">if</span>(pos == n + <span class="number">1</span>)&#123;</span><br><span class="line">         ans[i] = <span class="number">-1</span>;</span><br><span class="line">         <span class="keyword">continue</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       Max = <span class="number">-1</span>;</span><br><span class="line">       <span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,pos,n);</span><br><span class="line">       <span class="keyword">if</span>(Max &lt;= i)</span><br><span class="line">       ans[i] = <span class="number">-1</span>;</span><br><span class="line">       <span class="keyword">else</span> ans[i] = Max - i - <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,ans[i],i==n?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客暑假多校第八场A  单调栈</title>
    <url>/2019/08/11/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E5%81%87%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%85%AB%E5%9C%BAA-%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    <content><![CDATA[<p>第二场已经做过一个类似的了，到这里只是稍微变了一下。</p>
<span id="more"></span>

<p><a href="https://ac.nowcoder.com/acm/contest/888/A">链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你一个01矩阵，让求全1矩阵的个数，但是这些矩阵中不能互相有包含关系。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们可以先用基本的单调栈求出每个(i,j)点左延伸和右延伸的地方。至于判断的话，我们想一下，所有的包含也就是上下包含和左右包含，不管多么复杂的矩阵包含无外乎都是这样的，然后左右包含，我们就看看这一行中的左延伸点和右延伸点是否相同就行，上下包含，就需要看$$l[i][j]与l[i+1][j]  ,r[i][j] 与 r[i+1][j], h[i][j]与h[i+1][j]  $$的关系了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">3005</span>][<span class="number">3005</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> pos, h;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> vis[<span class="number">3005</span>][<span class="number">3005</span>];</span><br><span class="line"><span class="type">int</span> l[<span class="number">3005</span>][<span class="number">3005</span>];</span><br><span class="line"><span class="type">int</span> r[<span class="number">3005</span>][<span class="number">3005</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n , m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n ;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> c;</span><br><span class="line">            cin &gt;&gt; c;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    <span class="comment">//指的是看的前几行</span></span><br><span class="line">    &#123;</span><br><span class="line">        stack&lt;node&gt;S;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!S.<span class="built_in">empty</span>() &amp;&amp; S.<span class="built_in">top</span>().h &gt;= dp[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                S.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(S.<span class="built_in">size</span>() == <span class="number">0</span>) l[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> l[i][j] = S.<span class="built_in">top</span>().pos + <span class="number">1</span>;</span><br><span class="line">            S.<span class="built_in">push</span>(&#123;j,dp[i][j]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!S.<span class="built_in">empty</span>())S.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!S.<span class="built_in">empty</span>() &amp;&amp; S.<span class="built_in">top</span>().h &gt;= dp[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                S.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(S.<span class="built_in">size</span>() == <span class="number">0</span>) r[i][j] = m;</span><br><span class="line">            <span class="keyword">else</span> r[i][j] = S.<span class="built_in">top</span>().pos - <span class="number">1</span>;</span><br><span class="line">            S.<span class="built_in">push</span>(&#123;j,dp[i][j]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i][j] == <span class="number">0</span> || l[i][j] == l[i<span class="number">+1</span>][j] &amp;&amp; r[i][j] == r[i + <span class="number">1</span>][j]</span><br><span class="line">               &amp;&amp; dp[i + <span class="number">1</span>][j] == dp[i][j] + <span class="number">1</span> || vis[ l[i][j] ][ r[i][j]] == i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">           vis[ l[i][j] ][ r[i][j]] = i;</span><br><span class="line">            ans ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU - 1548 A strange lift</title>
    <url>/2019/04/29/A-strange-lift/</url>
    <content><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1548">题目链接</a></p>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>每层电梯有一个数字num，在第i层楼梯中你按了上，那么你就会到达i + num 层或者是 i - num 层，当然这个层数 &gt;&#x3D; 1 &amp;&amp; &lt;&#x3D; n, 现在问你要从A层到达B层，最少需要按多少次按钮。</p>
<span id="more"></span>

<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>基础BFS，每层楼梯有两个相应的状态，然后不断搜索就行了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> x,time;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> N,vis[<span class="number">201</span>],f[<span class="number">201</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> st,<span class="type">int</span> ed)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    node A,B;</span><br><span class="line">    queue&lt;node&gt;Q;</span><br><span class="line">    A.x = st;</span><br><span class="line">    A.time = <span class="number">0</span>;</span><br><span class="line">    Q.<span class="built_in">push</span>(A);</span><br><span class="line">    vis[st] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        A = Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(A.x == ed)</span><br><span class="line">        <span class="keyword">return</span> A.time;</span><br><span class="line">        t = A.x + f[A.x];</span><br><span class="line">        <span class="keyword">if</span>(!vis[t] &amp;&amp; t &gt;= <span class="number">1</span> &amp;&amp; t &lt;= N)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[t] = <span class="number">1</span>;</span><br><span class="line">            B.x = t;</span><br><span class="line">            B.time = A.time + <span class="number">1</span>;</span><br><span class="line">            Q.<span class="built_in">push</span>(B);</span><br><span class="line">        &#125;</span><br><span class="line">        t = A.x - f[A.x];</span><br><span class="line">        <span class="keyword">if</span>(!vis[t] &amp;&amp; t &gt;= <span class="number">1</span> &amp;&amp; t &lt;= N)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[t] = <span class="number">1</span>;</span><br><span class="line">            B.x = t;</span><br><span class="line">            B.time = A.time + <span class="number">1</span>;</span><br><span class="line">            Q.<span class="built_in">push</span>(B);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> A,B;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; N &amp;&amp; N)&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    cin &gt;&gt; A &gt;&gt; B;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; f[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> c = <span class="built_in">bfs</span>(A,B);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="number">-1</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Gym - 101981J 质因数分解 + 思维</title>
    <url>/2019/08/30/Gym-101981J-%E8%B4%A8%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3-%E6%80%9D%E7%BB%B4/</url>
    <content><![CDATA[<p>需要存储每个质因数存在的位置，然后计算出每个质因数的贡献和。</p>
<span id="more"></span>

<p><a href="https://vjudge.net/problem/Gym-101981J">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>Mul(i,j)代表的是第i到j个数字的乘积，然后fac(i,j)代表这个乘积的不同的质因子的个数。现在让你求出n^2段区间内的fac(i,j)和.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>显然不能用N^2的做法。我们可以先把每个数字质因数分解，存储每个质因数所在的位置。比如说序列为22,33。 那么11这个质因数存在的位置就是1,2.  然后我们枚举每个质因数的每个存在的位置，计算贡献和。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;V[maxn + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> tot,a[maxn + <span class="number">5</span>];</span><br><span class="line"><span class="type">bool</span> is[maxn + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> prime[maxn + <span class="number">5</span>],n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(is, <span class="number">0</span>, <span class="built_in">sizeof</span>(is));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= maxn; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!is[i])</span><br><span class="line">        &#123;</span><br><span class="line">            prime[++tot] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + i; j &lt;= maxn; j += i)</span><br><span class="line">            &#123;</span><br><span class="line">                is[j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;  i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; prime[j] * prime[j] &lt;= a[i] &amp;&amp; j &lt;= tot; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i] % prime[j] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    V[prime[j]].<span class="built_in">push_back</span>(i);</span><br><span class="line">                    <span class="keyword">while</span>(a[i] % prime[j] == <span class="number">0</span>)</span><br><span class="line">                        a[i] /= prime[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[i] != <span class="number">1</span>)</span><br><span class="line">            V[a[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">Prime</span>();</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; maxn; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(V[i].<span class="built_in">size</span>() == <span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; V[i].<span class="built_in">size</span>(); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">0</span>)</span><br><span class="line">            ans += <span class="number">1ll</span> * (n - V[i][j] + <span class="number">1</span>) * (V[i][j]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            ans += <span class="number">1ll</span> *(n - V[i][j] + <span class="number">1</span>) * (V[i][j] - V[i][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>质因数分解</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 1166 - 敌兵布阵</title>
    <url>/2019/05/01/HDU-1166-%E6%95%8C%E5%85%B5%E5%B8%83%E9%98%B5/</url>
    <content><![CDATA[<p>题目链接： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1166">敌兵布阵</a></p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>区间修改和区间查询，用树状数组快速A了，可能是长时间不写线段树的原因，竟然忘了要开4倍数组，一直TLE。</p>
<span id="more"></span>

<ul>
<li>线段树</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> seqtree[<span class="number">200001</span>],n,p;</span><br><span class="line"><span class="type">int</span> a[<span class="number">200001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">maketree</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> begin, <span class="type">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(begin == end)</span><br><span class="line">    &#123;</span><br><span class="line">        seqtree[node] = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (begin + end) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">maketree</span>(node &lt;&lt; <span class="number">1</span>, begin, mid);</span><br><span class="line">    <span class="built_in">maketree</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>,end);</span><br><span class="line">    seqtree[node] = seqtree[node &lt;&lt; <span class="number">1</span>] + seqtree[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> begin,<span class="type">int</span> end,<span class="type">int</span> pos,<span class="type">int</span> grade)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt; begin || pos &gt; end)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(begin == end &amp;&amp; begin == pos)</span><br><span class="line">    &#123;</span><br><span class="line">        seqtree[node] += grade;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (begin + end) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>,begin, mid, pos,grade);</span><br><span class="line">    <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, end, pos, grade);</span><br><span class="line">    seqtree[node] = seqtree[node &lt;&lt; <span class="number">1</span>] + seqtree[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> begin,<span class="type">int</span> end,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; end || r &lt; begin)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l &lt;= begin &amp;&amp;  r &gt;= end)</span><br><span class="line">        <span class="keyword">return</span> seqtree[node];</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (begin + end) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    sum += <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>,begin,mid,l,r);</span><br><span class="line">    sum += <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>,mid + <span class="number">1</span>,end, l,r);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,A,B,caser = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">101</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case %d:\n&quot;</span>,caser++);</span><br><span class="line">        <span class="built_in">memset</span>(seqtree,<span class="number">0</span>,<span class="built_in">sizeof</span>(seqtree));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="built_in">maketree</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;A,&amp;B);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,A,B));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;A,&amp;B);</span><br><span class="line">                <span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,n,A,B);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;A,&amp;B);</span><br><span class="line">                <span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,n,A,-B);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>树状数组</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> tree[<span class="number">100001</span>],n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &amp; (-x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">    &#123;</span><br><span class="line">        tree[i] += k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i &gt; <span class="number">0</span> ; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">    &#123;</span><br><span class="line">        sum += tree[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t, num, A, B, caser = <span class="number">1</span>;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case %d:\n&quot;</span>,caser++);</span><br><span class="line">        <span class="built_in">memset</span>(tree,<span class="number">0</span>,<span class="built_in">sizeof</span>(tree));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n ;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">            <span class="built_in">update</span>(i,num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(cin &gt;&gt; s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s == <span class="string">&quot;End&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;A,&amp;B);</span><br><span class="line">                cout &lt;&lt; <span class="built_in">Query</span>(B) - <span class="built_in">Query</span>(A - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;A,&amp;B);</span><br><span class="line">                <span class="built_in">update</span>(A,B);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;A,&amp;B);</span><br><span class="line">                <span class="built_in">update</span>(A, -B);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 1829 - A Bug&#39;s Life</title>
    <url>/2019/05/01/HDU-1829-A-Bug-s-Life/</url>
    <content><![CDATA[<p>题目链接: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1829">A Bug’s Life</a></p>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>输入A B  代表A 喜欢 B，现在问你输入的数据里是否会出现同性恋。</p>
<span id="more"></span>

<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>种类并查集，依旧是用带权的思想，类似食物链中的偏移量。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> val[<span class="number">10001</span>],f[<span class="number">10001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != f[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = f[x];</span><br><span class="line">        f[x] = <span class="built_in">Find</span>(f[x]);</span><br><span class="line">        val[x] = (val[x] + val[t]) % <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N, M, t, a, b, caser = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Scenario #%d:\n&quot;</span>,caser++);</span><br><span class="line">        cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i] = i;</span><br><span class="line">            val[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= M; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            <span class="type">int</span> fa = <span class="built_in">Find</span>(a);</span><br><span class="line">            <span class="type">int</span> fb = <span class="built_in">Find</span>(b);</span><br><span class="line">            <span class="keyword">if</span>(fa != fb)</span><br><span class="line">            &#123;</span><br><span class="line">                f[fa] = fb;</span><br><span class="line">                val[fa] = (<span class="number">1</span> + val[b] - val[a]) % <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(val[a] == val[b])</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Suspicious bugs found!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No suspicious bugs found!\n&quot;</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 2243 AC自动机 + 矩阵快速幂</title>
    <url>/2019/08/09/HDU-2243-AC%E8%87%AA%E5%8A%A8%E6%9C%BA-%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
    <content><![CDATA[<p>比想象中要A的顺利很多，关键还是知道怎么处理矩阵。考察的知识很多，是很多题目的综合。</p>
<span id="more"></span>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2243">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>告诉你N个词根，求长度不超过L，只有小写字母组成，至少包含一个词根的单词个数。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>看了至少包含一个，我们自然就应该想到考虑它的对立面，就是一个也不包含，很简单把（我想不到QAQ）.然后我们看它几乎就和POJ那个DNA sequence 完全一样了，但是这个题目求的是小于L长度的，所以我们在求出转移矩阵A之后，需要求$$A^1 + A^2 + … A^L$$,这个怎么求呢，请参考POJ 3233，应用的是矩阵快速幂。最后的答案就是总的可能的种类数目也就是($26 ^ 1 + .. 26^n$),再减去最终得到的那个矩阵第一行的和。需要再提几点，就是这个可能的种类数目不要用等比数列求，因为是有余数操作的，但是我没试过到底等比数列行不行，我这里依然是矩阵快速幂求的。另外一个，题目答案要求对$2^{64}$取余,我们不必设置余数，只要把int都换成unsigned long long即可，程序就自动取余了。好久没写这么长的代码了，调BUG还好很快就过了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll unsigned long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> kind = <span class="number">26</span>;</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span>&#123;</span><br><span class="line">   ll m[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">&#125;M;</span><br><span class="line"><span class="type">int</span> nxt[<span class="number">50</span>][kind], fail[<span class="number">50</span>], mark[<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; kind; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        nxt[cnt][i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mark[cnt] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">word_insert</span><span class="params">(<span class="type">char</span> s[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sz = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> tmp = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(nxt[now][tmp] == <span class="number">-1</span>)</span><br><span class="line">            nxt[now][tmp] = <span class="built_in">newnode</span>();</span><br><span class="line">        now = nxt[now][tmp];</span><br><span class="line">    &#125;</span><br><span class="line">    mark[cnt] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fail[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; kind; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nxt[<span class="number">0</span>][i] == <span class="number">-1</span>)</span><br><span class="line">            nxt[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            fail[nxt[<span class="number">0</span>][i]] = <span class="number">0</span>;</span><br><span class="line">            Q.<span class="built_in">push</span>(nxt[<span class="number">0</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> now = Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(mark[fail[now]])</span><br><span class="line">            mark[now] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; kind; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nxt[now][i] == <span class="number">-1</span>)</span><br><span class="line">                nxt[now][i] = nxt[fail[now]][i];</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                fail[nxt[now][i]] = nxt[fail[now]][i];</span><br><span class="line">                Q.<span class="built_in">push</span>(nxt[now][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_matrix</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(M.m, <span class="number">0</span>, <span class="built_in">sizeof</span>(M.m));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt;= cnt; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; kind; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!mark[i] &amp;&amp; !mark[nxt[i][j]])</span><br><span class="line">            &#123;</span><br><span class="line">                M.m[i][nxt[i][j]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">mul</span><span class="params">(Matrix A, Matrix B, <span class="type">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= sz; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= sz; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp.m[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt;= sz; ++k)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp.m[i][j] = (tmp.m[i][j] + A.m[i][k] * B.m[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">pow</span><span class="params">(Matrix A, <span class="type">int</span> n, <span class="type">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix res;</span><br><span class="line">    <span class="built_in">memset</span>(res.m, <span class="number">0</span>, <span class="built_in">sizeof</span>(res.m));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= sz; ++i)</span><br><span class="line">        res.m[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>)</span><br><span class="line">        res = <span class="built_in">mul</span>(res, A, sz);</span><br><span class="line">        A = <span class="built_in">mul</span>(A, A, sz);</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">  cnt = <span class="number">-1</span>;</span><br><span class="line">  <span class="built_in">newnode</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,l;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;l) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(nxt, <span class="number">-1</span>, <span class="built_in">sizeof</span>(nxt));</span><br><span class="line">        <span class="built_in">memset</span>(mark,<span class="number">0</span>,<span class="built_in">sizeof</span>(mark));</span><br><span class="line">        Matrix A,B,C,D;</span><br><span class="line">        A.m[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">26</span>;</span><br><span class="line">        A.m[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        A.m[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        A.m[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        B.m[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">26</span>;</span><br><span class="line">        B.m[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">26</span>;</span><br><span class="line">        A = <span class="built_in">pow</span>(A, l - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        B = <span class="built_in">mul</span>(A,B,<span class="number">1</span>);</span><br><span class="line">        ll num = B.m[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i  =<span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">            <span class="built_in">word_insert</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">build</span>();</span><br><span class="line">        <span class="built_in">build_matrix</span>();</span><br><span class="line">        <span class="built_in">memset</span>(C.m,<span class="number">0</span>,<span class="built_in">sizeof</span>(C.m));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= cnt; ++i)</span><br><span class="line">                C.m[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = cnt + <span class="number">1</span>; i &lt;= <span class="number">2</span> * cnt + <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = cnt + <span class="number">1</span>; j &lt;= <span class="number">2</span> * cnt + <span class="number">1</span>; ++j )</span><br><span class="line">            &#123;</span><br><span class="line">                C.m[i][j] = C.m[i - cnt - <span class="number">1</span>][j] =  M.m[i - cnt - <span class="number">1</span>][j - cnt - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(D.m, <span class="number">0</span>, <span class="built_in">sizeof</span>(D.m));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = cnt + <span class="number">1</span>; i &lt;= <span class="number">2</span> * cnt + <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= cnt; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                D.m[i][j] = D.m[i - cnt - <span class="number">1</span>][j] =  M.m[i - cnt - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        C = <span class="built_in">pow</span>(C, l - <span class="number">1</span>, <span class="number">2</span> * cnt + <span class="number">1</span>);</span><br><span class="line">        D = <span class="built_in">mul</span>(C, D, <span class="number">2</span> * cnt + <span class="number">1</span>);</span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= cnt; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum = (sum + D.m[<span class="number">0</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; num - sum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>AC自动机</tag>
        <tag>矩阵快速幂</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU- 3038 How Many Answers Are Wrong</title>
    <url>/2019/05/01/HDU-3038-How-Many-Answers-Are-Wrong/</url>
    <content><![CDATA[<p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3038">How Many Answers Are Wrong</a></p>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>输入i r sum 代表 从第 i 个数 到第 r个数的和为 sum, 问你输入的总数据里有几组是矛盾的。</p>
<span id="more"></span>

<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>应用带权并查集，记录每个节点到他所在树的根节点的值，代表从这个节点到根节点的这一段区间的和。  当我们输入 L ，R， SUM 时，如果root(L), root(R) 不一致，也就是说我们这个时候是判断不出来的。如果一致，那我们就看一下 val[L] - val[R] &#x3D;&#x3D; SUM ?</p>
<p>在并查集中，我们在Find函数中加入了 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != f[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = f[x];</span><br><span class="line">        f[x] = <span class="built_in">Find</span>(f[x]);</span><br><span class="line">        val[x] += val[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个完成之后，val[x]就等于x这个节点到根节点的权值了。</p>
<p>这里画一张带权并查集的图 ，有助于理解这句话:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">val[fa] = sum + val[b] - val[a];</span><br></pre></td></tr></table></figure>

<p><img src="/233.jpg"></p>
<p>最后是总代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> f[<span class="number">200005</span>],val[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != f[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = f[x];</span><br><span class="line">        f[x] = <span class="built_in">Find</span>(f[x]);</span><br><span class="line">        val[x] += val[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N, M, a, b, ans, sum;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;N,&amp;M) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= N; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i] = i;</span><br><span class="line">            val[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= M; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; b &gt;&gt; sum;</span><br><span class="line">            a--;</span><br><span class="line">            <span class="type">int</span> fa = <span class="built_in">Find</span>(a);</span><br><span class="line">            <span class="type">int</span> fb = <span class="built_in">Find</span>(b);</span><br><span class="line">            <span class="keyword">if</span>(fa == fb)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((val[a] - val[b]) != sum)</span><br><span class="line">                    ans++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                f[fa] = fb;</span><br><span class="line">                val[fa] = sum + val[b] - val[a];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 3065 AC自动机</title>
    <url>/2019/08/09/HDU-3065-AC%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    <content><![CDATA[<p>算是比较简单的AC自动机题目，但是还是有很多细节需要注意！</p>
<span id="more"></span>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3065">题目链接</a></p>
<h3 id="注意的地方"><a href="#注意的地方" class="headerlink" title="注意的地方"></a>注意的地方</h3><p>在从源码中进行查找的时候，如果是大写字母，可以直接跳过，但是注意令root &#x3D; 0, 否则你就好像删除了那个不管用的字符一样，其实它是把两段字符隔开了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">char</span> s[<span class="number">51</span>];</span><br><span class="line">   <span class="type">int</span> cnt;</span><br><span class="line">   <span class="type">int</span> pos;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> kind = <span class="number">130</span>;</span><br><span class="line"><span class="type">int</span> num[<span class="number">1005</span>], vis[<span class="number">100005</span>],mark[<span class="number">100005</span>],nxt[<span class="number">100005</span>][<span class="number">130</span>], fail[<span class="number">100005</span>];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; kind; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        nxt[cnt][i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[cnt] = <span class="number">0</span>;</span><br><span class="line">    mark[cnt] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">   cnt = <span class="number">-1</span>;</span><br><span class="line">   <span class="built_in">newnode</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">word_insert</span><span class="params">(<span class="type">char</span> s[], <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sz = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="type">int</span> tmp = s[i];</span><br><span class="line">     <span class="keyword">if</span>(nxt[now][tmp] == <span class="number">-1</span>)</span><br><span class="line">     nxt[now][tmp] = <span class="built_in">newnode</span>();</span><br><span class="line">     now = nxt[now][tmp];</span><br><span class="line">   &#125;</span><br><span class="line">   mark[now] = pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fail[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; kind; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nxt[<span class="number">0</span>][i] == <span class="number">-1</span>)</span><br><span class="line">            nxt[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            fail[nxt[<span class="number">0</span>][i]] = <span class="number">0</span>;</span><br><span class="line">            Q.<span class="built_in">push</span>(nxt[<span class="number">0</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> now = Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; kind; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nxt[now][i] == <span class="number">-1</span>)</span><br><span class="line">                nxt[now][i] = nxt[fail[now]][i];</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                fail[nxt[now][i]] = nxt[fail[now]][i];</span><br><span class="line">                Q.<span class="built_in">push</span>(nxt[now][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> s[<span class="number">2000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ac_auto</span><span class="params">(<span class="type">char</span> s[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sz = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] &lt; <span class="string">&#x27;A&#x27;</span> || s[i] &gt; <span class="string">&#x27;Z&#x27;</span>) &#123;now = <span class="number">0</span>; <span class="keyword">continue</span>;&#125;</span><br><span class="line">        now = nxt[now][s[i]];</span><br><span class="line">        <span class="type">int</span> tmp = now;</span><br><span class="line">        <span class="keyword">while</span>(tmp != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            num[mark[tmp]]++;</span><br><span class="line">            tmp = fail[tmp];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n) != EOF)&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a[i].s);</span><br><span class="line">        a[i].pos = i;</span><br><span class="line">        a[i].cnt = <span class="number">0</span>;</span><br><span class="line">        num[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">word_insert</span>(a[i].s, a[i].pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">    <span class="built_in">ac_auto</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(num[a[i].pos] &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;%s: %d\n&quot;</span>,a[i].s ,num[a[i].pos]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>AC自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 3244  完全背包 + 二分</title>
    <url>/2019/08/05/HDU-3244-%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85-%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<p>本以为是道简单的二分，WA到哭。</p>
<span id="more"></span>

<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>一个人要邀请同学来玩，然后需要准备N种材料，每一行有6个数字，分别代表一个人需要多少个这样的材料，以及这个人已经有的材料个数，再就是两种包装，一种小袋子的，有它的size和需要的花费，一种大袋子的，也有size和花费，现在问你这个人最多能够招待多少人。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>二分人数，但是需要大约估计出一个上限，否则会超时。另一个在统计需要怎么分配小袋子和大袋子才能在最小花费的情况下得到最大价值，需要用完全背包。注意的是f数组的初始值是Inf,但是这个数组太大，我们也仅仅需要把一部分赋值成inf,这里可以用for循环，如果f全都赋值inf,会超时。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pi acos(-1.0)</span></span><br><span class="line"><span class="type">int</span> n,s;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="type">int</span> x[maxn],y[maxn],s1[maxn],s2[maxn],p1[maxn],p2[maxn];</span><br><span class="line"><span class="type">int</span> f[<span class="number">8000005</span>];</span><br><span class="line"><span class="type">int</span> S[<span class="number">2</span>],P[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> data, <span class="type">int</span> need)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S[<span class="number">0</span>] = s1[num];</span><br><span class="line">    S[<span class="number">1</span>] = s2[num];</span><br><span class="line">    P[<span class="number">0</span>] = p1[num];</span><br><span class="line">    P[<span class="number">1</span>] = p2[num];</span><br><span class="line">    <span class="type">int</span> v = need +  s2[num];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= v; ++i)</span><br><span class="line">        f[i] = inf;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = S[i] ; j &lt;= v; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            f[j] = <span class="built_in">min</span>(f[j], f[j - S[i]] + P[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ret = inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = need ;  i &lt;= v ; ++i)</span><br><span class="line">        ret = <span class="built_in">min</span>(ret, f[i]);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(data * x[i] - y[i] &lt;= <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        sum +=  <span class="built_in">cal</span>(i, data, data * x[i] - y[i]);</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; s) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;s) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> &amp;&amp; s == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="type">int</span> Min = inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d %d %d&quot;</span>,&amp;x[i],&amp;y[i],&amp;s1[i],&amp;p1[i],&amp;s2[i],&amp;p2[i]);</span><br><span class="line">            <span class="keyword">if</span>((s1[i] * <span class="number">1.0</span>)/ p1[i] &gt; (s2[i] * <span class="number">1.0</span>)/ p2[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> k = ((y[i] + (s * <span class="number">1.0</span>)/ p1[i] * s1[i]) * <span class="number">1.0</span>) / x[i] <span class="number">+5</span>;</span><br><span class="line">                <span class="keyword">if</span>(k &lt; Min) Min = k;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">int</span> k = ((y[i] + (s * <span class="number">1.0</span>)/ p2[i] * s2[i]) *<span class="number">1.0</span>) / x[i] <span class="number">+5</span>;</span><br><span class="line">                <span class="keyword">if</span>(k &lt; Min) Min = k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = Min;</span><br><span class="line">        <span class="type">int</span> mid ;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">judge</span>(mid))</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,r);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>完全背包</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 3974 DFS序 + 线段树区间更新</title>
    <url>/2019/08/25/HDU-3974-DFS%E5%BA%8F-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<p>将题目中的树结构稍微转变一下就是简单的线段树。</p>
<span id="more"></span>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3974">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你一个公司的上司与下属之间的关系，这样就形成了一个树，每次给一个人一个任务的时候，他的下属也会同时得到这个任务，而且必须立即停止之前的任务进行此时的这个任务，现在有两个操作，一是给某个人某个任务，而是询问某个人的此时正在执行的任务标号。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一开始感觉没法处理这个树的关系，后来发现只要我们把每个人以他开始的团队的开始标号和结束标号都求出来，那么就是简单的线段树区间更新和单点查询了，这个标号需要利用DFS序来完成。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">   <span class="type">int</span> v, next;</span><br><span class="line">&#125;edge[maxn];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="type">int</span> head[maxn], vis[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].v = v;</span><br><span class="line">    edge[tot].next = head[u];</span><br><span class="line">    head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> start[maxn], ed[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    start[rt] = ++tot;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[rt]; i != <span class="number">-1</span>; i = edge[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(edge[i].v);</span><br><span class="line">    &#125;</span><br><span class="line">    ed[rt] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> lazy, num;</span><br><span class="line">&#125;tr[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[node].lazy == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    tr[node &lt;&lt; <span class="number">1</span>].lazy = tr[node &lt;&lt; <span class="number">1</span>].num = tr[node].lazy;</span><br><span class="line">    tr[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>].lazy = tr[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>].num = tr[node].lazy;</span><br><span class="line">    tr[node].lazy = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[node].num = <span class="number">-1</span>;</span><br><span class="line">    tr[node].lazy = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r , <span class="type">int</span> ql, <span class="type">int</span> qr,<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql &gt; r || qr &lt; l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql &lt;= l &amp;&amp; qr &gt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[node].num = value;</span><br><span class="line">        tr[node].lazy = value;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(node, l, r);</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, value);</span><br><span class="line">    <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>,mid + <span class="number">1</span>, r, ql, qr, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r &amp;&amp; l == pos)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">return</span> tr[node].num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(node, l, r);</span><br><span class="line">    <span class="type">int</span>  mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid) <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>, l, mid, pos);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T,n,l,r,caser = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="built_in">sizeof</span>(head));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">            <span class="built_in">add</span>(r,l);</span><br><span class="line">            vis[l] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m,pos,value;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Case #&quot;</span> &lt;&lt; caser++ &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            string s;</span><br><span class="line">            cin &gt;&gt; s;</span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;pos);</span><br><span class="line">                cout &lt;&lt; <span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,tot, start[pos]) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;pos,&amp;value);</span><br><span class="line">                <span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,tot,start[pos], ed[pos], value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>DFS序</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 4417 , 山东省赛Boring counting  主席树</title>
    <url>/2019/08/01/HDU-4417%20,%E5%B1%B1%E4%B8%9C%E7%9C%81%E8%B5%9BBoring%20counting%20%E4%B8%BB%E5%B8%AD%E6%A0%91/</url>
    <content><![CDATA[<span id="more"></span>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4417">题目链接</a></p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求的是某一段区间内小于等于K的数字的个数。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们可以一开始输入的时候就把a[]和要询问的K存到一个b[]里，再求出a[]在b[]中的位置，建立n棵线段树，最后要求小于等于K的个数，实际上就是求第R棵线段树- 第L - 1棵线段树的那个线段树中区间端点的范围在1-K的总和。觉得这种方法很妙，大部分的题解都是用了二分。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> ls, rs, sum;</span><br><span class="line">&#125;tree[<span class="number">2500050</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tot, a[maxn], b[<span class="number">2</span> * maxn], rt[maxn] , h[maxn],l[maxn],r[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;o , <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    o = ++tot;</span><br><span class="line">    tree[o].sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(tree[o].ls, l ,mid);</span><br><span class="line">    <span class="built_in">build</span>(tree[o].rs, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> &amp;o, <span class="type">int</span> last, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    o = ++tot;</span><br><span class="line">    tree[o].ls = tree[last].ls;</span><br><span class="line">    tree[o].rs = tree[last].rs;</span><br><span class="line">    tree[o].sum = tree[last].sum + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid) <span class="built_in">update</span>(tree[o].ls, tree[last].ls, l, mid, pos);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(tree[o].rs, tree[last].rs, mid + <span class="number">1</span>, r, pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Sum;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> last, <span class="type">int</span> l ,<span class="type">int</span> r, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt; r || right &lt; l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(left &lt;= l &amp;&amp; r &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        Sum += tree[o].sum - tree[last].sum;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">query</span>(tree[o].ls, tree[last].ls, l, mid, left, right);</span><br><span class="line">    <span class="built_in">query</span>(tree[o].rs, tree[last].rs, mid + <span class="number">1</span>, r, left, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T,caser = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(tree, <span class="number">0</span>, <span class="built_in">sizeof</span>(tree));</span><br><span class="line">        <span class="type">int</span> n,Q;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;Q);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;l[i],&amp;r[i],&amp;h[i]);</span><br><span class="line">            b[n + i] = h[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + Q + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> N = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + n + Q + <span class="number">1</span>) - (b + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">build</span>(rt[<span class="number">0</span>], <span class="number">1</span>, N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + N + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">update</span>(rt[i], rt[i - <span class="number">1</span>], <span class="number">1</span>, N, a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; caser++ &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            Sum = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> v = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + N + <span class="number">1</span>, h[i]) - b;</span><br><span class="line">            <span class="built_in">query</span>(rt[r[i] + <span class="number">1</span>], rt[l[i]], <span class="number">1</span>, N, <span class="number">1</span>, v);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="山东省第四届省赛"><a href="#山东省第四届省赛" class="headerlink" title="山东省第四届省赛"></a>山东省第四届省赛</h2><p><a href="https://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Index/problemdetail/pid/2610.html">Boring counting</a></p>
<p>和上面的几乎一样了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">50005</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">     <span class="type">int</span> ls, rs, sum;</span><br><span class="line">&#125;tree[maxn * <span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> a[maxn], b[<span class="number">3</span> * maxn], rt[maxn],l[maxn], r[maxn] , k1[maxn], k2[maxn];</span><br><span class="line"><span class="type">int</span> tot, Sum;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;o, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    o = ++tot;</span><br><span class="line">    tree[o].sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(tree[o].ls, l , mid);</span><br><span class="line">    <span class="built_in">build</span>(tree[o].rs, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> &amp;o, <span class="type">int</span> last, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    o = ++tot;</span><br><span class="line">    tree[o].ls = tree[last].ls;</span><br><span class="line">    tree[o].rs = tree[last].rs;</span><br><span class="line">    tree[o].sum = tree[last].sum + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid)  <span class="built_in">update</span>(tree[o].ls, tree[last].ls, l, mid, pos);</span><br><span class="line">    <span class="keyword">else</span>  <span class="built_in">update</span>(tree[o].rs, tree[last].rs, mid + <span class="number">1</span>, r, pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> last, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt; r || right &lt; l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(left &lt;= l &amp;&amp; right &gt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        Sum += tree[o].sum  - tree[last].sum;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">query</span>(tree[o].ls, tree[last].ls, l, mid, left, right);</span><br><span class="line">    <span class="built_in">query</span>(tree[o].rs, tree[last].rs, mid + <span class="number">1</span>, r, left, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T,n,Q, caser = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;Q);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> tot1 = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>,&amp;l[i],&amp;r[i],&amp;k1[i],&amp;k2[i]);</span><br><span class="line">            b[++tot1] = k1[i] - <span class="number">1</span>;</span><br><span class="line">            b[++tot1] = k2[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(b + <span class="number">1</span>, b + tot1 + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> N = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + tot1 + <span class="number">1</span>) - (b + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">build</span>(rt[<span class="number">0</span>], <span class="number">1</span>, N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + N + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">            <span class="built_in">update</span>(rt[i], rt[i - <span class="number">1</span>], <span class="number">1</span>, N, a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case #%d:\n&quot;</span>,caser++);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            Sum = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> v = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + N + <span class="number">1</span>,k1[i] - <span class="number">1</span>) - b;</span><br><span class="line">            <span class="built_in">query</span>(rt[r[i]], rt[l[i] - <span class="number">1</span>], <span class="number">1</span>, N, <span class="number">1</span>, v);</span><br><span class="line">            <span class="type">int</span> num1 = Sum;</span><br><span class="line">            v = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + N + <span class="number">1</span>, k2[i]) - b;</span><br><span class="line">            Sum = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">query</span>(rt[r[i]], rt[l[i] - <span class="number">1</span>], <span class="number">1</span>, N, <span class="number">1</span>, v);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Sum - num1);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 5875 单调栈</title>
    <url>/2019/09/26/HDU-5875-%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    <content><![CDATA[<p>单调栈求第一个小于某个数的位置。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题目需要求的是 a[l] % a[l + 1]… % a[r],  我们需要知道的是每次取模，如果a &lt; b,那么取模没用，如果a &gt; b，那么取模减小的数字至少是a的一半(我不知道啊。。。)，那么这样的话，每次询问，最多取模的次数是Log(n),  问题就是我们需要预处理出小于当前数字的第一个数字的位置。这就用到了单调栈了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="type">int</span> nxt[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T,n;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        <span class="built_in">memset</span>(nxt, <span class="number">-1</span>, <span class="built_in">sizeof</span>(nxt));</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt;S;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!S.<span class="built_in">empty</span>() &amp;&amp; a[i] &lt; a[S.<span class="built_in">top</span>()])</span><br><span class="line">            &#123;</span><br><span class="line">                nxt[S.<span class="built_in">top</span>()] = i;</span><br><span class="line">                S.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            S.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> Q,l,r;</span><br><span class="line">        cin &gt;&gt; Q;</span><br><span class="line">        <span class="keyword">while</span>(Q--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">            <span class="type">int</span> num = a[l];</span><br><span class="line">            <span class="keyword">while</span>(nxt[l] != <span class="number">-1</span> &amp;&amp; nxt[l] &lt;= r)</span><br><span class="line">            &#123;</span><br><span class="line">                num = num % a[nxt[l]];</span><br><span class="line">                l = nxt[l];</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; num &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 4341 分组背包</title>
    <url>/2019/11/20/HDU-4341-%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85/</url>
    <content><![CDATA[<p>分组背包，解决每一组物品只能选择一组的问题。</p>
<span id="more"></span>

<p><a href="https://vjudge.net/problem/HDU-4341">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>黄金矿工游戏，应该都玩过把，给你每个矿石的坐标，以及获取他的所需的时间以及你可以得到的价值，问你可以在规定时间内可以获得的最大价值。有个问题是，如果这两个矿石位于同一条直线上，必须是先把较近的矿石获取完毕才能获取后面的矿石。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们可以把位于同一条直线上的矿石合并，让较远的矿石的时间所需再加上等于他前面的矿石的时间之和，价值也是如此。那么这样的话，我们可以把位于同一条直线上的矿石看成一个组，我们每次只能在每个组中选取一种情况。这样就转换成了分组背包。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">   <span class="type">int</span> x, y, t, v;</span><br><span class="line">   <span class="type">double</span> k;</span><br><span class="line">&#125;P[<span class="number">10005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Point a, Point b)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(a.k != b.k)</span><br><span class="line">    <span class="keyword">return</span> a.k &lt; b.k;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(a.x != b.x)</span><br><span class="line">        <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[<span class="number">50005</span>];</span><br><span class="line"><span class="type">int</span> vis[<span class="number">50005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="type">int</span> N, T ,caser = <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">while</span>(cin &gt;&gt;  N &gt;&gt; T)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;P[i].x,&amp;P[i].y, &amp;P[i].t, &amp;P[i].v);</span><br><span class="line">        P[i].k = (P[i].y * <span class="number">1.0</span>)/ P[i].x;</span><br><span class="line">     &#125;</span><br><span class="line">     vector&lt;<span class="type">int</span>&gt;a[<span class="number">505</span>], b[<span class="number">505</span>];</span><br><span class="line">     <span class="built_in">sort</span>(P + <span class="number">1</span>, P + N + <span class="number">1</span>,cmp);</span><br><span class="line">     <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">     <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="type">int</span> sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>;</span><br><span class="line">         sum1 += P[i].t;</span><br><span class="line">         sum2 += P[i].v;</span><br><span class="line">         <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">         a[++tot].<span class="built_in">push_back</span>(sum1);</span><br><span class="line">         b[tot].<span class="built_in">push_back</span>(sum2);</span><br><span class="line">         vis[i] = <span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= N; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(P[j].k != P[i].k)<span class="keyword">break</span>;</span><br><span class="line">            <span class="type">int</span> t = P[j].t;</span><br><span class="line">            <span class="type">int</span> v = P[j].v;</span><br><span class="line">            P[j].t += sum1;</span><br><span class="line">            P[j].v += sum2;</span><br><span class="line">            sum1 += t;</span><br><span class="line">            sum2 += v;</span><br><span class="line">            <span class="keyword">if</span>(!vis[j])&#123;</span><br><span class="line">            vis[j] = <span class="number">1</span>;</span><br><span class="line">            a[tot].<span class="built_in">push_back</span>(P[j].t);</span><br><span class="line">            b[tot].<span class="built_in">push_back</span>(P[j].v);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = T; j &gt;= <span class="number">0</span>; --j)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; a[i].<span class="built_in">size</span>(); ++k)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= a[i][k])</span><br><span class="line">                f[j] = <span class="built_in">max</span>(f[j], f[j- a[i][k]] + b[i][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     cout &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; caser++ &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line">     cout &lt;&lt; f[T] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>分组背包</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 6609 权值线段树</title>
    <url>/2019/08/26/HDU-6609-%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    <content><![CDATA[<p>比赛开始直接优先队列乱搞，TLE。。</p>
<span id="more"></span>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6609">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>问你最小需要删多少个数字才能使得从第一个数到第i个数字的和&lt;&#x3D; m，第i个数字不能删。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们自然想到删除尽量大的数字，但是如果我们当前访问到第i个数字时，总是对前i - 1个数字进行排序肯定会超时。我们可以建立一棵从第一个数字到当前数字的权值线段树，每个节点记录当前区间内数字和以及个数。这样我们就可以根据权值线段树进行查找，利用权值线段树的原因是权值线段树本身也是一棵有序的树，查找是可以二分的。这样就达到了查询O(logn)复杂度。本身权值线段树我是一直用主席树写的，但是这个题目会MLE，再者，这个题目每次都是查询前i个数，因此建一颗线段树即可，查询完毕再更新下一个数字。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   ll num, sum;</span><br><span class="line">&#125;tr[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a[maxn],b[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[node].num = <span class="number">0</span>, tr[node].sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r &amp;&amp; l == pos)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[node].num++;</span><br><span class="line">        tr[node].sum += b[pos];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid) <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>, l, mid, pos);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, pos);</span><br><span class="line">    tr[node].sum = tr[node &lt;&lt; <span class="number">1</span>].sum + tr[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">    tr[node].num = tr[node &lt;&lt; <span class="number">1</span>].num + tr[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>].num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[node].sum &gt; value) <span class="keyword">return</span> value / b[l];</span><br><span class="line">        <span class="keyword">return</span> tr[node].num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r ) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(tr[node &lt;&lt; <span class="number">1</span>].sum &lt;= value)&#123;</span><br><span class="line">        <span class="keyword">return</span> tr[node &lt;&lt; <span class="number">1</span>].num + <span class="built_in">query</span>(node &lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, value - tr[node &lt;&lt; <span class="number">1</span>].sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>, l, mid, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getid</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>,b + tot + <span class="number">1</span>, x) - b;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T,n,m;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">        tot = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - b - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,tot);</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,tot,<span class="built_in">getid</span>(a[<span class="number">1</span>]));</span><br><span class="line">        cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> Num = <span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,tot,m - a[i]);</span><br><span class="line">            cout &lt;&lt;  i - <span class="number">1</span> - Num &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            <span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,tot,<span class="built_in">getid</span>(a[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>权值线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 5969 bitset + 思维</title>
    <url>/2019/09/26/HDU-5969-bitset-%E6%80%9D%E7%BB%B4/</url>
    <content><![CDATA[<p>思维，不太好想感觉。</p>
<span id="more"></span>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5969">链接</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们先将两个边界设置为bitset类型，然后从高位开始枚举，如果两个数的二进制数在这一位相等，那么肯定这一位也只能选这个数字了，如果不相等，肯定是L边界这一位为0， R边界这一位为1，那么这样的话这一位就是1了，剩下的也都是1了，因为我们可以选择的数字是这一位为0，后边全为1.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> l, r;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="function">bitset&lt;64&gt; <span class="title">b</span><span class="params">(l)</span></span>;</span><br><span class="line">        <span class="function">bitset&lt;64&gt; <span class="title">c</span><span class="params">(r)</span></span>;</span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">63</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(b[i] == <span class="number">0</span> &amp;&amp; c[i] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += (ll)<span class="built_in">pow</span>(<span class="number">2</span>, i + <span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(b[i] == <span class="number">1</span>)</span><br><span class="line">                sum += (ll)<span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>思维</tag>
        <tag>bitset</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 6621  主席树 + 二分</title>
    <url>/2019/08/07/HDU-6621-%E4%B8%BB%E5%B8%AD%E6%A0%91-%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<p>啥，又是主席树？连续三场比赛都有主席树，然后都不会。。</p>
<span id="more"></span>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6621">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你一个序列， 告诉你L,R,P,K，让你求在L，R这段区间内，P与区间内数字的距离的第K小值</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>求第K小，自然是主席树，但是这里并不单纯是求原序列的第K小，而是距离的第K小，然后我就母鸡了。其实有时候我们求第K小值还可以用二分，枚举上下界，第K小值满足的条件是有至少K个数字小于等于这个数。然后就二分就OK了。那么在这里，我们枚举距离值，那么我们就看看在这段区间内是有多少个数字是 在P - 距离 到 P + 距离的，如果大于K，就要缩小这个距离，我们要求的是那个最小的区间内数字个数等于K的那个数字。主席树在这里的应用就是给你一段区间，让你求这段区间内大于A小于B的数字的个数。这道题我以前用的是离散化，查询时按照地址查询，这里就用按值查询，很简便。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="type">int</span> a[maxn ], b[maxn],rt[maxn];</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> l, r, sum;</span><br><span class="line">&#125;tree[maxn * <span class="number">50</span>];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;o, <span class="type">int</span> l, <span class="type">int</span> r )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    o = ++tot;</span><br><span class="line">    tree[o].sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l ==  r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(tree[o].l , l, mid);</span><br><span class="line">    <span class="built_in">build</span>(tree[o].r, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> &amp;o, <span class="type">int</span> last, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    o =++tot;</span><br><span class="line">    tree[o].l = tree[last].l;</span><br><span class="line">    tree[o].r = tree[last].r;</span><br><span class="line">    tree[o].sum = tree[last].sum + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid) <span class="built_in">update</span>(tree[o].l, tree[last].l, l, mid, pos);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(tree[o].r , tree[last].r, mid + <span class="number">1</span>, r, pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sum ;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> last, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt; b[r] || right &lt; b[l]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(left &lt;= b[l] &amp;&amp; right &gt;= b[r])</span><br><span class="line">    &#123;</span><br><span class="line">        sum += tree[o].sum - tree[last].sum;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">query</span>(tree[o].l, tree[last].l, l, mid, left, right);</span><br><span class="line">    <span class="built_in">query</span>(tree[o].r, tree[last].r, mid <span class="number">+1</span>, r, left, right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T,n,Q,L,R,K,P;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;Q);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> N = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - b - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(rt[<span class="number">0</span>],<span class="number">1</span> ,N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + N + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">            <span class="built_in">update</span>(rt[i], rt[i - <span class="number">1</span>], <span class="number">1</span>, N, a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(Q--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>,&amp;L,&amp;R,&amp;P,&amp;K);</span><br><span class="line">            L ^= res, R ^= res, K ^= res, P ^= res;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">1000005</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt;= r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">query</span>(rt[R], rt[L - <span class="number">1</span>], <span class="number">1</span>, N, P - mid, P + mid);</span><br><span class="line">                <span class="keyword">if</span>(sum &gt;= K)&#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; l &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            res = l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 6625 字典树 + 贪心</title>
    <url>/2019/08/14/HDU-6625-%E5%AD%97%E5%85%B8%E6%A0%91-%E8%B4%AA%E5%BF%83/</url>
    <content><![CDATA[<p>还可以字典树？？</p>
<span id="more"></span>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6625">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你两个序列，第三个序列是由已知的两个序列对应位置异或而成，现在让你重新安排两个序列的位置，使得异或之后的第三个序列字典序最小。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>字典树真是万万没想到，我们把每个数字拆成二进制的形式建字典树，这样对两个序列能够建立两棵树，然后运用贪心思想，能够0,0或者1,1异或就先它们异或，这样进行下去，最后还要记得排序，因为每一步形成的数字不一定是当前步的最优解。同时注意这题初始化不要全初始化，用到某个节点，我们再对某个节点初始化，否则会T</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> tot,n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line">   <span class="type">int</span> tree[maxn * <span class="number">30</span>][<span class="number">3</span>], sum[maxn * <span class="number">30</span>];</span><br><span class="line">   <span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       tot++;</span><br><span class="line">       <span class="built_in">memset</span>(tree[tot], <span class="number">0</span>, <span class="built_in">sizeof</span>(tree[tot]));</span><br><span class="line">       <span class="keyword">return</span> tot;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="type">int</span> x = (<span class="number">1</span> &lt;&lt; i) &amp; num;</span><br><span class="line">           <span class="keyword">if</span>(x &gt; <span class="number">0</span>) x = <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">else</span>  x = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">if</span>(!tree[p][x])</span><br><span class="line">            tree[p][x] = <span class="built_in">newnode</span>();</span><br><span class="line">           sum[tree[p][x]]++;</span><br><span class="line">           p = tree[p][x];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;a1, a2;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a<span class="number">1.</span>tree[<span class="number">0</span>], <span class="number">0</span>, <span class="built_in">sizeof</span>(a<span class="number">1.</span>tree[<span class="number">0</span>]));</span><br><span class="line">    <span class="built_in">memset</span>(a<span class="number">2.</span>tree[<span class="number">0</span>], <span class="number">0</span>, <span class="built_in">sizeof</span>(a<span class="number">2.</span>tree[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ant ;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> p1 = <span class="number">0</span>, p2 = <span class="number">0</span>, x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a<span class="number">1.</span>sum[a<span class="number">1.</span>tree[p1][<span class="number">0</span>]] &amp;&amp; a<span class="number">2.</span>sum[a<span class="number">2.</span>tree[p2][<span class="number">0</span>]])</span><br><span class="line">            &#123;</span><br><span class="line">                a<span class="number">1.</span>sum[a<span class="number">1.</span>tree[p1][<span class="number">0</span>]]--;</span><br><span class="line">                a<span class="number">2.</span>sum[a<span class="number">2.</span>tree[p2][<span class="number">0</span>]]--;</span><br><span class="line">                p1 = a<span class="number">1.</span>tree[p1][<span class="number">0</span>];</span><br><span class="line">                p2 = a<span class="number">2.</span>tree[p2][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a<span class="number">1.</span>sum[a<span class="number">1.</span>tree[p1][<span class="number">1</span>]] &amp;&amp; a<span class="number">2.</span>sum[a<span class="number">2.</span>tree[p2][<span class="number">1</span>]])</span><br><span class="line">            &#123;</span><br><span class="line">                a<span class="number">1.</span>sum[a<span class="number">1.</span>tree[p1][<span class="number">1</span>]]--;</span><br><span class="line">                a<span class="number">2.</span>sum[a<span class="number">2.</span>tree[p2][<span class="number">1</span>]]--;</span><br><span class="line">                p1 = a<span class="number">1.</span>tree[p1][<span class="number">1</span>];</span><br><span class="line">                p2 = a<span class="number">2.</span>tree[p2][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a<span class="number">1.</span>sum[a<span class="number">1.</span>tree[p1][<span class="number">0</span>]] &amp;&amp; a<span class="number">2.</span>sum[a<span class="number">2.</span>tree[p2][<span class="number">1</span>]])</span><br><span class="line">            &#123;</span><br><span class="line">                a<span class="number">1.</span>sum[a<span class="number">1.</span>tree[p1][<span class="number">0</span>]]--;</span><br><span class="line">                a<span class="number">2.</span>sum[a<span class="number">2.</span>tree[p2][<span class="number">1</span>]]--;</span><br><span class="line">                p1 = a<span class="number">1.</span>tree[p1][<span class="number">0</span>];</span><br><span class="line">                p2 = a<span class="number">2.</span>tree[p2][<span class="number">1</span>];</span><br><span class="line">                x ^= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a<span class="number">1.</span>sum[a<span class="number">1.</span>tree[p1][<span class="number">1</span>]] &amp;&amp; a<span class="number">2.</span>sum[a<span class="number">2.</span>tree[p2][<span class="number">0</span>]])</span><br><span class="line">            &#123;</span><br><span class="line">                a<span class="number">1.</span>sum[a<span class="number">1.</span>tree[p1][<span class="number">1</span>]]--;</span><br><span class="line">                a<span class="number">2.</span>sum[a<span class="number">2.</span>tree[p2][<span class="number">0</span>]]--;</span><br><span class="line">                p1 = a<span class="number">1.</span>tree[p1][<span class="number">1</span>];</span><br><span class="line">                p2 = a<span class="number">2.</span>tree[p2][<span class="number">0</span>];</span><br><span class="line">                x ^= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[++ant] = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        tot = <span class="number">0</span>, ant = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x;  i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">            a<span class="number">1.</span><span class="built_in">insert</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">            a<span class="number">2.</span><span class="built_in">insert</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">        <span class="built_in">sort</span>(ans + <span class="number">1</span>, ans + ant + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ant; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,ans[i], i == ant ? <span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>字典树</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 6638 最大子矩阵 线段树</title>
    <url>/2019/08/19/HDU-6638-%E6%9C%80%E5%A4%A7%E5%AD%90%E7%9F%A9%E9%98%B5-%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    <content><![CDATA[<p>最大子矩阵的O(N^2logN)做法</p>
<span id="more"></span>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6638">题目链接</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>枚举y坐标的上界和下界，将x坐标离散化后在对应位置更新，直到将矩阵压缩成一维序列进行更新。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">   ll sum , sum_max, pre_max, post_max;</span><br><span class="line">&#125;tr[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x, y,value;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="type">int</span> x[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.y == b.y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ls = node &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> rs = node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">    tr[node].sum = tr[ls].sum + tr[rs].sum;</span><br><span class="line">    tr[node].sum_max = <span class="built_in">max</span>(<span class="built_in">max</span>(tr[ls].sum_max,tr[rs].sum_max),tr[ls].post_max + tr[rs].pre_max);</span><br><span class="line">    tr[node].post_max = <span class="built_in">max</span>(tr[rs].post_max, tr[ls].post_max + tr[rs].sum);</span><br><span class="line">    tr[node].pre_max = <span class="built_in">max</span>(tr[ls].pre_max,tr[ls].sum + tr[rs].pre_max );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> node , <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos , <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r &amp;&amp; l == pos)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[node].post_max += k;</span><br><span class="line">        tr[node].pre_max += k;</span><br><span class="line">        tr[node].sum += k;</span><br><span class="line">        tr[node].sum_max += k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r ) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid) <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>, l, mid, pos, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, pos, k);</span><br><span class="line">    <span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;a[i].x,&amp;a[i].y , &amp;a[i].value);</span><br><span class="line">            x[++tot] = a[i].x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</span><br><span class="line">        <span class="built_in">sort</span>(x + <span class="number">1</span>, x + tot + <span class="number">1</span>);</span><br><span class="line">        ll Max = <span class="number">-1</span>;</span><br><span class="line">        tot = <span class="built_in">unique</span>(x + <span class="number">1</span>, x + tot + <span class="number">1</span>) - x - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">1</span> &amp;&amp; a[i].y == a[i - <span class="number">1</span>].y)  <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">memset</span>(tr, <span class="number">0</span>, <span class="built_in">sizeof</span>(tr));</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i ; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> pos = <span class="built_in">lower_bound</span>(x + <span class="number">1</span>, x + tot + <span class="number">1</span>, a[j].x) - x ;</span><br><span class="line">                <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, tot, pos, a[j].value);</span><br><span class="line">                <span class="keyword">if</span>(j == n || (a[j].y != a[j + <span class="number">1</span>].y))</span><br><span class="line">                &#123;</span><br><span class="line">                    Max = <span class="built_in">max</span>(tr[<span class="number">1</span>].sum_max, Max);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; Max &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 6703 权值线段树 + 思维</title>
    <url>/2019/08/26/HDU-6703-%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91-%E6%80%9D%E7%BB%B4/</url>
    <content><![CDATA[<span id="more"></span>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6703">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你一个序列 ，(2,r,k)代表查询从第1个数到第r个数中&gt;&#x3D; k且在这个序列中不存的数字。(1,pos)代表修改a[pos]。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这个题强制在线，比赛时想用带修改莫队，发现在线后放弃了。其实这个题是查询某一段序列中大于某个数字的一个算法，我们就想应该联想到权值线段树，但是每个节点存的是这段区间中的最大下标，这样题目就转换成为了求下标大于r且这个值&gt;&#x3D; k的最小权值。初始化我们应该把每个区间的下标都最大化(比如说一开始就询问整段区间的情况)。修改操作的话我们就把那段区间的存的最大下标最大化，就代表这个区间本身的值已经不在这段区间内了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll ;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> sum;</span><br><span class="line">&#125;tr[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[node].sum = <span class="number">100005</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos, <span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r &amp;&amp; l == pos)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[node].sum = value;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r)&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid) <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>, l, mid, pos , value);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, pos, value);</span><br><span class="line">    tr[node].sum = <span class="built_in">max</span>(tr[node &lt;&lt; <span class="number">1</span>].sum, tr[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>].sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos, <span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ans != <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[node].sum &gt; value)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid &gt;= pos &amp;&amp; tr[node &lt;&lt; <span class="number">1</span>].sum &gt; value) <span class="built_in">query</span>(node &lt;&lt;<span class="number">1</span>, l, mid, pos, value);</span><br><span class="line">    <span class="keyword">if</span>(tr[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>].sum &gt; value) <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, pos, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T,n,q,A,b,c;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;q);</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">100001</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">            <span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">100001</span>,a[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> lastans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(q--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;A,&amp;b);</span><br><span class="line">            <span class="keyword">if</span>(A == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                b ^= lastans;</span><br><span class="line">                <span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">100001</span>, a[b],<span class="number">100005</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;c);</span><br><span class="line">                b ^= lastans;</span><br><span class="line">                c ^= lastans;</span><br><span class="line">                ans = <span class="number">-1</span>;</span><br><span class="line">                <span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">100001</span>,c,b);</span><br><span class="line">                cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                lastans = ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>思维</tag>
        <tag>权值线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>变形课</title>
    <url>/2019/04/29/HDU-%E5%8F%98%E5%BD%A2%E8%AF%BE/</url>
    <content><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1181">题目链接</a></p>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>让你连起来字符串，看看最终的字符串能否是第一个字母为b,最后一个字符是m.</p>
<span id="more"></span>

<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>先把以b开头的字符串放进队列，然后查看每个字符串的最后一个字母，在遍历一遍字符串看看有没有开头是这个字母的，在放进队列，队列完毕后，就会出来 答案。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> vis[<span class="number">1001</span>];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line">string s[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;i &lt; tot; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i][<span class="number">0</span>] == <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Q.<span class="built_in">push</span>(i);</span><br><span class="line">            vis[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> A = Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> sz = s[A].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">char</span> c = s[A][sz - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i][<span class="number">0</span>] == c &amp;&amp; !vis[i])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[i] = <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s[<span class="number">0</span>])&#123;</span><br><span class="line">        tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s[tot])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[tot][<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="type">int</span> c = <span class="built_in">bfs</span>();</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="number">1</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Yes.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>How many 9s</title>
    <url>/2019/05/09/How-many-9s/</url>
    <content><![CDATA[<p><a href="https://vjudge.net/contest/294616#problem/C">How many 9s</a></p>
<p>看了很多题解，都是预处理的，尽管想想不预处理，其实算起来也挺快，但是数据很多，你必须保证O（1）就可以算出来<span id="more"></span>，我的程序里每一次都是要循环比较多的，所以超时也就不难理解了。预处理出所有的日期，最后直接相减即可。这个模拟借鉴网上的代码，感觉写的挺漂亮。</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> mon[<span class="number">13</span>] = &#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">leap</span><span class="params">(<span class="type">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((year % <span class="number">400</span> == <span class="number">0</span>) || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(num)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += (num % <span class="number">10</span> == <span class="number">9</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        num /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">num</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> m,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    sum += <span class="built_in">check</span>(y) + <span class="built_in">check</span>(m) + <span class="built_in">check</span>(d);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum[<span class="number">10005</span>][<span class="number">15</span>][<span class="number">32</span>], pre[<span class="number">10005</span>][<span class="number">15</span>][<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calculate</span><span class="params">(<span class="type">int</span> y1,<span class="type">int</span> m1,<span class="type">int</span> d1,<span class="type">int</span> y2,<span class="type">int</span> m2,<span class="type">int</span> d2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tem = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(y1 != y2 || m1 != m2 || d1 != d2)</span><br><span class="line">    &#123;</span><br><span class="line">        mon[<span class="number">2</span>] = <span class="built_in">leap</span>(y1) + <span class="number">28</span>;</span><br><span class="line">        pre[y1][m1][d1] = tem;</span><br><span class="line">        tem +=  <span class="built_in">num</span>(y1,m1,d1);</span><br><span class="line">        sum[y1][m1][d1] = tem;</span><br><span class="line">        <span class="keyword">if</span>( ++d1 &gt; mon[m1])</span><br><span class="line">        &#123;</span><br><span class="line">            d1 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(++ m1 &gt; <span class="number">12</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    m1 = <span class="number">1</span>;</span><br><span class="line">                    y1++;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">calculate</span>(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">10000</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> t,y1,m1,d1,y2,m2,d2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d %d %d&quot;</span>,&amp;y1,&amp;m1,&amp;d1,&amp;y2,&amp;m2,&amp;d2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum[y2][m2][d2] - pre[y1][m1][d1]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA 知识记录</title>
    <url>/2019/04/30/JAVA-%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>再次复习一下JAVA知识 ，同时记录一下</p>
<span id="more"></span>

<h5 id="JAVA中创建除主函数之外的函数-在原先的class-或者-另外创建class-都可行"><a href="#JAVA中创建除主函数之外的函数-在原先的class-或者-另外创建class-都可行" class="headerlink" title="JAVA中创建除主函数之外的函数 (在原先的class 或者 另外创建class 都可行)"></a>JAVA中创建除主函数之外的函数 (在原先的class 或者 另外创建class 都可行)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ddd;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">cin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">		<span class="type">int</span> a,b;</span><br><span class="line">		a = cin.nextInt();</span><br><span class="line">		b = cin.nextInt();</span><br><span class="line">		System.out.println(calculate.add(a, b));</span><br><span class="line">		System.out.println(calculate.sub(a, b));</span><br><span class="line">		System.out.println(mul(a,b));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> a * b;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">calculate</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> a + b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> a - b;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="求出一个数除以另一个数的商以及余数。"><a href="#求出一个数除以另一个数的商以及余数。" class="headerlink" title="求出一个数除以另一个数的商以及余数。"></a>求出一个数除以另一个数的商以及余数。</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">cin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">	    BigInteger a,b;</span><br><span class="line">	    a = cin.nextBigInteger();</span><br><span class="line">	    b = cin.nextBigInteger();</span><br><span class="line">	    BigInteger result[] = a.divideAndRemainder(b);</span><br><span class="line">	    System.out.println(result[<span class="number">0</span>]);</span><br><span class="line">	    System.out.println(result[<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="对字符串的修改。-String-本身是不可以修改的，但是可以通过转换为字符数组进行修改"><a href="#对字符串的修改。-String-本身是不可以修改的，但是可以通过转换为字符数组进行修改" class="headerlink" title="对字符串的修改。 String 本身是不可以修改的，但是可以通过转换为字符数组进行修改"></a>对字符串的修改。 String 本身是不可以修改的，但是可以通过转换为字符数组进行修改</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">cin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">	    <span class="type">int</span> i;</span><br><span class="line">	    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">	    System.out.println(s.charAt(<span class="number">0</span>));</span><br><span class="line">	    <span class="type">char</span> [] ch;</span><br><span class="line">	    ch = s.toCharArray();</span><br><span class="line">	    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ch.length; ++i)</span><br><span class="line">	    &#123;</span><br><span class="line">	    	ch[i] += <span class="number">1</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	    System.out.println(ch);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="将int型强制转化为BigInteger类型-以及-compareTo-函数的使用"><a href="#将int型强制转化为BigInteger类型-以及-compareTo-函数的使用" class="headerlink" title="将int型强制转化为BigInteger类型 以及 .compareTo 函数的使用"></a>将int型强制转化为BigInteger类型 以及 .compareTo 函数的使用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">cin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">	    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">	    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">	    BigInteger c ,d;</span><br><span class="line">	    c = BigInteger.valueOf(a);</span><br><span class="line">	    d = BigInteger.valueOf(b);</span><br><span class="line">	    <span class="keyword">if</span>(c.compareTo(d) == <span class="number">0</span>)</span><br><span class="line">	    	System.out.println(<span class="number">1111</span>);</span><br><span class="line">	    <span class="keyword">else</span></span><br><span class="line">	    	System.out.println(<span class="number">2222</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="JAVA-中的进制转换"><a href="#JAVA-中的进制转换" class="headerlink" title="JAVA 中的进制转换"></a>JAVA 中的进制转换</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//String st = Integer.toString(num, base);</span></span><br><span class="line"><span class="comment">//把num 当做10进制的数转成base进制的(base &lt;= 35)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">cin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">		<span class="type">int</span> num,base;</span><br><span class="line">		num = cin.nextInt();</span><br><span class="line">		base = cin.nextInt();</span><br><span class="line">	    <span class="type">String</span> <span class="variable">st</span> <span class="operator">=</span> Integer.toString(num,base);</span><br><span class="line">	    System.out.println(st);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// int num = Integer.parseInt(st, base); </span></span><br><span class="line"><span class="comment">// 把 st 当做base进制 转成10进制的Int  与上面正好相反。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">cin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">		<span class="type">int</span> num,base;</span><br><span class="line">		<span class="type">String</span> <span class="variable">st</span> <span class="operator">=</span> cin.nextLine();</span><br><span class="line">		base = cin.nextInt();</span><br><span class="line">		num = Integer.parseInt(st, base);</span><br><span class="line">		System.out.println(num);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以某个进制读入，然后以某个进制输出。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">cin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">		BigInteger a;</span><br><span class="line">		a = cin.nextBigInteger(<span class="number">2</span>);</span><br><span class="line">		String b;</span><br><span class="line">		b = a.toString(<span class="number">10</span>);</span><br><span class="line">	    System.out.println(b);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Keen On Everything But Triangle 主席树 + 斐波那契</title>
    <url>/2019/07/31/Keen-On-Everything-But-Triangle-%E4%B8%BB%E5%B8%AD%E6%A0%91-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91/</url>
    <content><![CDATA[<p>比赛的时候想到用线段树存取每个区间前50大的数字，但是根本不知道怎么存，后来才知道用主席树，不用存，直接遍历50次查找前50大的就行！！ 白学了主席树了。。。</p>
<span id="more"></span>

<p><a href="https://vjudge.net/contest/315593#status//C/0/">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>求能组成三角形的最大的周长</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>主席树模板可以求静态区间第K大数字，由斐波那契数列知道，在数据范围之内，不会存在大于50长度的序列还不能选出三角形（实际40几就不行了）。那么我们在输入完毕L，R后，遍历50次可以选出L，R这段区间前50大的数字，那么再看看能不能组成就行了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 1000005;</span><br><span class="line">const int maxn = 2500005;</span><br><span class="line">int rt[N &lt;&lt; 4], ls[N &lt;&lt; 4], rs[N &lt;&lt; 4],a[N], b[N],sum[N &lt;&lt; 4];</span><br><span class="line"></span><br><span class="line">int tot;</span><br><span class="line">void build(int &amp;o, int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    o = ++tot;</span><br><span class="line">    sum[o] = 0;</span><br><span class="line">    if(l == r)</span><br><span class="line">        return;</span><br><span class="line">    int mid = (l + r) &gt;&gt; 1;</span><br><span class="line">    build(ls[o], l, mid);</span><br><span class="line">    build(rs[o], mid + 1, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void update(int &amp;o, int l, int r, int last, int k)</span><br><span class="line">&#123;</span><br><span class="line">    o = ++tot;</span><br><span class="line">    ls[o] = ls[last];</span><br><span class="line">    rs[o] = rs[last];</span><br><span class="line">    sum[o] = sum[last] + 1;</span><br><span class="line">    if(l == r)</span><br><span class="line">        return;</span><br><span class="line">    int mid = (l + r) &gt;&gt; 1;</span><br><span class="line">    if(k &lt;= mid)</span><br><span class="line">        update(ls[o], l, mid, ls[last], k);</span><br><span class="line">    else</span><br><span class="line">        update(rs[o], mid + 1, r, rs[last], k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int query(int ss, int tt, int l, int r, int k)</span><br><span class="line">&#123;</span><br><span class="line">    if(l == r)</span><br><span class="line">        return l;</span><br><span class="line">    int cnt = sum[ls[tt]] - sum[ls[ss]];</span><br><span class="line">    int mid = (l + r) &gt;&gt; 1;</span><br><span class="line">    if(k &lt;= cnt)</span><br><span class="line">        return query(ls[ss],ls[tt],l, mid, k);</span><br><span class="line">    else</span><br><span class="line">        return query(rs[ss],rs[tt],mid + 1, r, k - cnt);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t,n,Q,ll,rr,k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    while(scanf(&quot;%d %d&quot;,&amp;n,&amp;Q) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        tot = 0;</span><br><span class="line">        for(int i = 1; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        memcpy(b,a,sizeof(a));</span><br><span class="line">        sort(b + 1, b + n + 1);</span><br><span class="line">        int sz = unique(b + 1, b + n + 1) - (b + 1);</span><br><span class="line">        build(rt[0],1,sz);</span><br><span class="line">        for(int i = 1; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] = lower_bound(b + 1, b + sz + 1, a[i]) - b;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i = 1; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            update(rt[i],1,sz,rt[i - 1], a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        while(Q--)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d %d&quot;,&amp;ll,&amp;rr);</span><br><span class="line">            long long num = -1, q[55];</span><br><span class="line">            for(int i = 1; i &lt;= min(50, rr - ll + 1); ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                q[i] = b[query(rt[ll - 1], rt[rr], 1,sz, rr - ll + 2 - i)];</span><br><span class="line">                if(q[i] + q[i - 1] &gt; q[i - 2] &amp;&amp; i &gt;= 3)</span><br><span class="line">                &#123;</span><br><span class="line">                    num = q[i - 1] + q[i - 2] + q[i];</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            printf(&quot;%lld\n&quot;,num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Latex 学习笔记</title>
    <url>/2019/05/01/Latex-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Latex 学习笔记</p>
<span id="more"></span>

<h4 id="文章正文之前的语句"><a href="#文章正文之前的语句" class="headerlink" title="文章正文之前的语句"></a>文章正文之前的语句</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[UTF8]&#123;ctexart&#125;   </span><br><span class="line"><span class="keyword">\usepackage</span>[english]&#123;babel&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;amsmath&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;amssymb&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;verbatim&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;epstopdf&#125;</span><br><span class="line"><span class="keyword">\title</span>&#123;文章的标题&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;作者&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;日期应该模板本身就有&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;fancyhdr&#125;</span><br><span class="line"><span class="keyword">\pagestyle</span>&#123;fancy&#125;</span><br><span class="line"><span class="keyword">\lhead</span>&#123;&#125;</span><br><span class="line"><span class="keyword">\chead</span>&#123;<span class="keyword">\bfseries</span> hello world&#125;</span><br><span class="line"><span class="keyword">\rhead</span>&#123;&#125;</span><br><span class="line"><span class="keyword">\lfoot</span>&#123;From : hello&#125;</span><br><span class="line"><span class="keyword">\cfoot</span>&#123;&#125;</span><br><span class="line"><span class="keyword">\rfoot</span>&#123;To : hello&#125;</span><br><span class="line"><span class="keyword">\renewcommand</span>&#123;<span class="keyword">\headrulewidth</span>&#125;&#123;0.4pt&#125;</span><br></pre></td></tr></table></figure>
<h4 id="段落等等"><a href="#段落等等" class="headerlink" title="段落等等"></a>段落等等</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 文章的正文</span></span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"><span class="keyword">\section</span>&#123;ccc&#125;</span><br><span class="line"><span class="keyword">\paragraph</span>&#123;ac&#125;</span><br><span class="line"><span class="keyword">\subsection</span>&#123;aaa&#125;</span><br><span class="line"><span class="keyword">\paragraph</span>&#123;b&#125;</span><br><span class="line"><span class="keyword">\section</span>&#123;ccc&#125;</span><br><span class="line"><span class="keyword">\subsubsection</span>&#123;abcde&#125;</span><br><span class="line"><span class="keyword">\paragraph</span>&#123;cc&#125;</span><br></pre></td></tr></table></figure>
<h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">% 换行的两种写法 ，可以看看他们的格式</span><br><span class="line">% 1. 直接空一行</span><br><span class="line">% 2.加上\\</span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line">hello world\\</span><br><span class="line">hello world</span><br><span class="line">\\hello world</span><br></pre></td></tr></table></figure>
<h4 id="线性方程组"><a href="#线性方程组" class="headerlink" title="线性方程组"></a>线性方程组</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 线性方程组的写法(注意地址符控制对齐的)</span></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\left</span><span class="keyword">\&#123;</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;aligned&#125;</span><br><span class="line">   x1<span class="built_in">&amp;</span> = x2 + x3<span class="keyword">\\</span></span><br><span class="line">   x4<span class="built_in">&amp;</span> = x5 + 2</span><br><span class="line"><span class="keyword">\end</span>&#123;aligned&#125;</span><br><span class="line"><span class="keyword">\right</span><span class="keyword">\&#125;</span></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<h5 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h5><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 表格的制作</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;center&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|&#125;</span><br><span class="line">  <span class="keyword">\hline</span></span><br><span class="line">  2 <span class="built_in">&amp;</span> 7<span class="keyword">\\</span>  <span class="keyword">\hline</span></span><br><span class="line">  3 <span class="built_in">&amp;</span> 7<span class="keyword">\\</span></span><br><span class="line">  <span class="keyword">\hline</span></span><br><span class="line">  <span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;center&#125;</span><br></pre></td></tr></table></figure>
<h5 id="矩阵的写法"><a href="#矩阵的写法" class="headerlink" title="矩阵的写法"></a>矩阵的写法</h5><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 矩阵的写法</span></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\left</span><span class="keyword">\&#123;</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;ccc&#125;</span><br><span class="line">  2 <span class="built_in">&amp;</span> 7<span class="keyword">\\</span></span><br><span class="line">  3 <span class="built_in">&amp;</span> 8</span><br><span class="line">  <span class="keyword">\end</span>&#123;array&#125;</span><br><span class="line">  <span class="keyword">\right</span><span class="keyword">\&#125;</span></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<h5 id="常用的数学公式"><a href="#常用的数学公式" class="headerlink" title="常用的数学公式"></a>常用的数学公式</h5><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 常用的一些数学公式</span></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\frac</span>&#123;1&#125;&#123;2&#125;</span><br><span class="line"><span class="keyword">\sqrt</span>[3]&#123;1 + <span class="keyword">\frac</span>&#123;1&#125;&#123;2&#125;&#125;</span><br><span class="line"><span class="keyword">\int</span><span class="built_in">_</span>a<span class="built_in">^</span>bf(x)dx</span><br><span class="line"><span class="keyword">\times</span></span><br><span class="line"><span class="keyword">\sum</span><span class="built_in">_</span>&#123;i = 0&#125;<span class="built_in">^</span>&#123;n<span class="built_in">^</span>2&#125;f(i)</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<h5 id="插入图片-jpg"><a href="#插入图片-jpg" class="headerlink" title="插入图片(jpg)"></a>插入图片(jpg)</h5><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 插入图片(jpg)</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;center&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;&#123;htbh&#125;</span><br><span class="line">  <span class="keyword">\includegraphics</span>[angle = 10 ,width = 4.00in, height = 4.00in]&#123;sdd.jpg&#125;</span><br><span class="line">  <span class="keyword">\caption</span>&#123;标题的名字&#125;</span><br><span class="line">  <span class="keyword">\label</span>&#123;233&#125;</span><br><span class="line">  <span class="keyword">\end</span>&#123;figure&#125;</span><br><span class="line">  <span class="keyword">\end</span>&#123;center&#125;</span><br></pre></td></tr></table></figure>
<h5 id="插入图片-eps"><a href="#插入图片-eps" class="headerlink" title="插入图片(eps)"></a>插入图片(eps)</h5><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">%插入eps图片   % 注意要有/usepackage&#123;epstopdf&#125; 和 /usepackage&#123;graphicx&#125;</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;</span><br><span class="line">    <span class="keyword">\includegraphics</span>[angle = 10 , height = 2cm]&#123;233.eps&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代码的合集是可以运行的，我只是分开写了。</p>
<p>如果在编译的运行中，出现提示 invalid character code ,   Document -&gt;  Document Settings -&gt; Format -&gt; 下拉选项框 -&gt; UTF-8.</p>
<p>另外在打开别人的latex时，注意要用UTF - 8打开</p>
]]></content>
      <categories>
        <category>Latex</category>
      </categories>
      <tags>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>Machine Learning 离散化 + 带修改莫队</title>
    <url>/2019/08/02/Machine-Learning-%E7%A6%BB%E6%95%A3%E5%8C%96-%E5%B8%A6%E4%BF%AE%E6%94%B9%E8%8E%AB%E9%98%9F/</url>
    <content><![CDATA[<span id="more"></span>

<p><a href="http://codeforces.com/contest/940/problem/F">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你一个序列，每次询问一个区间，问你区间内的Mex值。</p>
<p>什么是Mex值呢？比如说某个数字出现1次，某个数字出现3次，那么Mex就是：2.</p>
<p>这个类似于SG函数，就是未出现过的最小的那个数字。</p>
<p>另外输入中还会有另一种操作： 单点修改</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们肯定需要首先求出区间内每个数字出现的次数，然后再把这个次数存到一个数组中。求次数，不用说，莫队。但是单点修改需要用带修改莫队。需要注意的是，扩展区间的时候，要先扩展，再收缩，否则会出现下标为负数的情况。另外modify函数中，最后是交换两个数字，因为可能以后还得把他们换回来，所以不是赋值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">400005</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> l, r, id, pre;</span><br><span class="line">  &#125;q[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node1</span>&#123;</span><br><span class="line">    <span class="type">int</span> pos, val;</span><br><span class="line">&#125;C[maxn];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num[maxn], ans[maxn], a[maxn], b[maxn &lt;&lt; <span class="number">2</span>], col[maxn], sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a , node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(col[a.l] != col[b.l])  <span class="keyword">return</span> a.l &lt; b.l;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(col[a.r] != col[b.r]) <span class="keyword">return</span> a.r &lt; b.r;</span><br><span class="line">    <span class="keyword">else</span>  <span class="keyword">return</span> a.pre &lt; b.pre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> add)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans[sum[x]]--;</span><br><span class="line">    sum[x] += add;</span><br><span class="line">    ans[sum[x]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> time , <span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(C[time].pos &gt;= q[i].l &amp;&amp; C[time].pos &lt;= q[i].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">update</span>(a[C[time].pos], <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">update</span>(C[time].val, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(a[C[time].pos] ,C[time].val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, Q, op, ll, rr;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;Q);</span><br><span class="line">    <span class="type">int</span> sz = <span class="built_in">pow</span>(n, <span class="number">0.67</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        b[i] = a[i];</span><br><span class="line">        col[i] = (i - <span class="number">1</span>)/ sz + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;op, &amp;ll, &amp;rr);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q[++tot].l = ll;</span><br><span class="line">            q[tot].r = rr;</span><br><span class="line">            q[tot].id = tot;</span><br><span class="line">            q[tot].pre = cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            C[++cnt].pos = ll;</span><br><span class="line">            C[cnt].val = rr;</span><br><span class="line">            b[n + cnt] = rr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + tot + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + cnt + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> N = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + cnt + n + <span class="number">1</span>) - (b + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + N + <span class="number">1</span>,a[i]) - b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        C[i].val = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + N + <span class="number">1</span>, C[i].val) - b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>, time = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(l &gt; q[i].l)&#123;l--; <span class="built_in">update</span>(a[l], <span class="number">1</span>);&#125;</span><br><span class="line">        <span class="keyword">while</span>(r &lt; q[i].r)&#123;r++; <span class="built_in">update</span>(a[r], <span class="number">1</span>);&#125;</span><br><span class="line">        <span class="keyword">while</span>(r &gt; q[i].r)&#123;<span class="built_in">update</span>(a[r], <span class="number">-1</span>); r--;&#125;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; q[i].l)&#123;<span class="built_in">update</span>(a[l], <span class="number">-1</span>); l++;&#125;</span><br><span class="line">        <span class="keyword">while</span>(time &lt; q[i].pre)&#123;time++; <span class="built_in">modify</span>(time, i);&#125;</span><br><span class="line">        <span class="keyword">while</span>(time &gt; q[i].pre)&#123;<span class="built_in">modify</span>(time, i); time--;&#125;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(ans[k]) k++;</span><br><span class="line">        num[q[i].id] = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num[i] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>莫队算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab 学习笔记</title>
    <url>/2019/05/05/Matlab-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Matlab 是 Matrix 和 Laboratory (矩阵实验室)的缩写，所以最初创造它的目的就是解决线性代数中的矩阵运算问题的。Matlab是一种用于算法开发，数据可视化，数据分析以及数值计算的高级技术计算语言和交互式环境。</p>
<span id="more"></span>

<p>（本文每个代码块都是可以独立运行的，可以运行试试, 但有时记得clear一下）</p>
<h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span>   <span class="comment">%意味着a是一个double的数据</span></span><br><span class="line">class(a)     <span class="comment">%可以查看a是什么类型的数据</span></span><br><span class="line"><span class="built_in">abs</span>(<span class="string">&#x27;a&#x27;</span>) </span><br><span class="line">double(<span class="string">&#x27;a&#x27;</span>)    <span class="comment">%这两种方式可以输出字符a的ASCII码,当然abs()也是绝对值函数，后面还会说</span></span><br><span class="line">char(<span class="number">97</span>)       <span class="comment">%可以将ASCII对应的字符输出</span></span><br><span class="line">clear       <span class="comment">%清空所有变量</span></span><br><span class="line">clear(a)     <span class="comment">%清空a变量</span></span><br><span class="line">clc          <span class="comment">%清屏（经常用)</span></span><br></pre></td></tr></table></figure>

<h5 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a.x = <span class="number">1</span></span><br><span class="line">a.y = <span class="number">1</span></span><br><span class="line">a.z = <span class="number">1</span>        <span class="comment">%为结构体赋值</span></span><br><span class="line">isstruct(a)         <span class="comment">%是否为结构体</span></span><br><span class="line">fieldnames(a)          <span class="comment">%显示结构体的成员</span></span><br><span class="line">isfield(a,<span class="string">&#x27;x&#x27;</span>)            <span class="comment">%是否为结构体的成员</span></span><br><span class="line">rmfield(a,<span class="string">&#x27;x&#x27;</span>)            <span class="comment">%删除结构体的成员</span></span><br><span class="line">getfield(a,<span class="string">&#x27;y&#x27;</span>)          <span class="comment">%获取结构体某个成员的值</span></span><br></pre></td></tr></table></figure>

<h5 id="固定变量"><a href="#固定变量" class="headerlink" title="固定变量"></a>固定变量</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pi</span>        <span class="comment">%显示3.1416</span></span><br><span class="line">z = <span class="built_in">i</span>        <span class="comment">%显示0.00 + 1.00i</span></span><br><span class="line">x = <span class="number">1</span>/<span class="number">0</span>       <span class="comment">%显示Inf</span></span><br><span class="line"><span class="number">0</span>/<span class="number">0</span>       <span class="comment">%显示NaN 意思为 Not a number ，指值不确定</span></span><br></pre></td></tr></table></figure>

<h5 id="常用的数学函数-sin-x-asin-x-abs-sqrt-ceil-fix-floor-round"><a href="#常用的数学函数-sin-x-asin-x-abs-sqrt-ceil-fix-floor-round" class="headerlink" title="常用的数学函数: sin(x),asin(x),abs,sqrt,ceil,fix,floor,round"></a>常用的数学函数: sin(x),asin(x),abs,sqrt,ceil,fix,floor,round</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x = <span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">6</span>:<span class="built_in">pi</span>       <span class="comment">%第二个数值pi/6指的是步长</span></span><br><span class="line">y = <span class="built_in">sin</span>(x)</span><br><span class="line">z = <span class="built_in">asin</span>(y)         <span class="comment">%即为x</span></span><br><span class="line">x = [<span class="number">-4</span> <span class="number">9</span> <span class="number">-16</span> <span class="number">25</span>]</span><br><span class="line">y = <span class="built_in">abs</span>(x)</span><br><span class="line">z = <span class="built_in">sqrt</span>(y)</span><br><span class="line">x = [<span class="number">-1.6</span> <span class="number">-0.2</span> <span class="number">1.2</span> <span class="number">0.6</span>];</span><br><span class="line">y = <span class="built_in">ceil</span>(x)              <span class="comment">%向上取整</span></span><br><span class="line">z = <span class="built_in">floor</span>(x)            <span class="comment">%向下取整</span></span><br><span class="line">g = <span class="built_in">fix</span>(x)               <span class="comment">%向着坐标原点取整</span></span><br><span class="line">f = <span class="built_in">round</span>(x)              <span class="comment">%四舍五入</span></span><br></pre></td></tr></table></figure>

<h5 id="基本语句的一个举例"><a href="#基本语句的一个举例" class="headerlink" title="基本语句的一个举例"></a>基本语句的一个举例</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">10</span></span><br><span class="line">     <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">i</span> , <span class="number">2</span>)</span><br><span class="line">      x = x + <span class="built_in">i</span>;</span><br><span class="line">     <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>                   <span class="comment">%求1 - 10内的奇数和</span></span><br></pre></td></tr></table></figure>



<h4 id="矩阵的基本运算"><a href="#矩阵的基本运算" class="headerlink" title="矩阵的基本运算"></a>矩阵的基本运算</h4><h5 id="一些常用的操作"><a href="#一些常用的操作" class="headerlink" title="一些常用的操作"></a>一些常用的操作</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>; <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>; <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">[m, n] = <span class="built_in">find</span>(x == <span class="number">8</span>)          <span class="comment">%返回行标和列标</span></span><br><span class="line">ind = <span class="built_in">find</span>(x == <span class="number">8</span>)                <span class="comment">%返回序号</span></span><br><span class="line"><span class="built_in">size</span>(x)                 <span class="comment">%矩阵的大小</span></span><br><span class="line">x = <span class="built_in">reshape</span>(x,<span class="number">1</span>,<span class="number">9</span>)             <span class="comment">%重排矩阵</span></span><br><span class="line">x = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>; <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>; <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">x = unique(x)           <span class="comment">%删除相同元素 实现矩阵压缩</span></span><br><span class="line">S = <span class="built_in">rand</span>(<span class="number">10</span>,<span class="number">1</span>)         <span class="comment">%rand产生0-1的随机矩阵</span></span><br><span class="line">S = <span class="built_in">randn</span>(<span class="number">1</span>, <span class="number">10</span>)          <span class="comment">%randn产生均值为0，方差为1的随机矩阵</span></span><br></pre></td></tr></table></figure>



<h5 id="初始化矩阵"><a href="#初始化矩阵" class="headerlink" title="初始化矩阵"></a>初始化矩阵</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>; <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>; <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]    <span class="comment">%分号代表换行  或者是:</span></span><br><span class="line">y = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">     <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line">x = [<span class="number">0</span>:<span class="number">2</span>]     <span class="comment">% 这个矩阵的初始元素是0 末尾元素是2 步长默认为1</span></span><br><span class="line">x = [<span class="number">0</span>:<span class="number">0.5</span>:<span class="number">2</span>]      <span class="comment">%步长为0.5</span></span><br><span class="line">x = <span class="built_in">linspace</span>(<span class="number">0</span> ,<span class="number">2</span>, <span class="number">5</span>)    <span class="comment">%初始元素为0，末尾元素为2，总共5个元素，这个可以与前边的方式混用</span></span><br><span class="line">x = <span class="built_in">zeros</span>(<span class="number">2</span>,<span class="number">3</span>)      <span class="comment">%初始化一个2行3列的零矩阵</span></span><br><span class="line">x = <span class="built_in">ones</span>(<span class="number">2</span>,<span class="number">3</span>)         <span class="comment">%初始化2行3列的元素全为1的矩阵</span></span><br><span class="line">x = <span class="built_in">eye</span>(<span class="number">2</span>)      <span class="comment">%初始化一个2行2列的单位矩阵</span></span><br></pre></td></tr></table></figure>

<h5 id="矩阵的基本运算-1"><a href="#矩阵的基本运算-1" class="headerlink" title="矩阵的基本运算"></a>矩阵的基本运算</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>; <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>; <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>];       <span class="comment">%末尾有分号代表系统不必输出该矩阵。</span></span><br><span class="line">B = [<span class="number">1</span> <span class="number">3</span> <span class="number">5</span>; <span class="number">6</span> <span class="number">9</span> <span class="number">0</span>; <span class="number">2</span> <span class="number">4</span> <span class="number">6</span>];</span><br><span class="line">C = A + B</span><br><span class="line">D = A - B</span><br><span class="line">E = A * B                     <span class="comment">%矩阵A乘以B（与Python不一样）</span></span><br><span class="line">F = A.* B                     <span class="comment">%矩阵A中的元素与对应位置上的B中的元素相乘，只是对应相乘</span></span><br><span class="line">G = A / B                     <span class="comment">%实际为A * B的逆</span></span><br><span class="line">H = A./ B</span><br><span class="line">I = A ^ <span class="number">2</span>                  <span class="comment">%矩阵相乘 = A * A</span></span><br><span class="line">J = A.^ <span class="number">2</span>                     <span class="comment">%只是对应的元素自身进行平方</span></span><br><span class="line">A = A&#x27;                       <span class="comment">%矩阵的转置</span></span><br></pre></td></tr></table></figure>

<h5 id="矩阵或者数组行列块的取值与赋值"><a href="#矩阵或者数组行列块的取值与赋值" class="headerlink" title="矩阵或者数组行列块的取值与赋值"></a>矩阵或者数组行列块的取值与赋值</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>; <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>; <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>];</span><br><span class="line">x = A(<span class="number">1</span>, <span class="number">3</span>)             <span class="comment">%取出第一行第三列的元素（没有第0行和第0列，与Python不同）</span></span><br><span class="line">x = A(<span class="number">4</span>)            <span class="comment">%取出第4个元素，注意的是，matlab是按列存的。</span></span><br><span class="line">y = A(<span class="number">2</span>, :)            <span class="comment">%取出第二行的元素。</span></span><br><span class="line">z = A(<span class="number">1</span>:<span class="number">2</span>, <span class="number">1</span>:<span class="number">3</span>)             </span><br><span class="line">A(<span class="number">1</span>,<span class="number">3</span>)= <span class="number">0</span>     </span><br><span class="line">A(<span class="number">2</span> ,:)= [<span class="number">6</span> <span class="number">5</span> <span class="number">4</span>]</span><br><span class="line">A(<span class="number">1</span>:<span class="number">2</span>,<span class="number">1</span>:<span class="number">2</span>) = [<span class="number">-1</span> <span class="number">-2</span> ; <span class="number">-3</span> <span class="number">-4</span>]</span><br></pre></td></tr></table></figure>

<h5 id="比较和逻辑运算"><a href="#比较和逻辑运算" class="headerlink" title="比较和逻辑运算"></a>比较和逻辑运算</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">      <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line">B = [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">       <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">eq = (A == B)                       <span class="comment">%返回值为1或0</span></span><br><span class="line">xy = (A &lt; <span class="number">5</span>) &amp; (B &gt; <span class="number">7</span>)            <span class="comment">%且</span></span><br><span class="line">xy = (A &lt; <span class="number">5</span>) | (B &gt; <span class="number">7</span>)                <span class="comment">%或</span></span><br><span class="line">A(A &lt; <span class="number">3</span>）= <span class="number">0</span></span><br><span class="line">A(<span class="number">2</span>, :) = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h5 id="数组操作函数-flipud-fliplr-rot90"><a href="#数组操作函数-flipud-fliplr-rot90" class="headerlink" title="数组操作函数: flipud fliplr rot90"></a>数组操作函数: flipud fliplr rot90</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>; <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>; <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>];</span><br><span class="line">B = <span class="built_in">flipud</span>(A)          <span class="comment">%up down 上下交换</span></span><br><span class="line">C = <span class="built_in">fliplr</span>(A)          <span class="comment">%left right 左右交换</span></span><br><span class="line">D = <span class="built_in">rot90</span>(A)           <span class="comment">%逆转90度 不是转置</span></span><br></pre></td></tr></table></figure>

<h5 id="矩阵求和，最大值"><a href="#矩阵求和，最大值" class="headerlink" title="矩阵求和，最大值"></a>矩阵求和，最大值</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>; <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>; <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>];</span><br><span class="line">sum(A)            <span class="comment">%输出每列的最大值</span></span><br><span class="line">sum(A,<span class="number">1</span>)          <span class="comment">%等价于 sum(A)  指的是输出第一维的和，也就是每列的和</span></span><br><span class="line">sum(A,<span class="number">2</span>)          <span class="comment">%输出每行的和,行是第二维</span></span><br><span class="line"><span class="built_in">max</span>(A)            <span class="comment">%输出每列的最大值</span></span><br><span class="line"><span class="built_in">max</span>(A,<span class="number">2</span>)             <span class="comment">%这里需要注意了，并不是输出第二维每行的最大值，而是看矩阵得元素同2比较，谁大就取谁。</span></span><br><span class="line"><span class="built_in">max</span>(A,[],<span class="number">2</span>)       <span class="comment">% 这里才是取出第二维每行的最大值</span></span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h4 id="Matlab的简单作图"><a href="#Matlab的简单作图" class="headerlink" title="Matlab的简单作图"></a>Matlab的简单作图</h4><h5 id="二维曲线图"><a href="#二维曲线图" class="headerlink" title="二维曲线图"></a>二维曲线图</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x = <span class="number">-2</span>*<span class="built_in">pi</span>:<span class="number">0.1</span>:<span class="number">2</span>*<span class="built_in">pi</span>;        <span class="comment">%指的是x的区间从-2π-2π,0.1为步长，就是每隔0.1画一个点，大的话就不太准确了（亲测）</span></span><br><span class="line">y1 = <span class="built_in">sin</span>(x); </span><br><span class="line">y2 = <span class="built_in">cos</span>(x);</span><br><span class="line"><span class="built_in">plot</span>(x,y1,<span class="string">&#x27;-r&#x27;</span>);                  <span class="comment">%画图的重要函数  &#x27;&#x27;中的-代表实线，r代表red红色，这里面可以写的参数我一会在列举。</span></span><br><span class="line"><span class="built_in">hold</span> on                   <span class="comment">%代表保留这个曲线在这，否则再画别的图的时候可能会把这个覆盖</span></span><br><span class="line"><span class="built_in">plot</span>(x,y2,<span class="string">&#x27;-b&#x27;</span>);     </span><br><span class="line">xlabel(<span class="string">&#x27;x&#x27;</span>)              <span class="comment">%x轴上的标签</span></span><br><span class="line">ylabel(<span class="string">&#x27;y&#x27;</span>)                <span class="comment">%y轴上的标签</span></span><br><span class="line">text(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;(0,0)&#x27;</span>)              <span class="comment">%为坐标原点加上（0,0）标签</span></span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;sin x&#x27;</span>,<span class="string">&#x27;cos x&#x27;</span>)         <span class="comment">%本意是传奇，在这里指的是图例</span></span><br><span class="line">title(<span class="string">&#x27;sin x and cos x&#x27;</span>)              <span class="comment">%图片的名字</span></span><br><span class="line">                           <span class="comment">%可以把此代码复制一下，便可直接运行</span></span><br></pre></td></tr></table></figure>

<h5 id="说说图的曲线可以有哪些格式"><a href="#说说图的曲线可以有哪些格式" class="headerlink" title="说说图的曲线可以有哪些格式:"></a>说说图的曲线可以有哪些格式:</h5><p>(这样大家就可以随意改动曲线的格式了)</p>
<p><img src="/1.png" alt="图片"></p>
<h5 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">grid on      <span class="comment">%添加网格图，可以试一下</span></span><br><span class="line">axis([xmin,xmax,ymin,ymax])     <span class="comment">%可以设置x和y轴的坐标的范围</span></span><br><span class="line">xlim([xmin,xmax])     <span class="comment">%只限制x轴的坐标范围,y轴同理</span></span><br><span class="line">[x,y] = <span class="built_in">meshgrid</span>(<span class="number">1</span>:<span class="number">3</span>,<span class="number">1</span>:<span class="number">3</span>)            <span class="comment">%x矩阵为每个方格的一维坐标，即列坐标，下面配上图</span></span><br><span class="line">rsq = (x - <span class="number">2</span>).^<span class="number">2</span> + (y - <span class="number">2</span>).^<span class="number">2</span></span><br><span class="line">r = <span class="built_in">sqrt</span>(rsq)                <span class="comment">%可以求出每个点到中心点（2,2）方块的距离</span></span><br></pre></td></tr></table></figure>

<p><img src="/2.png" alt="图1"></p>
<h5 id="三维曲线图举例"><a href="#三维曲线图举例" class="headerlink" title="三维曲线图举例"></a>三维曲线图举例</h5><p>高数中刚刚接触的螺旋线。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t = <span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">50</span>:<span class="number">10</span>*<span class="built_in">pi</span>;     <span class="comment">%10π就是转了5圈</span></span><br><span class="line">x = <span class="built_in">sin</span>(t);</span><br><span class="line">y = <span class="built_in">cos</span>(t);</span><br><span class="line">z = t;</span><br><span class="line"><span class="built_in">plot3</span>(x,y,z)               <span class="comment">%三维图像用plot3</span></span><br><span class="line">title(<span class="string">&#x27;Helix&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;sin t&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;cos t&#x27;</span>)</span><br><span class="line">zlabel(<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">grid on                 <span class="comment">%可以直接绘制出螺旋图</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Matlab</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ - 1182 食物链</title>
    <url>/2019/05/01/POJ-1182-%E9%A3%9F%E7%89%A9%E9%93%BE/</url>
    <content><![CDATA[<p>题目链接: <a href="http://poj.org/problem?id=1182">食物链</a></p>
<span id="more"></span>

<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>首先自然是排除假话2和假话3</p>
<p>然后就是用val[i]代表该节点和根节点之间的关系了。注意 （sum + val[b] - val[a]）可能为负数 所以里面要+3.  最后的判断我直接用的多个if，懒得去想简单的了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> val[<span class="number">100001</span>],f[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != f[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = f[x];</span><br><span class="line">        f[x] = <span class="built_in">Find</span>(f[x]);</span><br><span class="line">        val[x] = (val[x] + val[t]) % <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N, num,  M, t, a, b, caser = <span class="number">1</span>,sum;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;N,&amp;M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i] = i;</span><br><span class="line">        val[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= M; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;num,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">if</span>(a &gt; N || b &gt; N || (num == <span class="number">2</span> &amp;&amp; a == b))</span><br><span class="line">        &#123;</span><br><span class="line">            flag ++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> fa = <span class="built_in">Find</span>(a);</span><br><span class="line">        <span class="type">int</span> fb = <span class="built_in">Find</span>(b);</span><br><span class="line">        <span class="keyword">if</span>(fa != fb)</span><br><span class="line">        &#123;</span><br><span class="line">            f[fa] = fb;</span><br><span class="line">            val[fa] = (sum + val[b] - val[a] + <span class="number">3</span>) % <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num == <span class="number">1</span> &amp;&amp; val[a] != val[b])</span><br><span class="line">                flag++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="number">2</span> &amp;&amp; val[a] == <span class="number">0</span> &amp;&amp; val[b] != <span class="number">2</span>)</span><br><span class="line">                flag++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="number">2</span> &amp;&amp; val[a] == <span class="number">1</span> &amp;&amp; val[b] != <span class="number">0</span>)</span><br><span class="line">                flag ++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="number">2</span> &amp;&amp; val[a] == <span class="number">2</span> &amp;&amp; val[b] != <span class="number">1</span>)</span><br><span class="line">                flag ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">        cout &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 1220 高精度进制转换</title>
    <url>/2019/12/03/POJ-1220-%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>2019ICPC银川题目。不太会用C++，保留一下JAVA模板</p>
<span id="more"></span>

<p><a href="https://nanti.jisuanke.com/t/42389">题目链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//相当于输入输出头文件</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">Scanner</span> <span class="variable">cin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">       BigInteger sum , a;</span><br><span class="line">       sum = BigInteger.valueOf(<span class="number">0</span>);</span><br><span class="line">       BigInteger b, c;</span><br><span class="line">       String s;</span><br><span class="line">       b = cin.nextBigInteger();</span><br><span class="line">       c = cin.nextBigInteger();</span><br><span class="line">       s = cin.next();</span><br><span class="line">       <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">       <span class="type">BigInteger</span> <span class="variable">tmp</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i ) &#123;</span><br><span class="line">    	   <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    	   <span class="type">char</span> <span class="variable">cc</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">    	   <span class="keyword">if</span>(cc &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; cc &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">    		   k = cc - <span class="string">&#x27;A&#x27;</span> + <span class="number">10</span>;</span><br><span class="line">    	   &#125;</span><br><span class="line">    	   <span class="keyword">if</span>(cc &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; cc &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">    		   k = cc - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    	   &#125;</span><br><span class="line">    	   <span class="keyword">if</span>(cc &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; cc &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">    		   k = cc - <span class="string">&#x27;a&#x27;</span> + <span class="number">36</span>;</span><br><span class="line">    	   &#125;</span><br><span class="line">    	   sum = sum.add(BigInteger.valueOf(k).multiply(tmp));</span><br><span class="line">    	   tmp = tmp.multiply(b);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> ans[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10005</span>];</span><br><span class="line">       <span class="keyword">while</span>(sum.compareTo(BigInteger.valueOf(<span class="number">0</span>))!=<span class="number">0</span>) &#123;</span><br><span class="line">    	   ans[++cnt] = sum.mod(c).intValue();</span><br><span class="line">    	   sum = sum.divide(c);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(cnt == <span class="number">0</span>) &#123;</span><br><span class="line">    	   System.out.println(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span>&#123;</span><br><span class="line">    	   <span class="type">char</span> answer[] = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">10005</span>];</span><br><span class="line">    	   <span class="type">int</span> <span class="variable">tot</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    	   <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cnt; i &gt;= <span class="number">1</span>; --i ) &#123;</span><br><span class="line">    		   </span><br><span class="line">    		   <span class="keyword">if</span>(ans[i] &gt;= <span class="number">0</span> &amp;&amp; ans[i] &lt;= <span class="number">9</span>) &#123;		   </span><br><span class="line">    			   answer[++tot] = (<span class="type">char</span>)(ans[i] + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    		   &#125;</span><br><span class="line">    		   <span class="keyword">if</span>(ans[i] &gt;= <span class="number">10</span> &amp;&amp; ans[i] &lt;= <span class="number">35</span>) &#123;</span><br><span class="line">    			   <span class="type">char</span> <span class="variable">p</span> <span class="operator">=</span> (<span class="type">char</span>)(ans[i] - <span class="number">10</span> + <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    			   answer[++tot] = p;</span><br><span class="line">    		   &#125;</span><br><span class="line">    		   <span class="keyword">if</span>(ans[i] &gt;= <span class="number">36</span> &amp;&amp; ans[i] &lt;= <span class="number">61</span>) &#123;</span><br><span class="line">    			   <span class="type">char</span> <span class="variable">p</span> <span class="operator">=</span> (<span class="type">char</span>)(ans[i] - <span class="number">36</span> + <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    			   answer[++tot] = p;</span><br><span class="line">    		   &#125;</span><br><span class="line">    	   &#125;</span><br><span class="line">    	   <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">    		   System.out.print(answer[i]);</span><br><span class="line">    	   &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>高精度进制转换</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 1273 最大流 Dinic</title>
    <url>/2019/09/02/POJ-1273-%E6%9C%80%E5%A4%A7%E6%B5%81-Dinic/</url>
    <content><![CDATA[<span id="more"></span>

<p><a href="http://poj.org/problem?id=1273">题目链接</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>求最大流，运用Dinic算法，先求分层图，然后用多次DFS求出增广路，把每次增广路的中的最小值相加即为最大流。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">10005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> head[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v,w,next;</span><br><span class="line">&#125; edge[<span class="number">10005</span>];</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">10005</span>];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="type">int</span> deep[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    <span class="built_in">memset</span>(deep, <span class="number">0</span>, <span class="built_in">sizeof</span>(deep));</span><br><span class="line">    deep[s] = <span class="number">1</span>;</span><br><span class="line">    Q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = head[u]; k != <span class="number">-1</span>; k = edge[k].next)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> v = edge[k].v;</span><br><span class="line">            <span class="type">int</span> w = edge[k].w;</span><br><span class="line">            <span class="keyword">if</span>(deep[v] == <span class="number">0</span> &amp;&amp; w &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                deep[v] = deep[u] + <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(deep[t] == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v, <span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].v = v;</span><br><span class="line">    edge[tot].w = w;</span><br><span class="line">    edge[tot].next = head[u];</span><br><span class="line">    head[u] = tot;</span><br><span class="line">    tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == t)</span><br><span class="line">        <span class="keyword">return</span> dis;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = head[s]; k != <span class="number">-1</span>; k = edge[k].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[k].v;</span><br><span class="line">        <span class="type">int</span> w = edge[k].w;</span><br><span class="line">        <span class="keyword">if</span>(deep[v] == deep[s] + <span class="number">1</span> &amp;&amp; w &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> d = <span class="built_in">dfs</span>(v,<span class="built_in">min</span>(w, dis));</span><br><span class="line">            <span class="keyword">if</span>(d &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                edge[k].w -= d;</span><br><span class="line">                edge[k^<span class="number">1</span>].w += d;</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m,u,v,w;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; m &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        t = n;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="built_in">sizeof</span>(head));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            <span class="built_in">add</span>(u,v,w);</span><br><span class="line">            <span class="built_in">add</span>(v,u,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">bfs</span>(<span class="number">1</span>,n))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="type">int</span> d = <span class="built_in">dfs</span>(<span class="number">1</span>, inf))</span><br><span class="line">                sum += d;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>Dinic最大流</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 1733 离散化 + 并查集</title>
    <url>/2019/08/06/POJ-1733-%E7%A6%BB%E6%95%A3%E5%8C%96-%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<p>将数据离散化后，就是经典的判断区间和是否正确的带权并查集。</p>
<span id="more"></span>

<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>现在告诉你很多段区间的和的奇偶情况， 问到哪一句就不正确了。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由于区间长度很大，但是区间段数很少，所以需要先离散化一下，然后维护每个端点到他所在根节点的权值，也就是到根节点所在端点的奇偶情况，当询问L，R时， 我们就判断val[L - 1]  - val[R] 的奇偶情况是不是与输入的相符即可。</p>
<p>注意输入字符串用char，不要用string，不是一般的超时。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//#define inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn= <span class="number">300005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> f[maxn], val[maxn];</span><br><span class="line"><span class="type">int</span> a[maxn],b[maxn], l[maxn],r[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != f[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = f[x];</span><br><span class="line">        f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">        val[x] = (val[t] + val[x]) % <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> s[<span class="number">10005</span>][<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> vis[<span class="number">2005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> num,m;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">   <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;l[i],&amp;r[i]);</span><br><span class="line">       b[++tot] = l[i];</span><br><span class="line">       b[++tot] = r[i];</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">sort</span>(b + <span class="number">1</span>, b + tot + <span class="number">1</span>);</span><br><span class="line">   <span class="type">int</span> N = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + tot + <span class="number">1</span>) -b <span class="number">-1</span>;</span><br><span class="line">   <span class="type">int</span> t = N;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;  i &lt; t; ++i)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span>(b[i + <span class="number">1</span>] - b[i] &gt; <span class="number">1</span>)</span><br><span class="line">        b[++N] = b[i] + <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= N; ++i)</span><br><span class="line">   &#123;</span><br><span class="line">       f[i] = i;</span><br><span class="line">       val[i] = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">int</span> aa, bb;</span><br><span class="line">   <span class="built_in">sort</span>(b + <span class="number">1</span>, b + N + <span class="number">1</span>);</span><br><span class="line">   <span class="type">int</span> index = inf;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ll = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + N + <span class="number">1</span>, l[i]) - b;</span><br><span class="line">        <span class="type">int</span> rr = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + N + <span class="number">1</span>, r[i]) - b;</span><br><span class="line">        ll--;</span><br><span class="line">        aa = ll;</span><br><span class="line">        bb = rr;</span><br><span class="line">        <span class="type">int</span> fa = <span class="built_in">find</span>(aa);</span><br><span class="line">        <span class="type">int</span> fb = <span class="built_in">find</span>(bb);</span><br><span class="line">           <span class="keyword">if</span>(s[i][<span class="number">0</span>] == <span class="string">&#x27;e&#x27;</span>) num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(fa != fb)</span><br><span class="line">        &#123;</span><br><span class="line">            f[fa] = fb;</span><br><span class="line">            val[fa] = (num + val[bb] - val[aa] + <span class="number">2</span>) % <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>((val[aa] - val[bb] + <span class="number">2</span>) % <span class="number">2</span> != num)</span><br><span class="line">            &#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index == inf)</span><br><span class="line">        cout &lt;&lt; m &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; index - <span class="number">1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ--1988 Cube Stacking</title>
    <url>/2019/05/01/POJ-1988-Cube-Stacking/</url>
    <content><![CDATA[<p>题目链接： <a href="http://poj.org/problem?id=1988">Cube Stacking</a></p>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>M a b 代表把包含第一个数字的栈放到包含第6个数字上面的栈的上方。  开始的时候栈从1 - N标号，每个栈里的数字是它的标号。如果输入C a  代表让你输出 a 数字下方的数字有多少个。</p>
<span id="more"></span>

<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>想了挺长时间，发现大部分题解还是想的有些麻烦。这也是道经典的带权并查集。under【i】代表第i 个数字下方有多少个数字，因此最终的答案就是under数组. 我们一般来说应用并查集的val【】数组记录的是此节点到根节点的距离，此题也是一样的，sum【i】代表 i 节点下的节点有多少个。 因此当我们执行combine操作的时候，under[fa] &#x3D; sum[fb] 就代表 fa 节点的下方的数字的个数有 sum[fb]个。 这道题只不过是多了个sum[]数组，用并查集挺巧妙的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> sum[<span class="number">100001</span>],f[<span class="number">100001</span>],under[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != f[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = f[x];</span><br><span class="line">        f[x] = <span class="built_in">Find</span>(f[x]);</span><br><span class="line">        under[x] += under[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">combine</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> fa = <span class="built_in">Find</span>(a);</span><br><span class="line">    <span class="type">int</span> fb = <span class="built_in">Find</span>(b);</span><br><span class="line">    f[fa] = fb;</span><br><span class="line">    under[fa] = sum[fb];</span><br><span class="line">    sum[fb] += sum[fa];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,a,b;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i] = i;</span><br><span class="line">        under[i] = <span class="number">0</span>;</span><br><span class="line">        sum[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; s ;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            <span class="built_in">combine</span>(a,b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cin &gt;&gt; a;</span><br><span class="line">            <span class="type">int</span> fa = <span class="built_in">Find</span>(a);</span><br><span class="line">            cout &lt;&lt; under[a] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ - 2243 双向BFS</title>
    <url>/2019/06/02/POJ-2243-%E5%8F%8C%E5%90%91BFS/</url>
    <content><![CDATA[<p>双向BFS是从起点和终点两边扩展节点，当节点重合即为最优解。</p>
<span id="more"></span>

<p>对于双向BFS，我们逐层求解，有两个队列，当我们遍历完毕这个队列的这一层，然后就要遍历另一个队列的相同的层数。</p>
<h3 id="POJ-2243"><a href="#POJ-2243" class="headerlink" title="POJ - 2243"></a>POJ - 2243</h3><p><a href="http://poj.org/problem?id=2243">Knight moves</a></p>
<h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>起点和终点只是一个二维坐标，因此用vis数组存储即可。从起点和终点分别维护一个队列，开始扩展，当两者重合即为最终答案。一遍过，还是有点兴奋，逐渐的会加大这种题型的难度。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">2</span>][<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">queue&lt;node&gt;Q[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> dir[<span class="number">8</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">2</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span> ,<span class="number">-1</span>&#125;,&#123;<span class="number">-2</span>, <span class="number">1</span>&#125;,&#123;<span class="number">-2</span> ,<span class="number">-1</span>&#125;, &#123;<span class="number">1</span> ,<span class="number">2</span>&#125;,&#123;<span class="number">1</span>, <span class="number">-2</span>&#125;,&#123;<span class="number">-1</span>, <span class="number">2</span>&#125;,&#123;<span class="number">-1</span>, <span class="number">-2</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sz = Q[id].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span>(sz--)</span><br><span class="line">    &#123;</span><br><span class="line">        node p = Q[id].<span class="built_in">front</span>();</span><br><span class="line">        Q[id].<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> xx = p.x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> yy = p.y + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(xx &lt; <span class="number">0</span> || xx &gt; <span class="number">7</span> || yy &lt; <span class="number">0</span> || yy &gt; <span class="number">7</span> || vis[id][xx][yy]) <span class="keyword">continue</span>;</span><br><span class="line">            vis[id][xx][yy] = <span class="number">1</span>;</span><br><span class="line">            Q[id].<span class="built_in">push</span>(&#123;xx, yy&#125;);</span><br><span class="line">            <span class="keyword">if</span>(vis[!id][xx][yy])</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!Q[<span class="number">0</span>].<span class="built_in">empty</span>())</span><br><span class="line">        Q[<span class="number">0</span>].<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">while</span>(!Q[<span class="number">1</span>].<span class="built_in">empty</span>())</span><br><span class="line">        Q[<span class="number">1</span>].<span class="built_in">pop</span>();</span><br><span class="line">    vis[<span class="number">0</span>][x1][y1] = <span class="number">1</span>;</span><br><span class="line">    vis[<span class="number">1</span>][x2][y2] = <span class="number">1</span>;</span><br><span class="line">    Q[<span class="number">0</span>].<span class="built_in">push</span>(&#123;x1, y1&#125;);</span><br><span class="line">    Q[<span class="number">1</span>].<span class="built_in">push</span>(&#123;x2, y2&#125;);</span><br><span class="line">    <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q[<span class="number">0</span>].<span class="built_in">empty</span>() || !Q[<span class="number">1</span>].<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num1 = <span class="built_in">bfs</span>(<span class="number">0</span>);</span><br><span class="line">        step++;</span><br><span class="line">        <span class="keyword">if</span>(num1)  <span class="keyword">return</span> step;</span><br><span class="line">        <span class="type">int</span> num2 = <span class="built_in">bfs</span>(<span class="number">1</span>);</span><br><span class="line">        step++;</span><br><span class="line">        <span class="keyword">if</span>(num2)  <span class="keyword">return</span> step;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s, s1;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s &gt;&gt; s1)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == s1)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;To get from &quot;</span>&lt;&lt; s &lt;&lt; <span class="string">&quot; to &quot;</span> &lt;&lt; s1 &lt;&lt; <span class="string">&quot; takes &quot;</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&quot; knight moves.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(vis ,<span class="number">0</span> ,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">        x1 = s[<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        x2 = s1[<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        y1 = s[<span class="number">1</span>] - <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        y2 = s1[<span class="number">1</span>] - <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;To get from &quot;</span>&lt;&lt; s &lt;&lt; <span class="string">&quot; to &quot;</span> &lt;&lt; s1 &lt;&lt; <span class="string">&quot; takes &quot;</span> &lt;&lt; <span class="built_in">solve</span>() &lt;&lt; <span class="string">&quot; knight moves.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>双向BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 2559 （单调栈）</title>
    <url>/2019/07/24/POJ-2559-%EF%BC%88%E5%8D%95%E8%B0%83%E6%A0%88%EF%BC%89/</url>
    <content><![CDATA[<p>单调栈的经典例题，虽然单调栈的题目已经做过一些了，但是还是在这卡了一会。</p>
<span id="more"></span>

<p><a href="http://poj.org/problem?id=2559">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>求最大矩形的面积。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>用一个单调栈存储一个单调递增的序列，用来查看每个矩形向左延伸的左边界。</p>
<p>单调栈中是一个单调的序列，所以我们在向左找的时候，就一直找就行。</p>
<p>注意的是，单调栈中存的是下标，不是值。</p>
<p>我们比较栈顶元素和当前元素的大小，直到遇到一个栈顶的元素小于当前元素，那么栈顶元素 +1就代表了左边界的位置。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line">LL l[<span class="number">100005</span>];</span><br><span class="line">LL r[<span class="number">100005</span>];</span><br><span class="line">LL a[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        stack&lt;LL&gt;S;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">            <span class="keyword">while</span>(!S.<span class="built_in">empty</span>() &amp;&amp; a[S.<span class="built_in">top</span>()] &gt;= a[i]) S.<span class="built_in">pop</span>();</span><br><span class="line">            l[i] = S.<span class="built_in">empty</span>()? <span class="number">1</span> : (S.<span class="built_in">top</span>() + <span class="number">1</span>);</span><br><span class="line">            S.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        stack&lt;LL&gt;S1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n ; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!S<span class="number">1.</span><span class="built_in">empty</span>() &amp;&amp; a[S<span class="number">1.</span><span class="built_in">top</span>()] &gt;= a[i]) S<span class="number">1.</span><span class="built_in">pop</span>();</span><br><span class="line">            r[i] = S<span class="number">1.</span><span class="built_in">empty</span>()? n : (S<span class="number">1.</span><span class="built_in">top</span>() - <span class="number">1</span>);</span><br><span class="line">            S<span class="number">1.</span><span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        LL maxer = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            maxer = <span class="built_in">max</span>(maxer, (r[i] - l[i] + <span class="number">1</span>) * a[i] );</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; maxer &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line">pair&lt;LL,LL&gt;P;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;pair&lt;LL,LL&gt; &gt;S;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> t;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">    LL ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;t);</span><br><span class="line">        LL width = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!S.<span class="built_in">empty</span>() &amp;&amp; S.<span class="built_in">top</span>().first &gt; t)</span><br><span class="line">        &#123;</span><br><span class="line">            LL th = S.<span class="built_in">top</span>().first;</span><br><span class="line">            LL ts = S.<span class="built_in">top</span>().second;</span><br><span class="line">            S.<span class="built_in">pop</span>();</span><br><span class="line">            width += ts;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, width * th);</span><br><span class="line">        &#125;</span><br><span class="line">        S.<span class="built_in">push</span>(&#123;t,width + <span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!S.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, S.<span class="built_in">top</span>().first * (S.<span class="built_in">top</span>().second + temp));</span><br><span class="line">        temp += S.<span class="built_in">top</span>().second;</span><br><span class="line">        S.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 2778 AC自动机 + 矩阵乘法</title>
    <url>/2019/08/08/POJ-2778-AC%E8%87%AA%E5%8A%A8%E6%9C%BA-%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/</url>
    <content><![CDATA[<p>什么鬼？，C++ AC, G++ 疯狂RE。。看题目就知道是递推的方法，但是肯定不能dp,看n可以达到20亿，自然想到用矩阵的乘法来递推。</p>
<span id="more"></span>

<p><a href="https://vjudge.net/problem/POJ-2778">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你一些字符串代表有病毒的字符串，现在给你一个数字N，让你求长度为N且不包含病毒的字符串的数目。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们首先需要构建一个矩阵，问题是矩阵的元素代表什么，我们用矩阵的元素代表从一个点转移到另一个点的路线数目，那么矩阵的K次幂，就代表了从这个点经过K次路径（可以重复）到达另一个点的路线的数目。因此我们把构建出的矩阵求出K次幂，然后把第一行累加一下就可。因为起点一定是0点，而末尾的点可能是任意一个顶点。</p>
<p>问题是矩阵的构建了。我们需要用到AC自动机的fai指针了，我们首先把每个病毒字符串的末尾标记一下，然后我们在bfs中加上一句，如果该点的fail指针所指向的字母是被标记的，那么这个字母也要被标记。因为fail指针指向的是公共的后缀，如果这个后缀都被标记了，那么自然这个字符串中一定包含了病毒串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;ctime&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;bitset&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;sstream&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;functional&gt;</span><br><span class="line">#define eps 1e-8</span><br><span class="line">#define PI acos(-1.0)</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">struct Matrix&#123;</span><br><span class="line">   ll m[101][101];</span><br><span class="line">&#125;M;</span><br><span class="line">const int mod = 100000;</span><br><span class="line">int n, cnt, nxt[105][5], fail[105], mark[105], id[5];</span><br><span class="line">long long m;</span><br><span class="line">int newnode()</span><br><span class="line">&#123;</span><br><span class="line">    ++cnt;</span><br><span class="line">    for(int i = 0; i &lt; 4; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        nxt[cnt][i] = -1;</span><br><span class="line">    &#125;</span><br><span class="line">    mark[cnt] = 0;</span><br><span class="line">    return cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    id[&#x27;A&#x27;] = 0;</span><br><span class="line">    id[&#x27;T&#x27;] = 1;</span><br><span class="line">    id[&#x27;C&#x27;] = 2;</span><br><span class="line">    id[&#x27;G&#x27;] = 3;</span><br><span class="line">    cnt = -1;</span><br><span class="line">    newnode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void insert(char s[])</span><br><span class="line">&#123;</span><br><span class="line">    int sz = strlen(s);</span><br><span class="line">    int now = 0;</span><br><span class="line">    for(int i = 0; i &lt; sz; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        int num = id[s[i]];</span><br><span class="line">        if(nxt[now][num] == -1)</span><br><span class="line">            nxt[now][num] = newnode();</span><br><span class="line">        now = nxt[now][num];</span><br><span class="line">    &#125;</span><br><span class="line">    mark[now] = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void build()</span><br><span class="line">&#123;</span><br><span class="line">    fail[0] = 0;</span><br><span class="line">    queue&lt;int&gt;Q;</span><br><span class="line">    for(int i = 0; i &lt; 4; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        if(nxt[0][i] == -1)</span><br><span class="line">            nxt[0][i] = 0;</span><br><span class="line">        else&#123;</span><br><span class="line">            fail[nxt[0][i]] = 0;</span><br><span class="line">            Q.push(nxt[0][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    while(!Q.empty())&#123;</span><br><span class="line">        int now = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        if(mark[fail[now]])</span><br><span class="line">        mark[now] = 1;</span><br><span class="line">        for(int i = 0; i &lt; 4; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            if(nxt[now][i] == -1)</span><br><span class="line">            &#123;</span><br><span class="line">                nxt[now][i] = nxt[fail[now]][i];</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                fail[nxt[now][i]] = nxt[fail[now]][i];</span><br><span class="line">                Q.push(nxt[now][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void build_matrix()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i = 0; i &lt;= cnt; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j = 0; j &lt; 4; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            if(!mark[i] &amp;&amp; !mark[nxt[i][j]])</span><br><span class="line">                M.m[i][nxt[i][j]]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Matrix mul(Matrix A, Matrix B)</span><br><span class="line">&#123;</span><br><span class="line">    Matrix tmp;</span><br><span class="line">    memset(tmp.m, 0, sizeof(tmp));</span><br><span class="line">    for(int i = 0; i &lt;= cnt; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j = 0; j &lt;= cnt; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp.m[i][j] = 0;</span><br><span class="line">            for(int k = 0; k &lt;= cnt; ++k)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp.m[i][j] = (tmp.m[i][j] + A.m[i][k] * B.m[k][j]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Matrix pow(Matrix A, long long n)</span><br><span class="line">&#123;</span><br><span class="line">    Matrix res;</span><br><span class="line">    memset(res.m, 0, sizeof(res));</span><br><span class="line">    for(int i = 0; i &lt;= cnt; ++i)</span><br><span class="line">        res.m[i][i] = 1;</span><br><span class="line">    while(n)</span><br><span class="line">    &#123;</span><br><span class="line">        if(n &amp; 1)</span><br><span class="line">        res = mul(res, A);</span><br><span class="line">        A = mul(A,A);</span><br><span class="line">        n &gt;&gt;= 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    scanf(&quot;%d %lld&quot;,&amp;n,&amp;m);</span><br><span class="line">    init();</span><br><span class="line">    char s[11];</span><br><span class="line">    for(int i = 1; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%s&quot;,s);</span><br><span class="line">        insert(s);</span><br><span class="line">    &#125;</span><br><span class="line">    build();</span><br><span class="line">    build_matrix();</span><br><span class="line">    Matrix C = pow(M, m);</span><br><span class="line">    ll sum = 0;</span><br><span class="line">    for(int i = 0; i &lt;= cnt; ++i)</span><br><span class="line">        sum  = (sum + C.m[0][i]) % mod;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; &#x27;\n&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>AC自动机</tag>
        <tag>矩阵乘法</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ - 3368 RMQ问题</title>
    <url>/2019/05/31/POJ-3368%20RMQ%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>让你找出某一段区间内最大的频数。</p>
<span id="more"></span>

<p><a href="http://poj.org/problem?id=3368">POJ - 3368</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>感觉这个题应用的还是很奇妙。之前做一维RMQ问题，都是直接求一段区间内的最大值最小值，现在这个让你求一个区间的频数，就感觉无从下手了，其实我们可以用sum[i]数组存储从他前面的数字到他的连续数字的最大频数。那么问题就转换了求某段区间内最大的sum[]值，但我们需要特殊处理一下可能从左边界的左边一直到左边界的右边都是连续的相同的值的情况。还有一个坑点就是代码中的t++之后，可能t最终会大于r，这个地方好坑啊。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">100005</span>][<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> sum[<span class="number">100005</span>];</span><br><span class="line"><span class="type">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RMQ</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        dp[i][<span class="number">0</span>] = sum[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">log</span>(n) / <span class="built_in">log</span>(<span class="number">2</span>); ++j)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>)) &lt;= n; ++i)</span><br><span class="line">            dp[i][j] = <span class="built_in">max</span>(dp[i][j - <span class="number">1</span>], dp[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="built_in">log</span>(r - l + <span class="number">1</span>) / <span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dp[l][k], dp[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, l, r;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n) != EOF &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">                sum[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i] == a[i - <span class="number">1</span>])</span><br><span class="line">                    sum[i] = sum[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    sum[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">RMQ</span>(a, n);</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">            <span class="type">int</span> t = l;</span><br><span class="line">            <span class="keyword">while</span>(a[t] == a[t - <span class="number">1</span>] &amp;&amp; t &lt;= r)</span><br><span class="line">            &#123;</span><br><span class="line">                t++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> num = <span class="built_in">query</span>(t, r);</span><br><span class="line">            cout &lt;&lt; <span class="built_in">max</span>(num, t - l) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>ST算法</tag>
        <tag>RMQ问题</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ - 3468 树状数组的区间更新与区间查询</title>
    <url>/2019/04/30/POJ-3468-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%9A%84%E5%8C%BA%E9%97%B4%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>题目链接：<a href="http://poj.org/status?problem_id=3468&user_id=shenmafuyun&result=&language=">A Simple Problem with Integers </a></p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>典型的区间更新与区间查询，一般来说，对于区间更新应该用线段树，但是树状数组也能实现，由于他的代码比较短，所以我一般选择树状数组。</p>
<span id="more"></span>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll N,tree1[<span class="number">100001</span>],tree2[<span class="number">100001</span>];</span><br><span class="line">ll a[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x&amp;(-x));</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(ll x ,ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll i;</span><br><span class="line">    <span class="keyword">for</span>( i = x ; i &lt;= N;i+=<span class="built_in">lowbit</span>(i) )</span><br><span class="line">    &#123;</span><br><span class="line">        tree1[i]+=val;</span><br><span class="line">        tree2[i]+=x*val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll i;</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( i = x ; i &gt; <span class="number">0</span> ;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=(x<span class="number">+1</span>)*tree1[i]-tree2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll  Q , i , A ,B , C;</span><br><span class="line">    string s;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; Q;</span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span> ;i &lt;= N ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">         cin &gt;&gt; a[i];</span><br><span class="line">         <span class="built_in">update</span>(i ,a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span> ; i &lt;= Q ; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; A &gt;&gt; B ;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">query</span> (B)- <span class="built_in">query</span>(A<span class="number">-1</span>)&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; A &gt;&gt; B &gt;&gt; C;</span><br><span class="line">            <span class="built_in">update</span>(A , C);</span><br><span class="line">            <span class="built_in">update</span>(B<span class="number">+1</span> ,-C );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>Petya and Array</title>
    <url>/2019/12/11/Petya-and-Array/</url>
    <content><![CDATA[<p>类似求逆序对个数的题目，需要离散化。</p>
<span id="more"></span>

<p><a href="http://codeforces.com/contest/1042/problem/D">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>问你有多少段区间满足a[l] + a[..] +a[r] &lt; t</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>实际上就是求sum[r] - sum[l] &lt; t ，我们可以遍历r，然后利用权值线段树求有多少个l满足sum[r] - t&lt; sum[l]。</p>
<p>需要注意的一点是，如果getid越界的话，就只是Update就行。</p>
<p>在POJ里没有判断越界也过了，结果CF上就过不了，数据真的强呀！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   ll sum;</span><br><span class="line">&#125;rt[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line">ll sum[maxn];</span><br><span class="line">ll a[maxn], b[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l,<span class="type">int</span> r, <span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(l == r &amp;&amp; l == pos)&#123;</span><br><span class="line">    rt[node].sum++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">if</span>(pos &lt;= mid) <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>, l, mid, pos);</span><br><span class="line">   <span class="keyword">else</span> <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, pos);</span><br><span class="line">   rt[node].sum = rt[node &lt;&lt; <span class="number">1</span>].sum + rt[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        <span class="keyword">return</span> rt[node].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid)&#123;</span><br><span class="line">        <span class="keyword">return</span> rt[node&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum + <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>, l, mid, pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sz;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getid</span><span class="params">(ll num)</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + sz + <span class="number">1</span>, num ) - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">        b[i] = sum[i];</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span> , b + n + <span class="number">1</span>);</span><br><span class="line">    sz = <span class="built_in">unique</span>(b + <span class="number">1</span>, b+ n + <span class="number">1</span>) - b - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, sz, <span class="built_in">getid</span>(sum[<span class="number">1</span>]));</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> Sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> num = sum[i] - m;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> kk = <span class="built_in">getid</span>(num + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(kk == sz + <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="built_in">getid</span>(sum[i]));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> num1 = <span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="built_in">getid</span>(num + <span class="number">1</span>));</span><br><span class="line">        <span class="comment">//cout &lt;&lt; num1 &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">        Sum += num1;</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="built_in">getid</span>(sum[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sum[i] &lt; m)Sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; Sum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>权值线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>Python定向爬取中国大学排名</title>
    <url>/2019/09/05/Python%E5%AE%9A%E5%90%91%E7%88%AC%E5%8F%96%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E6%8E%92%E5%90%8D/</url>
    <content><![CDATA[<span id="more"></span>

<p><strong>爬取中国大学排名官网的信息</strong></p>
<p>1.利用requests.get()函数定向爬取网页，然后返回text，即html文件</p>
<p>2.利用BeautifulSoup(html, ‘html.parser’)对html进行解析</p>
<p>3.对tbody的后辈节点tr进行查找，并且要保证查找到的是标签类型的后备节点。并将tr标签中的td标签进行查找，并将信息添加到ulist列表中</p>
<p>4.对ulist列表进行格式化输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import bs4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def gettext(url):</span><br><span class="line">    try:</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        return r.text</span><br><span class="line">    except:</span><br><span class="line">        return &quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def addulist(html, ulist):</span><br><span class="line">    soup = BeautifulSoup(html, &#x27;html.parser&#x27;)</span><br><span class="line">    for tr in soup.find(&#x27;tbody&#x27;).children:</span><br><span class="line">        if isinstance(tr,bs4.element.Tag):</span><br><span class="line">            tds = tr(&#x27;td&#x27;)</span><br><span class="line">            ulist.append([tds[0].string, tds[1].string, tds[2].string])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def printlist(ulist, num):</span><br><span class="line">    tplt = &quot;&#123;0:^10&#125;\t&#123;1:&#123;3&#125;^10&#125;\t&#123;2:^10&#125;&quot;</span><br><span class="line">    print(tplt.format(&quot;排名&quot;, &quot;大学&quot;, &quot;分数&quot;,chr(12288)))</span><br><span class="line">    for i in range(num):</span><br><span class="line">        u = ulist[i]</span><br><span class="line">        print(tplt.format(u[0], u[1], u[2],chr(12288)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    ulist = []</span><br><span class="line">    url = &#x27;http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html&#x27;</span><br><span class="line">    html = gettext(url)</span><br><span class="line">    addulist(html, ulist)</span><br><span class="line">    printlist(ulist, 20)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Resnet</title>
    <url>/2024/04/16/Resnet/</url>
    <content><![CDATA[<p>吴恩达深度学习第四课第二周作业</p>
<span id="more"></span>

<p>网络按照下图构建</p>
<p><img src="/resnet.png" alt="1713275526205"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">残差块构建</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Resdual</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,inchannel, outchannel,stride=<span class="number">1</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(in_channels=inchannel, out_channels=outchannel,kernel_size=<span class="number">3</span>,stride=stride,padding=<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.batchnorm1 = nn.BatchNorm2d(outchannel)</span><br><span class="line">        <span class="variable language_">self</span>.relu = nn.ReLU()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.conv2 = nn.Conv2d(in_channels=outchannel, out_channels=outchannel,kernel_size=<span class="number">3</span>,padding=<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.batchnorm2 = nn.BatchNorm2d(outchannel)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> inchannel != outchannel:</span><br><span class="line">            <span class="variable language_">self</span>.conv1x1 = nn.Conv2d(in_channels=inchannel,out_channels=outchannel,kernel_size=<span class="number">1</span>,stride=stride)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.conv1x1 = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        output1 = <span class="variable language_">self</span>.relu(<span class="variable language_">self</span>.batchnorm1(<span class="variable language_">self</span>.conv1(x)))</span><br><span class="line">        output2 = <span class="variable language_">self</span>.batchnorm2(<span class="variable language_">self</span>.conv2(output1))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.conv1x1:</span><br><span class="line">            x = <span class="variable language_">self</span>.conv1x1(x)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.relu(x + output2)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">残差网络构建</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> model.resdual <span class="keyword">import</span> Resdual</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Resnet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment">#conv1</span></span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">7</span>, stride=<span class="number">2</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">64</span>),</span><br><span class="line">            nn.ReLU()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">#conv2</span></span><br><span class="line">        <span class="variable language_">self</span>.conv2 = nn.Sequential(</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line">            Resdual(<span class="number">64</span>,<span class="number">64</span>),</span><br><span class="line">            Resdual(<span class="number">64</span>,<span class="number">64</span>),</span><br><span class="line">            Resdual(<span class="number">64</span>,<span class="number">64</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">#conv3</span></span><br><span class="line">        <span class="variable language_">self</span>.conv3 = nn.Sequential(</span><br><span class="line">            Resdual(<span class="number">64</span>,<span class="number">128</span>,stride=<span class="number">2</span>),</span><br><span class="line">            Resdual(<span class="number">128</span>,<span class="number">128</span>),</span><br><span class="line">            Resdual(<span class="number">128</span>, <span class="number">128</span>),</span><br><span class="line">            Resdual(<span class="number">128</span>, <span class="number">128</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">#conv4</span></span><br><span class="line">        <span class="variable language_">self</span>.conv4 = nn.Sequential(</span><br><span class="line">            Resdual(<span class="number">128</span>,<span class="number">256</span>,stride=<span class="number">2</span>),</span><br><span class="line">            Resdual(<span class="number">256</span>,<span class="number">256</span>),</span><br><span class="line">            Resdual(<span class="number">256</span>, <span class="number">256</span>),</span><br><span class="line">            Resdual(<span class="number">256</span>, <span class="number">256</span>),</span><br><span class="line">            Resdual(<span class="number">256</span>, <span class="number">256</span>),</span><br><span class="line">            Resdual(<span class="number">256</span>, <span class="number">256</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">#conv5</span></span><br><span class="line">        <span class="variable language_">self</span>.conv5 = nn.Sequential(</span><br><span class="line">            Resdual(<span class="number">256</span>,<span class="number">512</span>,stride=<span class="number">2</span>),</span><br><span class="line">            Resdual(<span class="number">512</span>,<span class="number">512</span>),</span><br><span class="line">            Resdual(<span class="number">512</span>, <span class="number">512</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.average_pool = nn.AdaptiveAvgPool2d(<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.flatten = nn.Flatten()</span><br><span class="line">        <span class="variable language_">self</span>.fc = nn.Linear(<span class="number">512</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.conv1(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.conv2(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.conv3(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.conv4(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.conv5(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.average_pool(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.flatten(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.fc(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># a = torch.ones((1000,3,64,64))</span></span><br><span class="line"><span class="comment"># model = Resnet()</span></span><br><span class="line"><span class="comment"># output = model(a)</span></span><br><span class="line"><span class="comment"># print(output.shape)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">自定义数据</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mydata</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,path</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        file = h5py.File(path,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> path == <span class="string">&#x27;datasets/test_signs.h5&#x27;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.x = np.array(file[<span class="string">&#x27;test_set_x&#x27;</span>])</span><br><span class="line">            <span class="variable language_">self</span>.y = np.array(file[<span class="string">&#x27;test_set_y&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.x = np.array(file[<span class="string">&#x27;train_set_x&#x27;</span>])</span><br><span class="line">            <span class="variable language_">self</span>.y = np.array(file[<span class="string">&#x27;train_set_y&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.x = <span class="variable language_">self</span>.x.astype(<span class="string">&#x27;float32&#x27;</span>)/<span class="number">255</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.x = torch.from_numpy(<span class="variable language_">self</span>.x)</span><br><span class="line">        <span class="variable language_">self</span>.y = torch.from_numpy(<span class="variable language_">self</span>.y)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.x = <span class="variable language_">self</span>.x.permute(<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.x[item], <span class="variable language_">self</span>.y[item]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.x.shape[<span class="number">0</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">主函数</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> Mydata</span><br><span class="line"><span class="keyword">from</span> model.resnet <span class="keyword">import</span> Resnet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">model, test_loader, <span class="built_in">len</span></span>):</span><br><span class="line">    acc = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> i, (imgs, labels ) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader):</span><br><span class="line">            imgs = imgs.to(device)</span><br><span class="line">            labels = labels.to(device)</span><br><span class="line">            output = model(imgs)</span><br><span class="line">            predict = output.argmax(<span class="number">1</span>)</span><br><span class="line">            acc += (predict == labels).<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test数据集上acc为&#123;&#125;&quot;</span>.<span class="built_in">format</span>(acc/<span class="built_in">len</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#加载数据</span></span><br><span class="line">    train_path = <span class="string">&quot;datasets/train_signs.h5&quot;</span></span><br><span class="line">    test_path = <span class="string">&quot;datasets/test_signs.h5&quot;</span></span><br><span class="line">    train_data = Mydata(train_path)</span><br><span class="line">    test_data = Mydata(test_path)</span><br><span class="line"></span><br><span class="line">    train_loader = DataLoader(train_data,batch_size=<span class="number">64</span>,shuffle=<span class="literal">True</span>)</span><br><span class="line">    test_loader = DataLoader(test_data, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    device = torch.device(<span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">    <span class="comment">#加载模型</span></span><br><span class="line">    model = Resnet()</span><br><span class="line">    model.to(device)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义loss以及优化器</span></span><br><span class="line">    loss_func = nn.CrossEntropyLoss()</span><br><span class="line">    loss_func.to(device)</span><br><span class="line"></span><br><span class="line">    optim = torch.optim.Adam(model.parameters(),lr=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">    epoch = <span class="number">50</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----------第&#123;&#125;轮次开始--------&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>))</span><br><span class="line">        loss_cnt = <span class="number">0</span></span><br><span class="line">        acc = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, (imgs, labels) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">            imgs = imgs.to(device)</span><br><span class="line">            labels = labels.to(device)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#64 * 6</span></span><br><span class="line">            output = model(imgs)</span><br><span class="line">            loss = loss_func(output, labels)</span><br><span class="line"></span><br><span class="line">            loss_cnt += loss</span><br><span class="line">            acc += (output.argmax(<span class="number">1</span>) == labels).<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">            optim.zero_grad()</span><br><span class="line">            loss.backward()</span><br><span class="line">            optim.step()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第&#123;&#125;轮次的loss为&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>, loss_cnt))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第&#123;&#125;轮次的acc为&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>, acc/<span class="built_in">len</span>(train_data)))</span><br><span class="line"></span><br><span class="line">    check(model, test_loader, <span class="built_in">len</span>(test_data))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
        <tag>resnet</tag>
      </tags>
  </entry>
  <entry>
    <title>SDNU 训练赛总结</title>
    <url>/2019/05/29/SDNU-%E8%AE%AD%E7%BB%83%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>SDNU 训练赛总结</p>
<span id="more"></span>

<p><a href="https://fastvj.rainng.com/contest/304413?tdsourcetag=s_pcqq_aiomsg#problem/A">ACM训练</a></p>
<h3 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>就是简单的排个序，输出第K大小的数字，同时将前K大的数字的标号输出来。因为文件WA的自闭，QWQ。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> index;</span><br><span class="line">   <span class="type">int</span> v;</span><br><span class="line">&#125;a[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.v &gt; b.v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,k;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">  <span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].v);</span><br><span class="line">        a[i].index = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>,cmp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[k].v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,a[i].index,i == k ?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>有N个人，他们分别有weight，beautiful, 现在让你挑选多个人，使得不超过总权重M的情况下，总的beautiful值最大。但是一些人可能是朋友，对于一个朋友组，要么选择不超过一个人，要么选择所有人。</p>
<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>我们先用并查集把属于一个朋友群的人放到一个集合里。然后一个集合一个集合的枚举。对于每个集合，也是分别枚举一个人的情况和所有人的情况。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="type">int</span> f[<span class="number">1010</span>], dp[<span class="number">2010</span>], w[<span class="number">2001</span>],b[<span class="number">2001</span>];</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != f[x])</span><br><span class="line">        f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">combine</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> fa = <span class="built_in">find</span>(x);</span><br><span class="line">    <span class="type">int</span> fb = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(fa != fb)</span><br><span class="line">        f[fa] = fb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m ,W, aa, bb, num;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;V[<span class="number">2001</span>];</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; W;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        f[i] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        cin &gt;&gt; w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; aa &gt;&gt; bb;</span><br><span class="line">        <span class="built_in">combine</span>(aa,bb);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        V[<span class="built_in">find</span>(i)].<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="built_in">find</span>(i))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = W; j &gt;= <span class="number">0</span> ; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> sum1 = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> sum2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; V[i].<span class="built_in">size</span>(); ++k)</span><br><span class="line">            &#123;</span><br><span class="line">                num = V[i][k];</span><br><span class="line">                sum1 += w[num];</span><br><span class="line">                sum2 += b[num];</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= w[num])</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[j] = <span class="built_in">max</span>(dp[j], dp[j - w[num]] + b[num]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= sum1)</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j - sum1] + sum2);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[W] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="C题"><a href="#C题" class="headerlink" title="C题"></a>C题</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给你一些钱币的组合总数，让你输出应该怎么组合。我们应该用1和2来进行组合即可。比如说输入314，那么如果钱币只有1和2的话，所达到的金额数应该是2 * n - 1.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cout &lt;&lt; <span class="number">2</span> * n - <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="D题"><a href="#D题" class="headerlink" title="D题"></a>D题</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>对于一个N * N的矩阵，他有N &#x2F; 2+1 个奇数，我们只需要合理的安排其中的位置，剩下的填上偶数就行了。每行每列以及对角线上的奇数的个数都应该是奇数个，因此最后我们构造的矩阵中间的菱形，也是正方形都是奇数，剩下的都是偶数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">50</span>][<span class="number">50</span>], n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> cx = n / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> cy = cx;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(cx - i) + <span class="built_in">abs</span>(cy - j) &lt; n / <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i][j] = cnt;</span><br><span class="line">                    cnt += <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                a[i][j] = tot;</span><br><span class="line">                tot += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,a[i][j],j == n ? <span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="E题"><a href="#E题" class="headerlink" title="E题"></a>E题</h3><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>题意中是一种递归的算法。但是我们可以直接模拟贪心思路。把所有的数字放到一个数组里，然后从大到小排序。我们分别取前1个数字的最大数(相当于总矩阵的最大值)，然后取前四个数字的最大值（相当于4个子矩阵的每个矩阵的最大值），然后是前16个….. 这样我们就不需要在构造出矩阵才能求最大值了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a[<span class="number">20000010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>,a + n + <span class="number">1</span>,cmp);</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum;</span><br><span class="line">    <span class="keyword">while</span>(k &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        k *= <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="F题"><a href="#F题" class="headerlink" title="F题"></a>F题</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给你三种topo图，然后数据之后，问你属于哪种topo.</p>
<h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>只要记录每个节点的度即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> vis[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, a, b;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span> ,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        vis[a]++;</span><br><span class="line">        vis[b]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span> , cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i] == <span class="number">1</span>)</span><br><span class="line">            cnt++;</span><br><span class="line">        <span class="keyword">if</span>(vis[i] == <span class="number">2</span>)</span><br><span class="line">            cnt1++;</span><br><span class="line">        <span class="keyword">if</span>(vis[i] == n - <span class="number">1</span>)</span><br><span class="line">            cnt2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">2</span> &amp;&amp; cnt1 == n - <span class="number">2</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;bus topology&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cnt1 == n)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;ring topology&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cnt == n - <span class="number">1</span> &amp;&amp; cnt2 == <span class="number">1</span>)</span><br><span class="line">        cout &lt;&lt;  <span class="string">&quot;star topology&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;unknown topology&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="G题"><a href="#G题" class="headerlink" title="G题"></a>G题</h3><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p>我们可以把总的花费时间求出来，然后看看这个总时间是否在一段区间内，在的话，最终的答案就是这个总时间。否则，答案是距离这个总时间最近的那个时间。在第11个样例错的，是没有考虑在还没有工作时间之前就已经完成任务的情况。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> l,r;</span><br><span class="line">&#125;b[<span class="number">2001</span>];</span><br><span class="line"><span class="type">int</span> a[<span class="number">1010</span>], c[<span class="number">2001</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.l != b.l)</span><br><span class="line">        <span class="keyword">return</span> a.l &lt; b.l;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.r &lt; b.r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; m ;</span><br><span class="line">    <span class="type">int</span> max1 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;b[i].l,&amp;b[i].r);</span><br><span class="line">        <span class="keyword">if</span>(max1 &lt; b[i].r)</span><br><span class="line">            max1 = b[i].r;</span><br><span class="line">        c[i - <span class="number">1</span>] = b[i].l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum &gt; max1)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; b[<span class="number">1</span>].l)            <span class="comment">//wrong 11 test</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; b[<span class="number">1</span>].l &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(b + <span class="number">1</span>, b + m + <span class="number">1</span>, cmp);</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(b[i].l &lt;= sum &amp;&amp; b[i].r &gt;= sum)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                cout &lt;&lt; sum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="type">int</span> d = <span class="built_in">lower_bound</span>(c , c + m , sum) - c ;</span><br><span class="line">           cout &lt;&lt; c[d] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="H题"><a href="#H题" class="headerlink" title="H题"></a>H题</h3><h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><p>本来想N*N的复杂度，发现不行，后来看这个是有序的，那就二分。用lower_bound函数比较简单一些。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> c,t;</span><br><span class="line">&#125;a[<span class="number">100010</span>];</span><br><span class="line"><span class="type">int</span> sum[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a[i].c,&amp;a[i].t);     <span class="comment">//c代表次数,t代表一首歌的时间</span></span><br><span class="line">    &#125;</span><br><span class="line">    sum[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + a[i].c * a[i].t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">        <span class="type">int</span> m = <span class="built_in">lower_bound</span>(sum + <span class="number">1</span>, sum + n + <span class="number">1</span>,k) - (sum + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(sum[m] == k)</span><br><span class="line">             cout &lt;&lt; m &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">             cout &lt;&lt; m + <span class="number">1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
  </entry>
  <entry>
    <title>ST算法解决RMQ问题</title>
    <url>/2019/05/31/ST%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3RMQ%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>ST算法解决RMQ问题。</p>
<span id="more"></span>

<p>  RMQ问题就是区间查询问题，以往的时候是用线段树来做，但是线段树的查询也只是简化到了O（logn）的复杂度，本文要介绍的ST算法，虽然说预处理达到了O（nlogn）的复杂度，但是查询只需要O（1）。ST算法本身是个DP解法。</p>
<h3 id="引例POJ-3264"><a href="#引例POJ-3264" class="headerlink" title="引例POJ  - 3264"></a>引例POJ  - 3264</h3><p><a href="http://poj.org/problem?id=3264">Balanced Lineup </a></p>
<h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给你一个数组，每次询问你某一段区间内的最大值和最小值的差值。</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>典型的一维RMQ问题。</p>
<p>设置$dp[i,j]$ 代表从第$i$个元素开始连续$2^j$个值的最大值，很明显有$dp[i,0] &#x3D; 0$.</p>
<p>为了求$f[i,j]$,我们把f[i,j]平均分成两段，每段的元素的个数为$2 ^ {j - 1}$, 所以第一段为 $i$ 到 $i + 2 ^{j -1}- 1$ ，下一段是$ i + 2 ^{j - 1}$ 到 $j$.</p>
<p>dp方程的状态转移方程就是$$dp[i][j] &#x3D; max(dp[i][j - 1], dp[i + (1 &lt;&lt; (j - 1))][j - 1]]$$</p>
<p>当我们查询的时候，设置$k &#x3D; log_2(r - l + 1)$,  返回$max(dp[l][k],dp[r - 2^k + 1][k])$</p>
<p>我们需要知道的是我们不怕括号内的两段空间有重复，只是怕可能会超出$l - r的界限$。</p>
<p>因此我们设定$2^k &lt;&#x3D; r - l + 1$ ,因为我们假设的是这个区间有$k$个元素，所以就会出来上面的$k$的表达式了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> dp1[<span class="number">50005</span>][<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">50005</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RMQ</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        dp[i][<span class="number">0</span>] = a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        dp1[i][<span class="number">0</span>] = a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">2</span>); ++j)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>)) &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j] = <span class="built_in">max</span>(dp[i][j - <span class="number">1</span>], dp[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">            dp1[i][j] = <span class="built_in">min</span>(dp1[i][j - <span class="number">1</span>], dp1[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="built_in">log</span>(r - l + <span class="number">1</span>) / <span class="built_in">log</span>(<span class="number">2</span>) ;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dp[l][k], dp[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="built_in">log</span>(r - l + <span class="number">1</span>) / <span class="built_in">log</span>(<span class="number">2</span>) ;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(dp1[l][k], dp1[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a[<span class="number">50005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, l, r;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">RMQ</span>(a,n);</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">            <span class="type">int</span> Max = <span class="built_in">query</span>(l,r);</span><br><span class="line">            <span class="type">int</span> Min = <span class="built_in">query1</span>(l, r);</span><br><span class="line">            cout &lt;&lt; Max - Min &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>ST算法</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA - 11082 Dinic 上下界最大流</title>
    <url>/2019/09/03/UVA-11082-Dinic-%E4%B8%8A%E4%B8%8B%E7%95%8C%E6%9C%80%E5%A4%A7%E6%B5%81/</url>
    <content><![CDATA[<p>这也能用最大流？？</p>
<span id="more"></span>

<p>好吧，其实我是知道它能用最大流的，否则我也不会千里迢迢来A它了，这是省赛选拔赛第一场的一道题目，比赛的时候没有人A，但是我觉得这个题目很不错，所以赛后就记住这是最大流类型的了，5个月之后，我终于把它A了。</p>
<p><a href="https://vjudge.net/problem/UVA-11082">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>告诉你一个矩阵前i行的</p>
]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>Dinic 最大流</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA - 11082 Dinic 上下界最大流</title>
    <url>/2019/09/03/UVA-11082-Dinic-%E6%9C%80%E5%A4%A7%E6%B5%81/</url>
    <content><![CDATA[<p>这也能用最大流？？</p>
<span id="more"></span>

<p>好吧，其实我是知道它能用最大流的，否则我也不会千里迢迢来A它了，这是省赛选拔赛第一场的一道题目，比赛的时候没有人A，但是我觉得这个题目很不错，所以赛后就记住这是最大流类型的了，5个月之后，我终于把它A了。</p>
<p><a href="https://vjudge.net/problem/UVA-11082">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>告诉你一个矩阵前i行的和，前i列的和，实际上就是告诉你每一行的和， 每列的和，然后让你构造这个矩阵。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用最大流来求，但是注意这个下界是1，因此需要先减1，最后再把对应答案加上1. 我们把每一行的和A[i]看成一个点，源点到这些点的权值为A[i]-m, 把每一列的和B[i]看成一个点，这些点到汇点的权值为B[i]-n， 行点到列点的权值为19，这样形成的图求最大流，最后我们输出反边对应的权值+1就是答案，因为反边记录了流体的情况。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> G[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> n, m, deep[<span class="number">501</span>];</span><br><span class="line"><span class="type">int</span> A[<span class="number">50</span>], B[<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="built_in">memset</span>(deep, <span class="number">0</span>, <span class="built_in">sizeof</span>(deep));</span><br><span class="line">    deep[s] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + m + <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(G[u][i] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> w = G[u][i];</span><br><span class="line">            <span class="keyword">if</span>(w &gt; <span class="number">0</span> &amp;&amp; deep[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                deep[i] = deep[u] + <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(deep[t] == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == n + m + <span class="number">1</span>) <span class="keyword">return</span> dis;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + m + <span class="number">1</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(G[s][i] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> w = G[s][i];</span><br><span class="line">        <span class="keyword">if</span>(w &gt; <span class="number">0</span> &amp;&amp; deep[i] == deep[s] + <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> d = <span class="built_in">dfs</span>(i, <span class="built_in">min</span>(w, dis));</span><br><span class="line">            <span class="keyword">if</span>(d &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                G[s][i] -= d;</span><br><span class="line">                G[i][s] += d;</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T, caser = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="built_in">memset</span>(G, <span class="number">0</span>, <span class="built_in">sizeof</span>(G));</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;A[i]);</span><br><span class="line">            A[i] -= sum;</span><br><span class="line">            sum += A[i];</span><br><span class="line">            G[<span class="number">0</span>][i] = A[i] - m;</span><br><span class="line">        &#125;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;B[i]);</span><br><span class="line">            B[i] -= sum;</span><br><span class="line">            sum += B[i];</span><br><span class="line">            G[i + n][n + m + <span class="number">1</span>] = B[i] - n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                G[i][j + n] = <span class="number">19</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">bfs</span>(<span class="number">0</span>, n + m + <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="type">int</span> d = <span class="built_in">dfs</span>(<span class="number">0</span>, inf))</span><br><span class="line">            &#123;</span><br><span class="line">                sum += d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Matrix &quot;</span> &lt;&lt; caser++ &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,G[j + n][i] + <span class="number">1</span> , j == m?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>Dinic 最大流</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA-816 BFS之从学会到放弃</title>
    <url>/2019/07/20/UVA-816-BFS%E4%B9%8B%E4%BB%8E%E5%AD%A6%E4%BC%9A%E5%88%B0%E6%94%BE%E5%BC%83/</url>
    <content><![CDATA[<p>一道经典的BFS题目，细节很多，以后有机会再做一遍。</p>
<span id="more"></span>

<p><a href="https://vjudge.net/problem/UVA-816">Abbott 的复仇</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>相比较普通的BFS，这道题不同的是，每个交叉路口处，从哪个方向来，它是有确定的去的方向的。我们需要记录一下从东边来，直走行不行， 或者从东边来，左拐弯行不行。这就是代码中的hasedge。同时walk函数很简洁，记录了从哪边来到哪边去的最终的坐标变化。  记录我的几个错误点： BFS中忘了加Q.push.  UVA中全局变量不能用y0，似乎以前师哥说过.  print函数没有返回参数的话就是void,不能用int,这点我RE了无数次，看来还是得规范点. 再就是路径输出值得学习，用了p数组记录前驱，最终就是不断往前直到初始点。相比较递归打印路径，这个方法不会引起栈溢出，同时也很方便。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x0,y0;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y,dir;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> dir[] = <span class="string">&quot;NESW&quot;</span>;</span><br><span class="line"><span class="type">char</span> run[] = <span class="string">&quot;FLR&quot;</span>;          <span class="comment">//F直走，L左拐弯，R右拐弯</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dir_id</span><span class="params">(<span class="type">char</span> c)</span>           <span class="comment">//将方向和运动方向总结成一个整数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strchr</span>(dir, c) - dir;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">run_id</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strchr</span>(run, c) - run;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dir1[] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dir2[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">walk</span><span class="params">(node u, <span class="type">int</span> turn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> dir = u.dir;</span><br><span class="line">    <span class="keyword">if</span>(turn == <span class="number">1</span>) dir = (dir + <span class="number">3</span>) % <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span>(turn == <span class="number">2</span>) dir = (dir + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> node&#123;u.x + dir1[dir], u.y + dir2[dir], dir&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  node p[<span class="number">10</span>][<span class="number">10</span>][<span class="number">10</span>];          <span class="comment">//储存父亲节点的信息，用来输出路径</span></span><br><span class="line">  <span class="type">int</span> d[<span class="number">10</span>][<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">  string s;</span><br><span class="line">  <span class="type">int</span> hasedge[<span class="number">10</span>][<span class="number">10</span>][<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(node u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;node&gt;V;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        V.<span class="built_in">push_back</span>(u);</span><br><span class="line">        <span class="keyword">if</span>(d[u.x][u.y][u.dir] == <span class="number">0</span>)  <span class="keyword">break</span>;</span><br><span class="line">        u = p[u.x][u.y][u.dir];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(V.<span class="built_in">begin</span>(), V.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sz = V.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span>(cnt != sz)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">min</span>(<span class="number">10</span>,sz); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; (%d,%d)&quot;</span>,V[cnt].x,V[cnt].y);</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span>(cnt == sz)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> y1,<span class="type">char</span> c, <span class="type">int</span> x2, <span class="type">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">memset</span>(d , <span class="number">-1</span>, <span class="built_in">sizeof</span>(d));   <span class="comment">//储存从源点到该点的最短距离.</span></span><br><span class="line">   <span class="type">int</span> num = <span class="built_in">dir_id</span>(c);</span><br><span class="line">   d[x0][y0][num] = <span class="number">0</span>;</span><br><span class="line">   d[x1][y1][num] = <span class="number">1</span>;</span><br><span class="line">   p[x1][y1][num] = node&#123;x0,y0,num&#125;;</span><br><span class="line">   queue&lt;node&gt;Q;</span><br><span class="line">   node a;</span><br><span class="line">   a.x = x1, a.y = y1, a.dir = num;</span><br><span class="line">   Q.<span class="built_in">push</span>(a);</span><br><span class="line">   <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">   &#123;</span><br><span class="line">       a = Q.<span class="built_in">front</span>();</span><br><span class="line">       Q.<span class="built_in">pop</span>();</span><br><span class="line">       <span class="keyword">if</span>(a.x == x2 &amp;&amp; a.y == y2)  &#123; <span class="built_in">print</span>(a); <span class="keyword">return</span> ;&#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)        <span class="comment">//是否可以进行0,1,2这三个转向</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span>(hasedge[a.x][a.y][a.dir][i])</span><br><span class="line">           &#123;</span><br><span class="line">               node b = <span class="built_in">walk</span>(a, i);</span><br><span class="line">               <span class="keyword">if</span>(d[b.x][b.y][b.dir] &lt; <span class="number">0</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   d[b.x][b.y][b.dir] = d[a.x][a.y][a.dir] + <span class="number">1</span>;</span><br><span class="line">                   p[b.x][b.y][b.dir] = a;                  <span class="comment">//设置d数组的原因在于记录第一次以这个方向到达这个点的踪迹，下一次再以相同的轨迹到达该点就不管用了</span></span><br><span class="line">                   Q.<span class="built_in">push</span>(b);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;  No Solution Possible&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1, s2;</span><br><span class="line">    <span class="type">int</span> a, b,x1,y1,x2,y2;</span><br><span class="line">    <span class="type">char</span> c;    <span class="comment">//c储存起点的出发方向</span></span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="string">&quot;END&quot;</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %c %d %d&quot;</span>,&amp;x1, &amp;y1, &amp;c, &amp;x2, &amp;y2);</span><br><span class="line">        x0 = x1, y0 = y1;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;N&#x27;</span>) &#123;x1--;&#125;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;S&#x27;</span>) &#123;x1++;&#125;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;W&#x27;</span>) &#123;y1--;&#125;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;E&#x27;</span>) &#123;y1++;&#125;</span><br><span class="line">        <span class="built_in">memset</span>(hasedge, <span class="number">0</span>, <span class="built_in">sizeof</span>(hasedge));</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(cin ,s1))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s1[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="type">int</span> num1 = s1[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="type">int</span> num2 = s1[<span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="function">stringstream <span class="title">ss</span><span class="params">(s1)</span></span>;</span><br><span class="line">            <span class="keyword">while</span>(ss &gt;&gt; s2)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">isalpha</span>(s2[<span class="number">0</span>]))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> num3 = <span class="built_in">dir_id</span>(s2[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; s<span class="number">2.</span><span class="built_in">size</span>(); ++i)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="type">int</span> num4 = <span class="built_in">run_id</span>(s2[i]);</span><br><span class="line">                        hasedge[num1][num2][num3][num4] = <span class="number">1</span>; <span class="comment">//代表可以从num3方向转向num4方向</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; s &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="built_in">bfs</span>(x1,y1,c,x2,y2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>UVALive 8519 贪心 + 线段树</title>
    <url>/2019/08/29/UVALive-8519-%E8%B4%AA%E5%BF%83-%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    <content><![CDATA[<p>线段树维护区间最小以及查询。</p>
<span id="more"></span>

<p><a href="https://vjudge.net/problem/UVALive-8519">链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>每场比赛有K个题目，题目的难度由数字来表示，而且难度必须是连续的，比如说1 2 3 4 5,然后告诉你每种难度的题目有多少个，现在让你安排最多的比赛场数。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>贪心的思路，从第一个难度的题目开始往后看，查询区间内最小值，把答案加上这个最小值，然后再把区间内的数字减去这个值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   ll Min;</span><br><span class="line">&#125;tr[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line">ll a[maxn],lazy[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[node] == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    lazy[node &lt;&lt; <span class="number">1</span>] += lazy[node];</span><br><span class="line">    lazy[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>] += lazy[node];</span><br><span class="line">    tr[node &lt;&lt; <span class="number">1</span>].Min +=  lazy[node];</span><br><span class="line">    tr[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>].Min += lazy[node];</span><br><span class="line">    lazy[node] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[node].Min = a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    tr[node].Min = <span class="built_in">min</span>(tr[node &lt;&lt; <span class="number">1</span>].Min, tr[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>].Min);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ul, <span class="type">int</span> ur,<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ul &gt; r || ur &lt; l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(ul &lt;= l &amp;&amp; ur &gt;= r)&#123;</span><br><span class="line">        tr[node].Min += value;</span><br><span class="line">        lazy[node] += value;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(node);</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>, l, mid ,ul, ur, value);</span><br><span class="line">    <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, ul, ur, value);</span><br><span class="line">    tr[node].Min = <span class="built_in">min</span>(tr[node &lt;&lt; <span class="number">1</span>].Min, tr[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>].Min);</span><br><span class="line">&#125;</span><br><span class="line">ll Min;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql &gt; r || qr &lt; l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql &lt;= l &amp;&amp; qr &gt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">          Min = <span class="built_in">min</span>(Min,tr[node].Min);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">pushdown</span>(node);</span><br><span class="line">    <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>, l, mid , ql, qr);</span><br><span class="line">    <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T,n,k;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(lazy, <span class="number">0</span>, <span class="built_in">sizeof</span>(lazy));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        ll cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - k + <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            Min = inf;</span><br><span class="line">            <span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,i, i + k - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(Min &gt; <span class="number">0</span> &amp;&amp; Min != inf)</span><br><span class="line">            &#123;</span><br><span class="line">                cnt += Min;</span><br><span class="line">                <span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,n, i, i + k - <span class="number">1</span>, -Min);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; cnt &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>ZOJ 3631 超大背包 + 折半搜索</title>
    <url>/2019/08/15/ZOJ-3631-%E8%B6%85%E5%A4%A7%E8%83%8C%E5%8C%85-%E6%8A%98%E5%8D%8A%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<p>将$2^k$种状态分开进行折半搜索，我怎么就想不到？</p>
<span id="more"></span>

<p><a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=4777">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>教练有一些钱，你也有一些钱，告诉你每天必须花费的钱数，你在一天当中要么只花自己的钱，要么只花教练的钱，问你最多能花教练多少钱。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>实际上对于每天都有花和不花两种状态，这样的话就是$2^{30}$种状态，肯定不行，我们可以先枚举前一半的状态，存一下然后排序，然后枚举后一半状态的时候，对前一半的状态进行折半搜索。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Close ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Debug cout &lt;&lt; <span class="string">&quot;-----------------&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span></span><br><span class="line">ll c[<span class="number">1</span> &lt;&lt;(<span class="number">15</span>)];</span><br><span class="line"></span><br><span class="line">ll a[<span class="number">31</span>];</span><br><span class="line"><span class="type">int</span> tot ;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n, m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>,&amp;n,&amp;m) != EOF)&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = n / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; mid); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; mid; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((i &gt;&gt; j) &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += a[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        c[++tot] = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(c + <span class="number">1</span>,c + tot + <span class="number">1</span>);</span><br><span class="line">    ll Max = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; (n - mid)); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">//  cout &lt;&lt;&quot;i: &quot; &lt;&lt; i &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - mid; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">       <span class="comment">//     cout &lt;&lt; &quot;j: &quot; &lt;&lt; j &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">            <span class="keyword">if</span>((i &gt;&gt; j) &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += a[j + mid];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum &lt;= m)&#123;</span><br><span class="line">        <span class="type">int</span> M = <span class="built_in">lower_bound</span>(c + <span class="number">1</span>, c + tot + <span class="number">1</span>, m - sum) - c;</span><br><span class="line">        <span class="keyword">if</span>(c[M] + sum == m) Max = <span class="built_in">max</span>(Max, c[M] + sum);</span><br><span class="line">        <span class="keyword">if</span>(c[M] + sum &gt; m || M == tot + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(c[M - <span class="number">1</span>] + sum &lt;= m)</span><br><span class="line">                Max = <span class="built_in">max</span>(Max, c[M - <span class="number">1</span>] + sum);</span><br><span class="line">        &#125;</span><br><span class="line">         Max = <span class="built_in">max</span>(Max, sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; Max &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>背包问题</tag>
      </tags>
  </entry>
  <entry>
    <title>ZOJ 4124 Median Floyd传递闭包</title>
    <url>/2019/09/04/ZOJ-4124-Median-Floyd%E4%BC%A0%E9%80%92%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<p>位运算的Floyd</p>
<span id="more"></span>

<p><a href="https://zoj.pintia.cn/problem-sets/91827364500/problems/91827370519">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你M个关系，A,B代表第A个数严格大于第B个数，现在这样形成的关系是否有可能存在中位数，可能的话就输出1.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们需要知道的是由于关系的复杂性很可能存在多个可能的中位数。我们想一下如果这个数字不是中位数的话，那么小于或者大于它的数字一定多余等于n&#x2F;2个，那么我们应该怎么判断两个数字之间的关系呢，利用Floyd我们就可以求出他们每两点之间的关系。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> M[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T,n,m,a,b;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(M, <span class="number">0</span> , <span class="built_in">sizeof</span>(M));</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        M[a][b] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                M[i][j] |= M[i][k] &amp; M[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(M[i][j] == <span class="number">1</span> &amp;&amp; M[j][i] == <span class="number">1</span>)</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> in = <span class="number">0</span>, out = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(M[i][j] == <span class="number">1</span>)</span><br><span class="line">                out++;</span><br><span class="line">            <span class="keyword">if</span>(M[j][i] == <span class="number">1</span>)</span><br><span class="line">                in++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(in &gt; n/<span class="number">2</span> || out &gt; n/<span class="number">2</span>)</span><br><span class="line">            ans[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> ans[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            cout &lt;&lt;<span class="number">0</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; ans[i] ;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>Floyd</tag>
      </tags>
  </entry>
  <entry>
    <title>hdu 3333 离散化 + 莫队</title>
    <url>/2019/07/31/hdu-3333-%E7%A6%BB%E6%95%A3%E5%8C%96-%E8%8E%AB%E9%98%9F/</url>
    <content><![CDATA[<p>兴高采烈地准备巩固一下莫队算法，没想到又碰到了离散化，兴高采烈的交上去，没想到因为一个符号，WA了20分钟。</p>
<span id="more"></span>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3333">题目链接</a></p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>让你求每段区间内不同数字的和。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>莫队算法正是处理此类问题的。但是我们需要先离散化，不同于以往的题目,可以用sum[x]代表数字x出现的次数，在这里x可以达到1e10,因此需要先把原数组排序去重之后，用a[]代表原来a[]中的值在去重后数组中的位置，这样我们就可以看sum[a[x]]来代表a[x这个位置上的数字个个数了。如果可以就加上或减去b[a[x]]。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,id,answer;</span><br><span class="line">&#125;q[maxn];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> cnt;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[maxn];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> col[maxn];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> col[a.l] == col[b.l]?(a.r &lt; b.r):(a.l &lt; b.l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum[maxn],b[maxn],num[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> add)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[a[x]] += add;</span><br><span class="line">    <span class="keyword">if</span>(sum[a[x]] == <span class="number">1</span> &amp;&amp; add == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt += b[a[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum[a[x]] == <span class="number">0</span> &amp;&amp; add == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt -= b[a[x]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,n,Q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">            col[i] = i / (<span class="type">int</span>)<span class="built_in">sqrt</span>(i) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> tot = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>) -(b + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ;i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>,b + tot + <span class="number">1</span> ,a[i]) - b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Q);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;q[i].l ,&amp;q[i].r);</span><br><span class="line">            q[i].id = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(q + <span class="number">1</span>, q + Q + <span class="number">1</span>,cmp);</span><br><span class="line">        <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="built_in">sizeof</span>(sum));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; q[i].l)&#123;<span class="built_in">update</span>(l, <span class="number">-1</span>);l++;&#125;</span><br><span class="line">            <span class="keyword">while</span>(l &gt; q[i].l)&#123;<span class="built_in">update</span>(l - <span class="number">1</span>, <span class="number">1</span>);l--;&#125;</span><br><span class="line">            <span class="keyword">while</span>(r &lt; q[i].r)&#123;<span class="built_in">update</span>(r + <span class="number">1</span>, <span class="number">1</span>);r++;&#125;</span><br><span class="line">            <span class="keyword">while</span>(r &gt; q[i].r)&#123;<span class="built_in">update</span>(r, <span class="number">-1</span>); r--;&#125;</span><br><span class="line">            num[q[i].id] = cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,num[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>莫队算法</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo从win迁移到mac</title>
    <url>/2024/07/27/hexo%E4%BB%8Ewin%E8%BF%81%E7%A7%BB%E5%88%B0mac/</url>
    <content><![CDATA[<span id="more"></span>

<h4 id="1-在mac上安装git和node"><a href="#1-在mac上安装git和node" class="headerlink" title="1. 在mac上安装git和node"></a>1. 在mac上安装git和node</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果之前下载了xcode的命令行工具 git就已经下载好了</span><br><span class="line">命令行工具的地址 /library/developer/commandlinetools</span><br><span class="line">可以通过which git查看git命令的全局地址</span><br><span class="line">下载完毕 通过git -v查看版本, git config --global --list查看全局配置</span><br><span class="line">设置个人信息(要与github信息对应)</span><br><span class="line">git config --global user.name &quot;yuntengzhiyu&quot;</span><br><span class="line">git config --global user.email &quot;shenmafuyun213@163.com&quot;</span><br><span class="line"></span><br><span class="line">可以通过homebrew下载node</span><br><span class="line">brew install node</span><br><span class="line">which node 查看地址在/opt/homebrew/bin下</span><br><span class="line">下载完node 最好配置一下node镜像源 一般是淘宝源</span><br><span class="line">查看node配置 npm config list</span><br></pre></td></tr></table></figure>

<h4 id="2-在mac上安装hexo"><a href="#2-在mac上安装hexo" class="headerlink" title="2.在mac上安装hexo"></a>2.在mac上安装hexo</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">全局安装hexo</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">创建一个hexo-blog文件夹</span><br><span class="line">cd ~/documents</span><br><span class="line">mkdir hexo-blog</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">使用hexo s 在本地查看是否成功部署</span><br></pre></td></tr></table></figure>

<h4 id="3-配置密钥"><a href="#3-配置密钥" class="headerlink" title="3.配置密钥"></a>3.配置密钥</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">如果没有这个文件 说明没有密钥</span><br><span class="line">ssh-keygen -t rsa -C &quot;example@example.com&quot;</span><br><span class="line">生成密钥后 到~/.ssh下面的.pub文件找到里面的公钥，并将其粘贴到github-&gt;settings-&gt;SSH and GPG keys的new SSH Key中</span><br><span class="line">在终端中检查是否配置成功 ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<h4 id="4-迁移博客"><a href="#4-迁移博客" class="headerlink" title="4.迁移博客"></a>4.迁移博客</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将win上的_config.yml, scaffolds, source, themes, public以及json文件复制过来,也可能还有其他的配置文件</span><br><span class="line">额外还需要下载两个包</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>

<h4 id="5-更新并上传"><a href="#5-更新并上传" class="headerlink" title="5.更新并上传"></a>5.更新并上传</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>学习记录</tag>
      </tags>
  </entry>
  <entry>
    <title>kaggle竞赛-叶子分类</title>
    <url>/2024/04/24/kaggle%E7%AB%9E%E8%B5%9B-%E5%8F%B6%E5%AD%90%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<span id="more"></span>

<p><a href="https://www.kaggle.com/competitions/classify-leaves/">竞赛地址</a></p>
<p>最终正确率89左右 ,以后继续改进一下</p>
<h4 id="导入相关并读取数据"><a href="#导入相关并读取数据" class="headerlink" title="导入相关并读取数据"></a>导入相关并读取数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader, TensorDataset</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms,models</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">train_file = <span class="string">&#x27;./classify-leaves/train.csv&#x27;</span></span><br><span class="line">test_file = <span class="string">&#x27;./classify-leaves/test.csv&#x27;</span></span><br><span class="line">img_file = <span class="string">&#x27;./classify-leaves/&#x27;</span></span><br><span class="line">train_df = pd.read_csv(train_file)</span><br></pre></td></tr></table></figure>

<h4 id="将树叶的类别由字符串转换为数字"><a href="#将树叶的类别由字符串转换为数字" class="headerlink" title="将树叶的类别由字符串转换为数字"></a>将树叶的类别由字符串转换为数字</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意一定要sort一下,以确保每次运行的结果都是唯一的。因为set的结果不唯一</span></span><br><span class="line"><span class="comment">#也可以用train_df[&#x27;label&#x27;].unique()</span></span><br><span class="line">class_list = <span class="built_in">sorted</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(train_df[<span class="string">&#x27;label&#x27;</span>])))</span><br><span class="line">num_to_class = <span class="built_in">dict</span>(<span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(class_list)), class_list))</span><br><span class="line">class_to_num = &#123;k:v <span class="keyword">for</span> v,k <span class="keyword">in</span> num_to_class.items()&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义dataset"><a href="#自定义dataset" class="headerlink" title="自定义dataset"></a>自定义dataset</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mydata</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, file_path, img_file, mode = <span class="string">&#x27;train&#x27;</span>, train_weight = <span class="number">0.8</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.img_file = img_file</span><br><span class="line">        data = pd.read_csv(file_path)</span><br><span class="line">        <span class="variable language_">self</span>.mode = mode</span><br><span class="line">        <span class="keyword">if</span> mode == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.<span class="built_in">len</span> = <span class="built_in">int</span>(<span class="built_in">len</span>(data) * train_weight)</span><br><span class="line">            <span class="variable language_">self</span>.features = np.asarray(data.iloc[<span class="number">0</span>:<span class="variable language_">self</span>.<span class="built_in">len</span>,<span class="number">0</span>])</span><br><span class="line">            <span class="variable language_">self</span>.labels = np.asarray(data.iloc[<span class="number">0</span>:<span class="variable language_">self</span>.<span class="built_in">len</span>,<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">elif</span> mode == <span class="string">&#x27;valid&#x27;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.pos = <span class="built_in">int</span>(<span class="built_in">len</span>(data) * (train_weight))</span><br><span class="line">            <span class="variable language_">self</span>.features = np.asarray(data.iloc[<span class="variable language_">self</span>.pos:,<span class="number">0</span>])</span><br><span class="line">            <span class="variable language_">self</span>.labels = np.asarray(data.iloc[<span class="variable language_">self</span>.pos:,<span class="number">1</span>])</span><br><span class="line">            <span class="variable language_">self</span>.<span class="built_in">len</span> = <span class="variable language_">self</span>.features.shape[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.<span class="built_in">len</span> = <span class="built_in">len</span>(data)</span><br><span class="line">            <span class="variable language_">self</span>.features = np.asarray(data.iloc[:,<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        img = Image.<span class="built_in">open</span>(<span class="variable language_">self</span>.img_file + <span class="variable language_">self</span>.features[index])</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.mode == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">            trans = transforms.Compose([</span><br><span class="line">                transforms.Resize((<span class="number">224</span>,<span class="number">224</span>)),</span><br><span class="line">                transforms.RandomHorizontalFlip(p=<span class="number">0.5</span>),</span><br><span class="line">                transforms.ToTensor()</span><br><span class="line">            ])</span><br><span class="line">            img = trans(img)</span><br><span class="line">            label = class_to_num[<span class="variable language_">self</span>.labels[index]]</span><br><span class="line">            <span class="keyword">return</span> img, label</span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.mode == <span class="string">&#x27;valid&#x27;</span>:</span><br><span class="line">            trans = transforms.ToTensor()</span><br><span class="line">            img = trans(img)</span><br><span class="line">            label = class_to_num[<span class="variable language_">self</span>.labels[index]]</span><br><span class="line">            <span class="keyword">return</span> img, label</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            trans = transforms.ToTensor()</span><br><span class="line">            img = trans(img)</span><br><span class="line">            <span class="keyword">return</span> img</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.<span class="built_in">len</span></span><br><span class="line">            </span><br></pre></td></tr></table></figure>

<h4 id="定义dataloder"><a href="#定义dataloder" class="headerlink" title="定义dataloder"></a>定义dataloder</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data = Mydata(train_file, img_file, <span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">valid_data = Mydata(train_file, img_file , <span class="string">&#x27;valid&#x27;</span>)</span><br><span class="line">test_data = Mydata(test_file, img_file, <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">train_iter = DataLoader(train_data, batch_size=batch_size, shuffle=<span class="literal">True</span>)</span><br><span class="line">valid_iter = DataLoader(valid_data, batch_size=batch_size, shuffle=<span class="literal">True</span>)</span><br><span class="line">test_iter = DataLoader(test_data, batch_size=batch_size, shuffle=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#X需要是float32类型，不能是double。 y需要是int64(long)类型 </span></span><br><span class="line">X,y = <span class="built_in">next</span>(<span class="built_in">iter</span>(train_iter))</span><br><span class="line">X.dtype, y.dtype</span><br></pre></td></tr></table></figure>

<h4 id="网络模型及超参数"><a href="#网络模型及超参数" class="headerlink" title="网络模型及超参数"></a>网络模型及超参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_net</span>():</span><br><span class="line">    net = models.resnet34(pretrained=<span class="literal">True</span>)</span><br><span class="line">    net.fc = nn.Linear(<span class="number">512</span>, <span class="built_in">len</span>(class_list))</span><br><span class="line">    <span class="keyword">return</span> net</span><br><span class="line"><span class="comment">#学习率调低一些</span></span><br><span class="line">learning_rate = <span class="number">3e-4</span></span><br><span class="line">weight_decay = <span class="number">1e-3</span></span><br><span class="line">num_epochs = <span class="number">50</span></span><br></pre></td></tr></table></figure>

<h4 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">device = torch.device(<span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">net = get_net()</span><br><span class="line">net = net.to(device)</span><br><span class="line"></span><br><span class="line">loss_func = nn.CrossEntropyLoss()</span><br><span class="line">loss_func = loss_func.to(device)</span><br><span class="line"></span><br><span class="line">optimizer = torch.optim.Adam(net.parameters(), lr=learning_rate,weight_decay=weight_decay)</span><br><span class="line">best_acc = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----------第&#123;&#125;轮次---------&#x27;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line">    net.train()</span><br><span class="line">    train_ls = []</span><br><span class="line">    train_acc = []</span><br><span class="line">    <span class="keyword">for</span> (X,y) <span class="keyword">in</span> train_iter:</span><br><span class="line">        X = X.to(device)</span><br><span class="line">        y = y.to(device)</span><br><span class="line">        y_hat = net(X)</span><br><span class="line">        loss = loss_func(y_hat, y) </span><br><span class="line">        acc = (y_hat.argmax(dim=<span class="number">1</span>) == y).<span class="built_in">sum</span>() / <span class="built_in">len</span>(y)</span><br><span class="line">        </span><br><span class="line">        train_ls.append(loss)</span><br><span class="line">        train_acc.append(acc)</span><br><span class="line">        </span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        </span><br><span class="line">    acc = <span class="built_in">sum</span>(train_acc) / <span class="built_in">len</span>(train_acc)</span><br><span class="line">    loss = <span class="built_in">sum</span>(train_ls) / <span class="built_in">len</span>(train_ls)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[train <span class="subst">&#123;epoch+<span class="number">1</span>:3d&#125;</span> / <span class="subst">&#123;num_epochs:3d&#125;</span>] acc = <span class="subst">&#123;acc:<span class="number">.3</span>f&#125;</span>, loss = <span class="subst">&#123;loss:<span class="number">.5</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    net.<span class="built_in">eval</span>()</span><br><span class="line">    valid_ls = []</span><br><span class="line">    valid_acc = []</span><br><span class="line">    <span class="keyword">for</span> (X,y) <span class="keyword">in</span> valid_iter:</span><br><span class="line">        X = X.to(device)</span><br><span class="line">        y = y.to(device)</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            y_hat = net(X)</span><br><span class="line">        loss = loss_func(y_hat, y)</span><br><span class="line">        acc = (y_hat.argmax(dim=<span class="number">1</span>) == y).<span class="built_in">sum</span>() / <span class="built_in">len</span>(y)</span><br><span class="line">        </span><br><span class="line">        valid_ls.append(loss)</span><br><span class="line">        valid_acc.append(acc)</span><br><span class="line">    acc = <span class="built_in">sum</span>(valid_acc) / <span class="built_in">len</span>(valid_acc)</span><br><span class="line">    loss = <span class="built_in">sum</span>(valid_ls) / <span class="built_in">len</span>(valid_ls)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[ Valid | <span class="subst">&#123;epoch + <span class="number">1</span>:3d&#125;</span>/<span class="subst">&#123;num_epochs:3d&#125;</span> ] loss = <span class="subst">&#123;loss:<span class="number">.5</span>f&#125;</span>, acc = <span class="subst">&#123;acc:<span class="number">.5</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> acc &gt; best_acc:</span><br><span class="line">        best_acc = acc</span><br><span class="line">        torch.save(net.state_dict(), <span class="string">&#x27;net.pth&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第&#123;&#125;轮次保存了模型&#x27;</span>.<span class="built_in">format</span>(epoch+<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<h4 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net = get_net()</span><br><span class="line">net.to(device)</span><br><span class="line">net.load_state_dict(torch.load(<span class="string">&#x27;../working/net.pth&#x27;</span>))</span><br><span class="line">net.<span class="built_in">eval</span>()</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    pre = []</span><br><span class="line">    <span class="keyword">for</span> X <span class="keyword">in</span> test_iter:</span><br><span class="line">        X = X.to(device)</span><br><span class="line">        y_hat = net(X)</span><br><span class="line">        pre.extend(y_hat.argmax(<span class="number">1</span>).cpu().numpy().tolist())</span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pre:</span><br><span class="line">    ans.append(num_to_class[i])</span><br><span class="line"></span><br><span class="line">test_data = pd.read_csv(test_file)</span><br><span class="line">test_data[<span class="string">&#x27;label&#x27;</span>] = pd.Series(ans)</span><br><span class="line">submission = pd.concat([test_data[<span class="string">&#x27;image&#x27;</span>], test_data[<span class="string">&#x27;label&#x27;</span>]], axis=<span class="number">1</span>)</span><br><span class="line">submission.to_csv(<span class="string">&#x27;submission.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将Image转换为np,注意输出维度的变化,224*224*3</span></span><br><span class="line">arr = np.array(Imgae.<span class="built_in">open</span>(<span class="string">&#x27;.jpg&#x27;</span>))</span><br><span class="line">arr.shape       </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
        <tag>kaggle</tag>
      </tags>
  </entry>
  <entry>
    <title>kaggle竞赛-预测房价</title>
    <url>/2024/04/24/kaggle%E7%AB%9E%E8%B5%9B-%E9%A2%84%E6%B5%8B%E6%88%BF%E4%BB%B7/</url>
    <content><![CDATA[<span id="more"></span>

<p><a href="https://www.kaggle.com/competitions/california-house-prices/">预测房价</a></p>
<h4 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">train_file = <span class="string">&#x27;train.csv&#x27;</span></span><br><span class="line">test_file = <span class="string">&#x27;test.csv&#x27;</span></span><br><span class="line">train_df = pd.read_csv(train_file)</span><br><span class="line">test_df = pd.read_csv(test_file)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#train_df.head(3)</span></span><br><span class="line"><span class="comment">#train_df.shape, test_df.shape</span></span><br><span class="line"><span class="comment">#[i for i in train_df.columns if i not in test_df.columns]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#丢掉前几列，然后合并</span></span><br><span class="line">all_features = pd.concat([train_df.iloc[:,<span class="number">4</span>:],test_df.iloc[:,<span class="number">3</span>:]],axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment">#all_features.shape</span></span><br><span class="line"><span class="comment">#all_features.head(3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#all_features.dtypes  </span></span><br><span class="line"><span class="comment">#all_features.dtypes.unique()</span></span><br><span class="line">numeric_index = all_features.dtypes[all_features.dtypes != <span class="string">&#x27;object&#x27;</span>].index</span><br><span class="line"><span class="comment">#list(numeric_index)</span></span><br><span class="line">all_features[numeric_index] = all_features[numeric_index].apply(<span class="keyword">lambda</span> x: (x-x.mean())/x.std())</span><br><span class="line">all_features[numeric_index] = all_features[numeric_index].fillna(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#miss_values=all_features.isnull().sum()       #series类型,查看每列有多少个空值</span></span><br><span class="line"><span class="comment">#miss_values[miss_values&gt;0]</span></span><br><span class="line"></span><br><span class="line">all_features=all_features.fillna(method=<span class="string">&#x27;bfill&#x27;</span>,axis=<span class="number">0</span>).fillna(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#all_features.dtypes.unique()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看one-hot编码的个数</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> all_features.dtypes[all_features.dtypes == <span class="string">&#x27;object&#x27;</span>].index:</span><br><span class="line">    <span class="comment">#print(type(all_features[index].unique()))          #ndarray</span></span><br><span class="line">    <span class="built_in">print</span>(index.ljust(<span class="number">20</span>), <span class="built_in">len</span>(all_features[index].unique()))</span><br><span class="line">   </span><br><span class="line"><span class="comment">#添加编码少的两列</span></span><br><span class="line">features = <span class="built_in">list</span>(numeric_index)</span><br><span class="line">features.extend([<span class="string">&#x27;Type&#x27;</span>,<span class="string">&#x27;Bedrooms&#x27;</span>])</span><br><span class="line">all_features = all_features[features]</span><br><span class="line">all_features.shape</span><br><span class="line"></span><br><span class="line"><span class="comment">#one-hot</span></span><br><span class="line">all_features = pd.get_dummies(all_features, dummy_na=<span class="literal">True</span>)</span><br><span class="line">all_features *=<span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#df转化为tensor</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">train_num = train_df.shape[<span class="number">0</span>]</span><br><span class="line">train_features = all_features.iloc[<span class="number">0</span>:train_num,:]</span><br><span class="line">train_labels = train_df[<span class="string">&#x27;Sold Price&#x27;</span>]</span><br><span class="line">test_features = all_features.iloc[train_num:,:]</span><br><span class="line"></span><br><span class="line"><span class="comment">#转换为tensor</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">train_num = train_df.shape[<span class="number">0</span>]</span><br><span class="line">train_features = all_features.iloc[<span class="number">0</span>:train_num,:]</span><br><span class="line">train_labels = train_df[<span class="string">&#x27;Sold Price&#x27;</span>]</span><br><span class="line">test_features = all_features.iloc[train_num:,:]</span><br><span class="line"></span><br><span class="line">train_features = torch.tensor(train_features.values, dtype=torch.float32)</span><br><span class="line">test_features = torch.tensor(test_features.values, dtype=torch.float32)</span><br><span class="line">train_labels = torch.tensor(train_labels.values.reshape(-<span class="number">1</span>,<span class="number">1</span>), dtype=torch.float32)</span><br><span class="line"><span class="built_in">print</span>(train_features.shape)</span><br><span class="line"><span class="built_in">print</span>(train_labels.shape)</span><br><span class="line"><span class="built_in">print</span>(test_features.shape)</span><br></pre></td></tr></table></figure>

<h4 id="模型定义与训练"><a href="#模型定义与训练" class="headerlink" title="模型定义与训练"></a>模型定义与训练</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义模型</span></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">device = torch.device(<span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">loss = nn.MSELoss()</span><br><span class="line">loss = loss.to(device)</span><br><span class="line">in_features = train_features.shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_net</span>():</span><br><span class="line">    net = nn.Sequential(nn.Linear(in_features, <span class="number">256</span>), nn.ReLU(),nn.Linear(<span class="number">256</span>,<span class="number">1</span>))</span><br><span class="line">    net = net.to(device)</span><br><span class="line">    <span class="keyword">return</span> net</span><br><span class="line"></span><br><span class="line"><span class="comment">#均方rmse误差</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_rmse</span>(<span class="params">net, features, labels</span>):</span><br><span class="line">    y_hat = torch.clamp(net(features), <span class="number">1</span>, <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>))</span><br><span class="line">    out = torch.sqrt(loss(torch.log(y_hat), torch.log(labels)))</span><br><span class="line">    <span class="keyword">return</span> out.item()</span><br><span class="line"></span><br><span class="line"><span class="comment">#训练</span></span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">net, train_features, train_labels, test_features, test_labels, num_epochs, learning_rate, weight_decay, batch_size</span>):</span><br><span class="line">    train_ls, test_ls = [],[]</span><br><span class="line">    train_iter = d2l.load_array((train_features, train_labels), batch_size)</span><br><span class="line">    optimizer = torch.optim.Adam(net.parameters(), lr=learning_rate, weight_decay=weight_decay)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">        <span class="keyword">for</span> (X,y) <span class="keyword">in</span> train_iter:</span><br><span class="line">            X = X.to(device)</span><br><span class="line">            y = y.to(device)</span><br><span class="line"></span><br><span class="line">            y_hat = net(X)</span><br><span class="line">            l = loss(y_hat, y)</span><br><span class="line">            </span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            l.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">        train_features = train_features.to(device)</span><br><span class="line">        train_labels = train_labels.to(device)</span><br><span class="line">        train_ls.append(log_rmse(net, train_features, train_labels))</span><br><span class="line">        <span class="keyword">if</span> test_labels <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            test_features = test_features.to(device)</span><br><span class="line">            test_labels = test_labels.to(device)</span><br><span class="line">            test_ls.append(log_rmse(net , test_features, test_labels))</span><br><span class="line">    <span class="keyword">return</span> train_ls, test_ls</span><br><span class="line"></span><br><span class="line"><span class="comment">#k折交叉验证</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_k_fold_data</span>(<span class="params">k, i, X, y</span>):</span><br><span class="line">    size = X.shape[<span class="number">0</span>] // k</span><br><span class="line">    X_train , y_train = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        idx = <span class="built_in">slice</span>(j*size,(j+<span class="number">1</span>)*size)</span><br><span class="line">        X_part = X[idx]</span><br><span class="line">        y_part = y[idx]</span><br><span class="line">        <span class="keyword">if</span> i == j:</span><br><span class="line">            X_valid = X_part</span><br><span class="line">            y_valid = y_part</span><br><span class="line">        <span class="keyword">elif</span> X_train <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            X_train, y_train = X_part, y_part</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            X_train = torch.cat([X_train,X_part],<span class="number">0</span>)</span><br><span class="line">            y_train = torch.cat([y_train,y_part],<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> X_train,y_train,X_valid,y_valid</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">k_fold</span>(<span class="params">k, X_train, y_train, num_epochs, learning_rate, weight_decay, batch_size</span>):</span><br><span class="line">    train_sum , valid_sum = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        data = get_k_fold_data(k,i,X_train,y_train)</span><br><span class="line">        net = get_net()</span><br><span class="line">        train_ls, valid_ls = train(net, *data, num_epochs, learning_rate, weight_decay, batch_size)</span><br><span class="line">        train_sum += train_ls[-<span class="number">1</span>]</span><br><span class="line">        valid_sum += valid_ls[-<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;fold <span class="subst">&#123;i+<span class="number">1</span>&#125;</span>,train log rmse<span class="subst">&#123;<span class="built_in">float</span>(train_ls[-<span class="number">1</span>]):f&#125;</span>,&#x27;</span> <span class="string">f&#x27;valid log rmse <span class="subst">&#123;<span class="built_in">float</span>(valid_ls[-<span class="number">1</span>]):f&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> trian_sum/k, valid_sum/k</span><br><span class="line"></span><br><span class="line">k, num_epochs, lr , weight_decay, batch_size=<span class="number">5</span>,<span class="number">100</span>,<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">128</span></span><br><span class="line">train_l , valid_l = k_fold(k, train_features, train_labels, num_epochs, lr, weight_decay, batch_size)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;k&#125;</span>折验证， 平均训练log rmse:<span class="subst">&#123;<span class="built_in">float</span>(trian_l):f&#125;</span>,&#x27;</span> <span class="string">f&#x27;平均验证log rmse<span class="subst">&#123;<span class="built_in">float</span>(valid_l):f&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#训练并预测</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_and_pred</span>(<span class="params">train_features, test_features, train_labels , test_data, num_epochs,lr, weight_decay, batch_size</span>):</span><br><span class="line">    net = get_net()</span><br><span class="line">    train_ls, _ = train(net, train_features, train_labels, <span class="literal">None</span>, <span class="literal">None</span>, num_epochs, lr, weight_decay, batch_size)</span><br><span class="line"><span class="comment">#     d2l.plot(np.arange(1,num_epochs+1),[train_ls], xlabel=&#x27;epoch&#x27;,ylabel=&#x27;log rmse&#x27;, xlim[1,num_epochs], yscale=&#x27;log&#x27;)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;trian log rmse <span class="subst">&#123;<span class="built_in">float</span>(train_ls[-<span class="number">1</span>]):f&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#网络用于测试集</span></span><br><span class="line">    test_features = test_features.to(device)</span><br><span class="line">    out = net(test_features)</span><br><span class="line">    out = out.cpu()</span><br><span class="line">    preds = out.detach().numpy()</span><br><span class="line">    test_data[<span class="string">&#x27;Sold Price&#x27;</span>] = pd.Series(preds[:,<span class="number">0</span>])</span><br><span class="line">    submission = pd.concat([test_data[<span class="string">&#x27;Id&#x27;</span>], test_data[<span class="string">&#x27;Sold Price&#x27;</span>]],axis=<span class="number">1</span>)</span><br><span class="line">    submission.to_csv(<span class="string">&#x27;submission.csv&#x27;</span>,index=<span class="literal">False</span>)</span><br><span class="line">train_and_pred(train_features, test_features, train_labels, test_df, num_epochs, lr, weight_decay, batch_size)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
        <tag>kaggle</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令</title>
    <url>/2024/04/16/linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>linux学习记录</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls 查看子目录</span><br><span class="line">ls /</span><br><span class="line">cd 切换目录</span><br><span class="line">pwd 查看当前目录</span><br><span class="line"></span><br><span class="line">修改hostname</span><br><span class="line">cd /etc</span><br><span class="line">vim hostname</span><br><span class="line"></span><br><span class="line">~代表当前登录用户的目录</span><br><span class="line">/是总的主目录</span><br><span class="line"></span><br><span class="line">passwd root</span><br><span class="line">为root用户修改密码</span><br><span class="line"></span><br><span class="line">/etc下的passwd文件存储了所有用户信息</span><br><span class="line"></span><br><span class="line">//添加fuyun用户</span><br><span class="line">useradd fuyun</span><br><span class="line">passwd fuyun </span><br><span class="line">修改fuyun的密码</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>matplotlib学习笔记</title>
    <url>/2024/04/29/matplotlib%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>matplotlib学习笔记</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#中文字体</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line">my_font = font_manager.FontProperties(fname=<span class="string">&quot;/System/Library/Fonts/PingFang.ttc&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#折线图</span></span><br><span class="line">x = np.arange(<span class="number">120</span>)</span><br><span class="line">y = [random.uniform(<span class="number">20</span>,<span class="number">35</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>)]</span><br><span class="line">plt.plot(x,y,color=<span class="string">&#x27;green&#x27;</span>,linestyle=<span class="string">&#x27;-&#x27;</span>,linewidth=<span class="number">2</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line">_xticks = [<span class="string">f&quot;10点<span class="subst">&#123;i&#125;</span>分&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> x <span class="keyword">if</span> i &lt; <span class="number">60</span>]</span><br><span class="line">_xticks.extend([<span class="string">f&#x27;11点<span class="subst">&#123;i-<span class="number">60</span>&#125;</span>分&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> x <span class="keyword">if</span> i &gt;= <span class="number">60</span>])</span><br><span class="line">plt.xticks(x[::<span class="number">5</span>],_xticks[::<span class="number">5</span>],rotation=<span class="number">90</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;时间&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;temperature&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#多个折线图</span></span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="built_in">len</span>(x)), x, label=<span class="string">&#x27;self&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>,color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="built_in">len</span>(x)), y, label=<span class="string">&#x27;others&#x27;</span>, linestyle=<span class="string">&#x27;-&#x27;</span>, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存图片</span></span><br><span class="line">plt.savefig(<span class="string">&#x27;./sig.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#网格</span></span><br><span class="line">plt.grid(alpha=<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#散点图</span></span><br><span class="line">y_3 = [<span class="number">11</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">21</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">20</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">22</span>,<span class="number">22</span>,<span class="number">23</span>]</span><br><span class="line">y_10 = [<span class="number">26</span>,<span class="number">26</span>,<span class="number">28</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">19</span>,<span class="number">18</span>,<span class="number">20</span>,<span class="number">20</span>,<span class="number">19</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">17</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">20</span>,<span class="number">22</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">x_3 = <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">32</span>)</span><br><span class="line">x_10 = <span class="built_in">range</span>(<span class="number">52</span>,<span class="number">83</span>)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>))</span><br><span class="line">plt.scatter(x_3, y_3, label=<span class="string">&#x27;3月&#x27;</span>,color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.scatter(x_10, y_10, label=<span class="string">&#x27;10月&#x27;</span>,color=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"></span><br><span class="line">x_ = <span class="built_in">list</span>(x_3) + <span class="built_in">list</span>(x_10)</span><br><span class="line">xticks_ = [<span class="string">f&#x27;3月<span class="subst">&#123;i&#125;</span>号&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> x_3]</span><br><span class="line">xticks_.extend([<span class="string">f&#x27;10月<span class="subst">&#123;i-<span class="number">51</span>&#125;</span>号&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> x_10])</span><br><span class="line">plt.xticks(x_[::<span class="number">3</span>],xticks_[::<span class="number">3</span>], rotation=<span class="number">45</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;xlabel&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#条形图</span></span><br><span class="line">a = [<span class="string">&quot;猩球崛起3：终极之战&quot;</span>,<span class="string">&quot;敦刻尔克&quot;</span>,<span class="string">&quot;蜘蛛侠：英雄归来&quot;</span>,<span class="string">&quot;战狼2&quot;</span>]</span><br><span class="line">b_16 = [<span class="number">15746</span>,<span class="number">312</span>,<span class="number">4497</span>,<span class="number">319</span>]</span><br><span class="line">b_15 = [<span class="number">12357</span>,<span class="number">156</span>,<span class="number">2045</span>,<span class="number">168</span>]</span><br><span class="line">b_14 = [<span class="number">2358</span>,<span class="number">399</span>,<span class="number">2358</span>,<span class="number">362</span>]</span><br><span class="line"></span><br><span class="line">_x = <span class="built_in">range</span>(<span class="built_in">len</span>(a))</span><br><span class="line">_bar_width=<span class="number">0.2</span></span><br><span class="line">plt.bar(_x, b_14, label=<span class="string">&#x27;9月14日&#x27;</span>,color=<span class="string">&#x27;r&#x27;</span>,width=_bar_width)</span><br><span class="line">plt.bar([i + _bar_width <span class="keyword">for</span> i <span class="keyword">in</span> _x], b_15, label=<span class="string">&#x27;15&#x27;</span>,color=<span class="string">&#x27;b&#x27;</span>, width=_bar_width )</span><br><span class="line">plt.bar([i + <span class="number">2</span> * _bar_width <span class="keyword">for</span> i <span class="keyword">in</span> _x], b_16, label=<span class="string">&#x27;16&#x27;</span>,color=<span class="string">&#x27;g&#x27;</span>,width=_bar_width)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;电影&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;票房&#x27;</span>)</span><br><span class="line">plt.xticks(_x,a)</span><br><span class="line">plt.legend() </span><br><span class="line"></span><br><span class="line"><span class="comment">#直方图</span></span><br><span class="line">a=[<span class="number">131</span>,  <span class="number">98</span>, <span class="number">125</span>, <span class="number">131</span>, <span class="number">124</span>, <span class="number">139</span>, <span class="number">131</span>, <span class="number">117</span>, <span class="number">128</span>, <span class="number">108</span>, <span class="number">135</span>, <span class="number">138</span>, <span class="number">131</span>, <span class="number">102</span>, <span class="number">107</span>, <span class="number">114</span>, <span class="number">119</span>, <span class="number">128</span>, <span class="number">121</span>, <span class="number">142</span>, <span class="number">127</span>, <span class="number">130</span>, <span class="number">124</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">115</span>,  <span class="number">99</span>, <span class="number">136</span>, <span class="number">126</span>, <span class="number">134</span>,  <span class="number">95</span>, <span class="number">138</span>, <span class="number">117</span>, <span class="number">111</span>,<span class="number">78</span>, <span class="number">132</span>, <span class="number">124</span>, <span class="number">113</span>, <span class="number">150</span>, <span class="number">110</span>, <span class="number">117</span>,  <span class="number">86</span>,  <span class="number">95</span>, <span class="number">144</span>, <span class="number">105</span>, <span class="number">126</span>, <span class="number">130</span>,<span class="number">126</span>, <span class="number">130</span>, <span class="number">126</span>, <span class="number">116</span>, <span class="number">123</span>, <span class="number">106</span>, <span class="number">112</span>, <span class="number">138</span>, <span class="number">123</span>,  <span class="number">86</span>, <span class="number">101</span>,  <span class="number">99</span>, <span class="number">136</span>,<span class="number">123</span>, <span class="number">117</span>, <span class="number">119</span>, <span class="number">105</span>, <span class="number">137</span>, <span class="number">123</span>, <span class="number">128</span>, <span class="number">125</span>, <span class="number">104</span>, <span class="number">109</span>, <span class="number">134</span>, <span class="number">125</span>, <span class="number">127</span>,<span class="number">105</span>, <span class="number">120</span>, <span class="number">107</span>, <span class="number">129</span>, <span class="number">116</span>, <span class="number">108</span>, <span class="number">132</span>, <span class="number">103</span>, <span class="number">136</span>, <span class="number">118</span>, <span class="number">102</span>, <span class="number">120</span>, <span class="number">114</span>,<span class="number">105</span>, <span class="number">115</span>, <span class="number">132</span>, <span class="number">145</span>, <span class="number">119</span>, <span class="number">121</span>, <span class="number">112</span>, <span class="number">139</span>, <span class="number">125</span>, <span class="number">138</span>, <span class="number">109</span>, <span class="number">132</span>, <span class="number">134</span>,<span class="number">156</span>, <span class="number">106</span>, <span class="number">117</span>, <span class="number">127</span>, <span class="number">144</span>, <span class="number">139</span>, <span class="number">139</span>, <span class="number">119</span>, <span class="number">140</span>,  <span class="number">83</span>, <span class="number">110</span>, <span class="number">102</span>,<span class="number">123</span>,<span class="number">107</span>, <span class="number">143</span>, <span class="number">115</span>, <span class="number">136</span>, <span class="number">118</span>, <span class="number">139</span>, <span class="number">123</span>, <span class="number">112</span>, <span class="number">118</span>, <span class="number">125</span>, <span class="number">109</span>, <span class="number">119</span>, <span class="number">133</span>,<span class="number">112</span>, <span class="number">114</span>, <span class="number">122</span>, <span class="number">109</span>, <span class="number">106</span>, <span class="number">123</span>, <span class="number">116</span>, <span class="number">131</span>, <span class="number">127</span>, <span class="number">115</span>, <span class="number">118</span>, <span class="number">112</span>, <span class="number">135</span>,<span class="number">115</span>, <span class="number">146</span>, <span class="number">137</span>, <span class="number">116</span>, <span class="number">103</span>, <span class="number">144</span>,  <span class="number">83</span>, <span class="number">123</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">154</span>,<span class="number">136</span>, <span class="number">100</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">106</span>, <span class="number">129</span>, <span class="number">126</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">141</span>,<span class="number">120</span>, <span class="number">117</span>, <span class="number">106</span>, <span class="number">149</span>, <span class="number">122</span>, <span class="number">122</span>, <span class="number">110</span>, <span class="number">118</span>, <span class="number">127</span>, <span class="number">121</span>, <span class="number">114</span>, <span class="number">125</span>, <span class="number">126</span>,<span class="number">114</span>, <span class="number">140</span>, <span class="number">103</span>, <span class="number">130</span>, <span class="number">141</span>, <span class="number">117</span>, <span class="number">106</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">114</span>, <span class="number">133</span>, <span class="number">137</span>,  <span class="number">92</span>,<span class="number">121</span>, <span class="number">112</span>, <span class="number">146</span>,  <span class="number">97</span>, <span class="number">137</span>, <span class="number">105</span>,  <span class="number">98</span>, <span class="number">117</span>, <span class="number">112</span>,  <span class="number">81</span>,  <span class="number">97</span>, <span class="number">139</span>, <span class="number">113</span>,<span class="number">134</span>, <span class="number">106</span>, <span class="number">144</span>, <span class="number">110</span>, <span class="number">137</span>, <span class="number">137</span>, <span class="number">111</span>, <span class="number">104</span>, <span class="number">117</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">101</span>, <span class="number">110</span>,<span class="number">105</span>, <span class="number">129</span>, <span class="number">137</span>, <span class="number">112</span>, <span class="number">120</span>, <span class="number">113</span>, <span class="number">133</span>, <span class="number">112</span>,  <span class="number">83</span>,  <span class="number">94</span>, <span class="number">146</span>, <span class="number">133</span>, <span class="number">101</span>,<span class="number">131</span>, <span class="number">116</span>, <span class="number">111</span>,  <span class="number">84</span>, <span class="number">137</span>, <span class="number">115</span>, <span class="number">122</span>, <span class="number">106</span>, <span class="number">144</span>, <span class="number">109</span>, <span class="number">123</span>, <span class="number">116</span>, <span class="number">111</span>,<span class="number">111</span>, <span class="number">133</span>, <span class="number">150</span>]</span><br><span class="line">bin_width = <span class="number">3</span></span><br><span class="line">num_bins = <span class="built_in">int</span>((<span class="built_in">max</span>(a)-<span class="built_in">min</span>(a))/bin_width)</span><br><span class="line">plt.hist(a, num_bins)</span><br><span class="line"></span><br><span class="line">plt.xticks(<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">min</span>(a),<span class="built_in">max</span>(a)))[::bin_width],rotation=<span class="number">90</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>, alpha=<span class="number">0.5</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h4 id="深度学习中的可视化"><a href="#深度学习中的可视化" class="headerlink" title="深度学习中的可视化"></a>深度学习中的可视化</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在第一个valid batch中选出前几张图片展示</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">im_convert</span>(<span class="params">tensor</span>):</span><br><span class="line">    image = tensor.to(<span class="string">&#x27;cpu&#x27;</span>).clone().detach()</span><br><span class="line">    image = image.numpy().squeeze()</span><br><span class="line">    image = image.transpose(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">    image = image.clip(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">20</span>,<span class="number">12</span>))</span><br><span class="line">columns = <span class="number">4</span></span><br><span class="line">rows = <span class="number">2</span></span><br><span class="line">X,y = <span class="built_in">next</span>(<span class="built_in">iter</span>(valid_iter))</span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(columns*rows):</span><br><span class="line">    ax = fig.add_subplot(rows, columns, idx+<span class="number">1</span>,xticks=[],yticks=[])</span><br><span class="line"><span class="comment">#     ax.set_xticks([])</span></span><br><span class="line"><span class="comment">#     ax.set_yticks([])</span></span><br><span class="line">    ax.set_title(num_to_class[<span class="built_in">int</span>(y[idx])])</span><br><span class="line">    plt.imshow(im_convert(X[idx]))</span><br><span class="line">plt.show()  </span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#统计每个label出现的次数并绘图</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">barw</span>(<span class="params">ax</span>):</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> ax.patches:</span><br><span class="line">        val = p.get_width()</span><br><span class="line">        x = p.get_x() + p.get_width()</span><br><span class="line">        y = p.get_y() + p.get_height()</span><br><span class="line">        ax.annotate(<span class="built_in">round</span>(val, <span class="number">2</span>),(x, y))</span><br><span class="line">        </span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">30</span>))</span><br><span class="line">ax0=sns.countplot(y=labels_df[<span class="string">&#x27;label&#x27;</span>],order=labels_df[<span class="string">&#x27;label&#x27;</span>].value_counts().index)</span><br><span class="line">barw(ax0)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>my first blog</title>
    <url>/2019/04/27/my-first-blog/</url>
    <content><![CDATA[<span id="more"></span>

<p>差不多弄博客一个星期了，大致的轮廓终于有点样子了。弄完了看看感觉配置挺简单的，其实真的是挺不容易，各种细节都需要处理一下。<!--more-->剩下的就是专注的写博客了，相比较CSDN感觉这里更加私人化，每天学一些东西，同时有一些生活的感悟都会在这里记录下来，大概以后回首往事会收货很多吧。</p>
<img src="/2019/04/27/my-first-blog/11.jpg" class="">





]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>numpy和pandas笔记</title>
    <url>/2024/04/24/numpy%E5%92%8Cpandas%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>numpy, pandas学习记录</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用numpy读取csv或者txt文件</span></span><br><span class="line"><span class="comment">#unpack按列读取，一般不用</span></span><br><span class="line">file = np.loadtxt(file_path, delimiter=<span class="string">&#x27;,&#x27;</span>,dtype=<span class="built_in">float</span>,skiprows=<span class="number">5</span>,unpack=<span class="literal">True</span>)</span><br><span class="line">file.astype(<span class="string">&#x27;float32&#x27;</span>)     <span class="comment">#转换类型</span></span><br><span class="line"><span class="comment">#转变维度</span></span><br><span class="line">a=a.transpose((<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment">#三元运算</span></span><br><span class="line">arr = np.random.randn(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">np.where(arr &gt;<span class="number">0</span> , <span class="number">2</span>, -<span class="number">2</span>)</span><br><span class="line"><span class="comment">#ndarray上的方法</span></span><br><span class="line">np.<span class="built_in">sum</span>(a, axis=<span class="number">0</span>)</span><br><span class="line">a.<span class="built_in">sum</span>(axis=<span class="number">0</span>)</span><br><span class="line">a.cumsum(axis=<span class="number">0</span>)  <span class="comment">#累积和</span></span><br><span class="line">a.cumprod(axis=<span class="number">0</span>)</span><br><span class="line">a.sort(axis=<span class="number">1</span>), np.sort(a, axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#去重并排序</span></span><br><span class="line">name = [<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>]</span><br><span class="line"><span class="built_in">sorted</span>(<span class="built_in">set</span>(name))</span><br><span class="line">np.unique(name)         </span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#series是一维，dataframe是二维 dataframe的某一列是series类型</span></span><br><span class="line"><span class="comment">#创建series,通过ndarray,list, 字典等创建</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">t1 = pd.Series(np.arange(<span class="number">10</span>),index=<span class="built_in">list</span>(string.ascii_uppercase[:<span class="number">10</span>]))</span><br><span class="line">t2 = pd.Series(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;xiaoming&#x27;</span>&#125;)</span><br><span class="line">t3 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="comment">#读取series的第一二三行</span></span><br><span class="line">t1[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line">t1[[<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]]</span><br><span class="line"><span class="comment">#查看index, 可以转化为列表</span></span><br><span class="line">t1.index   </span><br><span class="line"><span class="comment">#查看values, 就是将series转化为一维的ndarray</span></span><br><span class="line">t1.values</span><br><span class="line"><span class="comment">#去重</span></span><br><span class="line">series.unique()</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过dict创建dataframe</span></span><br><span class="line">data = &#123;<span class="string">&#x27;state&#x27;</span>: [<span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Ohio&#x27;</span>, <span class="string">&#x27;Nevada&#x27;</span>, <span class="string">&#x27;Nevada&#x27;</span>, <span class="string">&#x27;Nevada&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;year&#x27;</span>: [<span class="number">2000</span>, <span class="number">2001</span>, <span class="number">2002</span>, <span class="number">2001</span>, <span class="number">2002</span>, <span class="number">2003</span>],</span><br><span class="line">        <span class="string">&#x27;pop&#x27;</span>: [<span class="number">1.5</span>, <span class="number">1.7</span>, <span class="number">3.6</span>, <span class="number">2.4</span>, <span class="number">2.9</span>, <span class="number">3.2</span>]&#125;</span><br><span class="line">frame = pd.DataFrame(data, columns=[<span class="string">&#x27;year&#x27;</span>,<span class="string">&#x27;pop&#x27;</span>,<span class="string">&#x27;state&#x27;</span>],index=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">frame[<span class="string">&#x27;year&#x27;</span>].name</span><br><span class="line">frame.loc[<span class="number">1</span>]  <span class="comment">#loc根据索引</span></span><br><span class="line"><span class="keyword">del</span> frame[<span class="string">&#x27;pop&#x27;</span>]</span><br><span class="line"><span class="comment">#根据索引重新排列,默认是index，即重排行</span></span><br><span class="line">df = df.reindex([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>])  </span><br><span class="line">df = df.reindex(columns=[], fill_values=<span class="number">0</span>)</span><br><span class="line"><span class="comment">#根据索引重新排列， 空值前向值填充</span></span><br><span class="line">obj3 = pd.Series([<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;purple&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>], index=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line">obj3.reindex(np.arange(<span class="number">5</span>),method=<span class="string">&#x27;ffill&#x27;</span>)</span><br><span class="line"><span class="comment">#删除dataframe的行 []里是行索引</span></span><br><span class="line">df = df.drop([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="comment">#删除列</span></span><br><span class="line">df = df.drop([<span class="string">&#x27;&#x27;</span>], axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#检索</span></span><br><span class="line">df[df[<span class="string">&#x27;three&#x27;</span>] &gt; <span class="number">5</span>]</span><br><span class="line">df.loc[[<span class="string">&#x27;row_index&#x27;</span>],[<span class="string">&#x27;col_index&#x27;</span>]]</span><br><span class="line"><span class="comment">#排序</span></span><br><span class="line">df.sort_index()</span><br><span class="line">series.sort_values()</span><br><span class="line">df.sort_index(axis=<span class="number">1</span>) <span class="comment">#根据列索引排序</span></span><br><span class="line">df.sort_values(by=[<span class="string">&#x27;col1&#x27;</span>,<span class="string">&#x27;col2&#x27;</span>])    <span class="comment">#类似结构体排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#datafram的属性</span></span><br><span class="line">df.shape</span><br><span class="line">df.dtypes <span class="comment">#列数据类型</span></span><br><span class="line">df.ndim   <span class="comment">#维度</span></span><br><span class="line">df.index  <span class="comment">#行索引</span></span><br><span class="line">df.columns <span class="comment">#列索引</span></span><br><span class="line">df.values   <span class="comment">#转化为ndarray</span></span><br><span class="line">df.head(<span class="number">3</span>)   <span class="comment">#前三行</span></span><br><span class="line">df.tail(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取csv</span></span><br><span class="line">df=pd.read_csv(<span class="string">&#x27;.csv&#x27;</span>)</span><br><span class="line"><span class="comment">#读取dataframe的某一行 series类型</span></span><br><span class="line">df.iloc[<span class="number">1</span>,:]</span><br><span class="line"><span class="comment">#填充nan</span></span><br><span class="line">df.fillna(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#dataframe某一列的中位数</span></span><br><span class="line">df[<span class="string">&quot;list_index&quot;</span>].median()</span><br><span class="line"><span class="comment">#dataframe的某一列, series类型</span></span><br><span class="line">data[<span class="string">&#x27;Title&#x27;</span>]</span><br><span class="line">data.Title</span><br><span class="line"><span class="comment">#apply,默认axis=0,在列上运算</span></span><br><span class="line">df.apply(<span class="keyword">lambda</span> x: (x - x.mean())/x.std())  <span class="comment">#x是一个向量</span></span><br><span class="line"><span class="comment">#one-hot编码</span></span><br><span class="line">df = pd.get_dummies(df, dummy_na=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#concat函数</span></span><br><span class="line">c=pd.concat([a,b],axis=<span class="number">1</span>)  a，b是series或者dataframe类型</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#其他</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x : x*x , [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>numpy</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>python知识记录</title>
    <url>/2019/04/29/python%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>python 中列表是可变的，而字符串和元组不能。</p>
<span id="more"></span>

<p>接下来介绍几个有关List的函数。</p>
<ul>
<li>list.append(x)     把x添加到表尾</li>
<li>list.insert(pos,x)    把x 添加到list的pos位置</li>
<li>list.remove(x)     删除list中值为x的元素</li>
<li>list.pop()          删除列表最后一个元素</li>
<li>list.clear()         清空列表 </li>
<li>list.index(x)     返回list 中第一个值为x 的索引</li>
<li>list.count(x)     返回x 在list 中的次数</li>
<li>list.sort()         对list中的元素进行排序</li>
<li>list.reverse()     倒排list</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]   <span class="meta"># a 为一个列表</span></span><br><span class="line">a.<span class="built_in">append</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a.<span class="built_in">insert</span>(<span class="number">2</span>,<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a.<span class="built_in">remove</span>(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">pop</span>())</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">index</span>(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">count</span>(<span class="number">4</span>))</span><br><span class="line">a.<span class="built_in">reverse</span>()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">del a[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))</span><br><span class="line">a.<span class="built_in">clear</span>()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 把列表当做栈使用</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a.<span class="built_in">append</span>(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a.<span class="built_in">pop</span>()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>接下来介绍几个set的有关内容</p>
<p>set 是一组Key的集合，但是不能重复。因此常用作数学意义上的操作</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">s1 = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">s2 = <span class="built_in">set</span>([<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(s1 &amp; s2)</span><br><span class="line"><span class="built_in">print</span>(s1 | s2)</span><br><span class="line">s<span class="number">1.</span><span class="built_in">add</span>(<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">s<span class="number">1.</span><span class="built_in">remove</span>(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure>



<p>字典是另一种可变容器模型，可存任意类型的对象。</p>
<p>接下来是dict字典的介绍：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">stu = &#123;</span><br><span class="line">    <span class="string">&#x27;num1&#x27;</span> : <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;num2&#x27;</span> : <span class="string">&#x27;Lucy&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;num3&#x27;</span> : <span class="string">&#x27;Sam&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(stu)</span><br><span class="line"></span><br><span class="line"># 把列表中的值作为字典的key,生成一个字典：</span><br><span class="line">name = [<span class="string">&#x27;ma&#x27;</span>,<span class="string">&#x27;yun&#x27;</span>,<span class="string">&#x27;fei&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(dict.<span class="built_in">fromkeys</span>(name))</span><br><span class="line"><span class="built_in">print</span>(dict.<span class="built_in">fromkeys</span>(name,<span class="number">25</span>))  # 字典序生成</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取key 对应的值</span><br><span class="line"><span class="built_in">print</span>(stu[<span class="string">&#x27;num1&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(stu.<span class="built_in">get</span>(<span class="string">&#x27;num1&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># items  返回键值对组成元素的列表</span></span><br><span class="line"><span class="built_in">print</span>(stu.<span class="built_in">items</span>())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 删除Key对应的元素</span><br><span class="line">stu.<span class="built_in">pop</span>(<span class="string">&#x27;num2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(stu)</span><br><span class="line"></span><br><span class="line">#添加键-值对 到字典</span><br><span class="line">stu.<span class="built_in">update</span>(&#123;<span class="string">&#x27;num4&#x27;</span>:<span class="number">22</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(stu)</span><br><span class="line">    </span><br><span class="line">#修改字典中的值</span><br><span class="line">stu[<span class="string">&#x27;num4&#x27;</span>] = <span class="string">&#x27;nnn&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(stu)</span><br><span class="line"></span><br><span class="line"># 删除字典元素</span><br><span class="line">del stu[<span class="string">&#x27;num4&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(stu)</span><br><span class="line">    </span><br><span class="line"> #字典中的内置函数</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(stu))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(stu))  # 返回输入的变量的类型</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>query SPOJ 莫队离线||在线主席树</title>
    <url>/2019/07/31/query-SPOJ-%E8%8E%AB%E9%98%9F%E7%A6%BB%E7%BA%BF-%E5%9C%A8%E7%BA%BF%E4%B8%BB%E5%B8%AD%E6%A0%91/</url>
    <content><![CDATA[<p>区间问题，很快就想到莫队，原来还能用主席树做，奇妙。</p>
<span id="more"></span>

<p><a href="https://vjudge.net/problem/SPOJ-DQUERY">题目链接</a></p>
<h1 id="莫队"><a href="#莫队" class="headerlink" title="莫队"></a>莫队</h1><p>莫队算法就不说了，有点含量的就是update函数，注意的是当一个数字增加到个数为1，我们计数++，当一个数字减少到个数为0，计数–。还有update函数，要用void，int会超时</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> l, r, id, answer;</span><br><span class="line">&#125;q[<span class="number">200005</span>];</span><br><span class="line"><span class="type">int</span> col[<span class="number">50005</span>],sum[<span class="number">1000005</span>],cnt,num[<span class="number">1000005</span>];;</span><br><span class="line"><span class="type">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> col[a.l] == col[b.l]? (a.r &lt; b.r) :(a.l &lt; b.l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> add)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[a[x]] += add;</span><br><span class="line">    <span class="keyword">if</span>(sum[a[x]] == <span class="number">1</span> &amp;&amp; add == <span class="number">1</span>) cnt++;</span><br><span class="line">    <span class="keyword">if</span>(sum[a[x]] == <span class="number">0</span> &amp;&amp; add == <span class="number">-1</span>) cnt--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, Q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        col[i] = i / (<span class="type">int</span>)<span class="built_in">sqrt</span>(n) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;q[i].l,&amp;q[i].r);</span><br><span class="line">        q[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + Q + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; q[i].l)&#123;<span class="built_in">update</span>(l,<span class="number">-1</span>) ; l++;&#125;</span><br><span class="line">        <span class="keyword">while</span>(l &gt; q[i].l)&#123;l--; <span class="built_in">update</span>(l, <span class="number">1</span>);&#125;</span><br><span class="line">        <span class="keyword">while</span>(r &lt; q[i].r)&#123; r++; <span class="built_in">update</span>(r , <span class="number">1</span>);&#125;</span><br><span class="line">        <span class="keyword">while</span>(r &gt; q[i].r)&#123;<span class="built_in">update</span>(r, <span class="number">-1</span>); r--;&#125;</span><br><span class="line">        num[q[i].id] = cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="主席树"><a href="#主席树" class="headerlink" title="主席树"></a>主席树</h1><p>妈耶，理解原理后敲完一遍就AC，天不亡我！！！！</p>
<p>我们遍历N个元素，如果这个元素之前没有出现过，那么正在建立的这颗线段树就要把对应的这个位置上加1，否则的话如果这个元素之前出现过的最后位置是Index, 那我们就把这个位置的数目-1，在以当前的位置更新目前的这棵线段树。</p>
<p>这样当我们查询L，R区间时，我们就找以rt[R]为根的树，因为每棵线段树都存的是从起点到当前元素的不重复元素个数，所以在rt[R]的树上，我们可以找到任意起点到R这段区间的不重复元素的个数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 3e4 + 5;</span><br><span class="line"></span><br><span class="line">struct node&#123;</span><br><span class="line">    int ls, rs, sum;</span><br><span class="line">&#125;tree[4000005];</span><br><span class="line">const int maxn = 30005;</span><br><span class="line">int a[maxn], rt[maxn];</span><br><span class="line">int tot = 0;</span><br><span class="line">void build(int &amp;o, int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    o = ++tot;</span><br><span class="line">    tree[o].sum = 0;</span><br><span class="line">    if(l == r) return;</span><br><span class="line">    int mid = (l + r) &gt;&gt; 1;</span><br><span class="line">    build(tree[o].ls, l , mid);</span><br><span class="line">    build(tree[o].rs, mid + 1, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void update(int &amp;o , int last, int l, int r, int pos, int add)</span><br><span class="line">&#123;</span><br><span class="line">    o = ++tot;</span><br><span class="line">    tree[o].ls = tree[last].ls;</span><br><span class="line">    tree[o].rs = tree[last].rs;</span><br><span class="line">    tree[o].sum = tree[last].sum + add;</span><br><span class="line">    if(l == r) return;</span><br><span class="line">    int mid = (l + r) &gt;&gt; 1;</span><br><span class="line">    if(pos &lt;= mid) update(tree[o].ls, tree[last].ls, l, mid, pos, add);</span><br><span class="line">    else update(tree[o].rs, tree[last].rs, mid + 1, r, pos , add);</span><br><span class="line">&#125;</span><br><span class="line">int sum;</span><br><span class="line">void query(int o, int l, int r, int left, int right)</span><br><span class="line">&#123;</span><br><span class="line">    if(left &gt; r || right &lt; l) return;</span><br><span class="line">    if(left &lt;= l &amp;&amp; right &gt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += tree[o].sum;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid = (l + r ) &gt;&gt; 1;</span><br><span class="line">    query(tree[o].ls, l, mid, left, right);</span><br><span class="line">    query(tree[o].rs, mid + 1, r, left, right);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,Q,l,r;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(int i = 1; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;Q);</span><br><span class="line">    build(rt[0], 1, n);</span><br><span class="line">    map&lt;int,int&gt;M;</span><br><span class="line">    for(int i = 1; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        if(!M[a[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            update(rt[i], rt[i - 1], 1, n, i, 1);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            int temp;</span><br><span class="line">            update(rt[i], rt[i - 1], 1, n, M[a[i]], -1);</span><br><span class="line">            update(rt[i], rt[i], 1, n, i, 1);</span><br><span class="line">        &#125;</span><br><span class="line">        M[a[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    while(Q--)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = 0;</span><br><span class="line">        scanf(&quot;%d %d&quot;,&amp;l, &amp;r);</span><br><span class="line">        query(rt[r], 1, n, l , r);</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; &#x27;\n&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>主席树</tag>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title>sdnuoj-1220 之旧地重游</title>
    <url>/2019/07/20/sdnuoj-1220-%E4%B9%8B%E6%97%A7%E5%9C%B0%E9%87%8D%E6%B8%B8/</url>
    <content><![CDATA[<p>刚刚A了紫书上的一道BFS题，就正好把其精华应用到了这道题上。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>现在想想其实这个输出路径的无非是多了一条输出路径而已，我们知道每个点的前驱都是可以在遍历中确定的，我开了一个三维数组，前两维记录坐标，第三维记录的是从哪个方向到达该点（和紫书的那道题一样）。这样我只需要在BFS中加上记录路径的一句话就行了。最后在输出路径的时候，只需要输出第三维的方向就行了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x,y,dir;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dir1[] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;   <span class="comment">//向东，向西，向南 向北</span></span><br><span class="line"><span class="type">int</span> dir2[] = &#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">string ss = <span class="string">&quot;DLRU&quot;</span>, s[<span class="number">55</span>];</span><br><span class="line">node p[<span class="number">55</span>][<span class="number">55</span>][<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> vis[<span class="number">55</span>][<span class="number">55</span>],n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(node u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;node&gt;V;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        V.<span class="built_in">push_back</span>(u);</span><br><span class="line">        <span class="keyword">if</span>(u.x == <span class="number">0</span> &amp;&amp; u.y == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        u = p[u.x][u.y][u.dir];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(V.<span class="built_in">begin</span>(), V.<span class="built_in">end</span>());</span><br><span class="line">    cout &lt;&lt; V.<span class="built_in">size</span>() - <span class="number">1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; V.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; ss[V[i].dir];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;node&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">    vis[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node u = Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(u.x == n - <span class="number">1</span> &amp;&amp; u.y == m - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">print</span>(u);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            node v;</span><br><span class="line">            v.dir = i;</span><br><span class="line">            v.x = u.x + dir1[i];</span><br><span class="line">            v.y = u.y + dir2[i];</span><br><span class="line">            <span class="keyword">if</span>(v.x &lt; <span class="number">0</span> || v.x &gt;= n || v.y &lt; <span class="number">0</span> || v.y &gt;= m || vis[v.x][v.y] || s[v.x][v.y] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            p[v.x][v.y][i] = u;        <span class="comment">//记录路径 这一句话就够了</span></span><br><span class="line">            vis[v.x][v.y] = <span class="number">1</span>;</span><br><span class="line">            Q.<span class="built_in">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">bfs</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后附上2019蓝桥杯B组迷宫题数据（30行50列），和这题一样，输出路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>square numbers</title>
    <url>/2019/05/08/square%20numbers/</url>
    <content><![CDATA[<p><a href="https://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Index/problemdetail/pid/3258.html">题目链接</a></p>
<p>做的时候觉得如果要查看两个数的乘积是不是平方数，就必须把每个数字与另外的每一个数字比较，也就是有O（N^2）的复杂度。谁知道一看题解，竟然用到了数学的知识。<span id="more"></span>每一个平方数都可以表示成为多个素数的偶次幂的乘积。这个其实是应用了唯一分解定理。唯一分解定理是说：<strong>任何大于1的自然数都可以唯一的用若干个素数的乘积表示出来</strong>。那么一个平方数自然就可以表示成为若干个素数的偶次幂的乘积了。然后我们就可以运用这个做题了。把每个数字化简到最简的数字，然后就可以得到答案了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">1001000</span>];</span><br><span class="line"><span class="type">int</span> prime[<span class="number">1001000</span>];</span><br><span class="line"><span class="type">int</span> flag[<span class="number">1001000</span>];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">1000001</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            prime[++tot] = i * i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + i; j &lt;= <span class="number">1000001</span>; j += i)</span><br><span class="line">            &#123;</span><br><span class="line">                vis[j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">prim</span>();</span><br><span class="line">    <span class="type">int</span> t, n, num;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="built_in">sizeof</span>(flag));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; num;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; prime[j] &lt;= num; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(num % prime[j] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    num /= prime[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            flag[num]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">1000010</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += flag[j] * (flag[j] - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>唯一分解定理</tag>
      </tags>
  </entry>
  <entry>
    <title>zoj 3772 线段树 + 矩阵乘法</title>
    <url>/2019/07/30/zoj-3772-%E7%BA%BF%E6%AE%B5%E6%A0%91-%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/</url>
    <content><![CDATA[<span id="more"></span>

<p>乍一看觉得需要矩阵快速幂，但是还有区间询问的问题，所以需要用线段树+矩阵乘法。</p>
<p>对于任意的长度大于2的区间长度[L,R]的询问,有如下：</p>
<p>​                                                                    <img src="/1.jpg"></p>
<p>其中:</p>
<p>​                                                                       <img src="/2.jpg"></p>
<p>因此我们只需要用线段树维护区间内M（L+2）到M（R）的乘积，注意矩阵乘法的方向顺序。</p>
<p>因为query函数的问题，段错误N次. 还有注意数组的大小，太大也会段错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">typedef long long ll;</span><br><span class="line">struct Matrix&#123;</span><br><span class="line">   ll m[4][4];</span><br><span class="line">&#125;tree[400005];</span><br><span class="line">ll mod = 1000000007;</span><br><span class="line"></span><br><span class="line">ll a[100005];</span><br><span class="line">Matrix mul(Matrix a, Matrix b)</span><br><span class="line">&#123;</span><br><span class="line">    Matrix tmp;</span><br><span class="line">    memset(tmp.m,0,sizeof(tmp.m));</span><br><span class="line">    for(int i = 1;i &lt;= 2; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j = 1; j &lt;= 2; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int k = 1; k &lt;= 2; ++k)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp.m[i][j] = (tmp.m[i][j] + a.m[i][k] * b.m[k][j]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void build(int node, int l ,int r)</span><br><span class="line">&#123;</span><br><span class="line">    if(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].m[1][1] = 1;</span><br><span class="line">        tree[node].m[1][2] = a[l] % mod;</span><br><span class="line">        tree[node].m[2][1] = 1;</span><br><span class="line">        tree[node].m[2][2] = 0;</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid = (l + r) &gt;&gt; 1;</span><br><span class="line">    build(node &lt;&lt; 1, l ,mid);</span><br><span class="line">    build(node &lt;&lt; 1|1,mid + 1 , r);</span><br><span class="line">    tree[node]= mul(tree[node &lt;&lt; 1|1] , tree[node &lt;&lt; 1]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Matrix query(int node, int begin , int end, int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    if(l &lt;= begin &amp;&amp; end &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        return tree[node];</span><br><span class="line">    &#125;</span><br><span class="line">    int mid = (begin + end) &gt;&gt; 1;</span><br><span class="line">    if(r &lt;= mid)  return query(node &lt;&lt; 1 , begin, mid, l , r);</span><br><span class="line">    else if(l &gt; mid ) return query(node &lt;&lt; 1|1, mid + 1, end, l, r);</span><br><span class="line">    else return mul(query(node &lt;&lt; 1|1,mid + 1, end, l, r),query(node &lt;&lt; 1,begin, mid, l, r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int T,n,Q;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    while(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d %d&quot;,&amp;n,&amp;Q);</span><br><span class="line">        for(int i = 1; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%lld&quot;,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        build(1,1,n);</span><br><span class="line">        while(Q--)</span><br><span class="line">        &#123;</span><br><span class="line">            int L,R;</span><br><span class="line">            scanf(&quot;%d %d&quot;,&amp;L,&amp;R);</span><br><span class="line">            if(R - L &lt; 2)</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;%d\n&quot;,a[R] % mod);</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                Matrix c = query(1,1,n,L + 2, R);</span><br><span class="line">                printf(&quot;%lld\n&quot;,(c.m[1][1] * a[L + 1] + c.m[1][2] * a[L]) % mod);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>矩阵乘法</tag>
      </tags>
  </entry>
  <entry>
    <title>zoj 3939 - The Lucky Week</title>
    <url>/2019/07/18/zoj-3939-The-Lucky-Week/</url>
    <content><![CDATA[<p>一直无从下手，终于解决了，整理一下还是很有必要的。</p>
<span id="more"></span>

<p><a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=5548">题目链接</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先要知道每400年就是一个循环节，我们可以计算出400年中共2058个幸运周，然后就可以对N取余了，做年份的题很多都有一个套路，就是枚举日期。需要注意当N&#x3D;&#x3D;1，答案就是日期本身。注意年份要用Long long 存， 取余的时候，注意余数&#x3D;&#x3D;0的情况需要单独说（这点还是很重要的，要记住遇到循环节取余的时候，最后出数据一定要出小于循环节，等于循环节和大于循环节的长度）。还有蔡勒公式的函数也要记一下，以前的函数似乎是记错了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getday</span><span class="params">(<span class="type">int</span> d, <span class="type">int</span> m, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(m == <span class="number">1</span> || m == <span class="number">2</span>)  m += <span class="number">12</span>, --y;</span><br><span class="line">  <span class="keyword">return</span> (d + <span class="number">2</span>*m + <span class="number">3</span>*(m<span class="number">+1</span>)/<span class="number">5</span> + y%<span class="number">7</span> + y/<span class="number">4</span>%<span class="number">7</span> - y/<span class="number">100</span>%<span class="number">7</span> + y/<span class="number">400</span>%<span class="number">7</span>) % <span class="number">7</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;     <span class="comment">//预处理得到每400年有2058个Lukcy week</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2004</span>; i &lt;= <span class="number">2403</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">12</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">getday</span>(<span class="number">1</span>,j,i) == <span class="number">1</span>)cnt++;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">getday</span>(<span class="number">11</span>,j,i) == <span class="number">1</span>) cnt++;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">getday</span>(<span class="number">21</span>,j,i) == <span class="number">1</span>) cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, y1,m1 ,d1,t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>,&amp;y1,&amp;m1,&amp;d1,&amp;n);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> yy1 = n / <span class="number">2058</span> * <span class="number">400</span>;</span><br><span class="line">        n = n % <span class="number">2058</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) n = <span class="number">2058</span>;             <span class="comment">//或者合成一句直接写n = (n + 2057)% 2058 + 1;</span></span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="keyword">if</span>(<span class="built_in">getday</span>(d1,m1,y1) == <span class="number">1</span>) cnt++;</span><br><span class="line">            <span class="keyword">if</span>(cnt == n ) <span class="keyword">break</span>;</span><br><span class="line">            d1 = d1 + <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(d1 == <span class="number">31</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m1++;</span><br><span class="line">                d1 = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(m1 &gt; <span class="number">12</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    m1 = <span class="number">1</span>;</span><br><span class="line">                    y1++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld %d %d\n&quot;</span>, (y1 + yy1), m1, d1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>主席树-可持久化线段树</title>
    <url>/2019/07/26/%E4%B8%BB%E5%B8%AD%E6%A0%91-%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    <content><![CDATA[<p>主席树又叫做可持久化线段树，就是说主席树可以直接利用历史已经建好的线段树节点再扩展生成新的线段树，</p>
<p>经典问题是解决区间第K大数的询问问题。如果直接暴力肯定是过不了的。</p>
<span id="more"></span>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2665">Kth number</a></p>
<p>又是一道不读discuss永远过不了的题，不要被题意误解，这道题是求区间第K小的数字。</p>
<p>一篇比较好的主席树讲解博客：<a href="https://www.cnblogs.com/zyf0163/p/4749042.html">主席树学习</a></p>
<p>我就简单说几点我一开始也不太理解的地方。</p>
<p>1.我们需要对一开始输入的a数组离散化，得到b数组，然后a数组存的是a数组原先的值在b数组里的位置。然后我们更新的时候，只是根据这个位置更新。</p>
<p>2.我们在查询的时候，也只是查询的位置，从query中的 return l，就可以看出。</p>
<p>3.一开始的时候我们要建立一颗空的rt[0]线段树，这个过程中注意那个引用符号，这个很重要，会使得ls[],rs[]不断更新，ls[]和rs[]存的是什么呢，ls[i]存的是以i为根节点的左儿子的索引。也就是说通过这个我们就能不断往下遍历各个节点了。</p>
<p>4.在更新的时候，我们根据ls[]，rs[]不断往下遍历，虽然ls[o] 开始被赋值 ls[last],但是往下找到递归的区间的时候，它就会被更新了，这也是引用的作用。</p>
<p>5.重要的就是Update函数，他真正的体现了主席树是如何利用以往的线段树的，只有这样才不会MLE。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2500005</span>;</span><br><span class="line"><span class="type">int</span> rt[maxn], ls[maxn], rs[maxn],a[N], b[N],sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;o, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    o = ++tot;</span><br><span class="line">    sum[o] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(ls[o], l, mid);</span><br><span class="line">    <span class="built_in">build</span>(rs[o], mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> &amp;o, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> last, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    o = ++tot;</span><br><span class="line">    ls[o] = ls[last];</span><br><span class="line">    rs[o] = rs[last];</span><br><span class="line">    sum[o] = sum[last] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k &lt;= mid) <span class="built_in">update</span>(ls[o], l , mid, ls[last], k);</span><br><span class="line">    <span class="keyword">else</span>  <span class="built_in">update</span>(rs[o], mid + <span class="number">1</span>, r, rs[last], k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> ss, <span class="type">int</span> tt, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="type">int</span> cnt = sum[ls[tt]] - sum[ls[ss]];</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k &lt;= cnt) <span class="keyword">return</span> <span class="built_in">query</span>(ls[ss],ls[tt],l, mid, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(rs[ss],rs[tt],mid + <span class="number">1</span>, r, k - cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,n,Q,ll,rr,k;</span><br><span class="line"></span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;Q);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memcpy</span>(b,a,<span class="built_in">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> sz = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - (b + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">build</span>(rt[<span class="number">0</span>],<span class="number">1</span>,sz);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + sz + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">update</span>(rt[i],<span class="number">1</span>,sz,rt[i - <span class="number">1</span>], a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(Q--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;ll,&amp;rr,&amp;k);</span><br><span class="line">            <span class="type">int</span> ans = <span class="built_in">query</span>(rt[ll - <span class="number">1</span>], rt[rr], <span class="number">1</span> ,sz, k);</span><br><span class="line">            cout &lt;&lt; b[ans] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结构体版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 3e4 + 5;</span><br><span class="line"></span><br><span class="line">struct node&#123;</span><br><span class="line">    int ls, rs, sum;</span><br><span class="line">&#125;tree[4000005];</span><br><span class="line">const int maxn = 300005;</span><br><span class="line">int a[maxn], b[maxn], rt[maxn];</span><br><span class="line">int tot ;</span><br><span class="line">void build(int &amp;o, int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    o = ++tot;</span><br><span class="line">    tree[o].sum = 0;</span><br><span class="line">    if(l == r) return;</span><br><span class="line">    int mid = (l + r) &gt;&gt; 1;</span><br><span class="line">    build(tree[o].ls, l, mid);</span><br><span class="line">    build(tree[o].rs, mid + 1, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void update(int &amp;o, int last, int pos, int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">     o = ++tot;</span><br><span class="line">     tree[o].ls = tree[last].ls;</span><br><span class="line">     tree[o].rs = tree[last].rs;</span><br><span class="line">     tree[o].sum = tree[last].sum + 1;</span><br><span class="line">     if(l == r) return;</span><br><span class="line">     int mid = (l + r) &gt;&gt; 1;</span><br><span class="line">     if(pos &lt;= mid)  update(tree[o].ls, tree[last].ls, pos, l, mid);</span><br><span class="line">     else update(tree[o].rs, tree[last].rs, pos, mid + 1, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int query(int ss, int tt, int l, int r, int k)</span><br><span class="line">&#123;</span><br><span class="line">    if(l == r) return l;</span><br><span class="line">    int num = tree[tree[tt].ls].sum - tree[tree[ss].ls].sum;</span><br><span class="line">    int mid = (l + r) &gt;&gt; 1;</span><br><span class="line">    if(k &lt;= num)  return query(tree[ss].ls, tree[tt].ls, l, mid, k);</span><br><span class="line">    else  return query(tree[ss].rs, tree[tt].rs, mid + 1, r, k - num);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,Q,l,r,k;</span><br><span class="line">    scanf(&quot;%d %d&quot;,&amp;n,&amp;Q);</span><br><span class="line">    tot = 0;</span><br><span class="line">    for(int i = 1; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">        b[i] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(b + 1,b + n + 1);</span><br><span class="line">    int sz = unique(b + 1, b + n + 1) - (b + 1);</span><br><span class="line">    build(rt[0], 1, sz);</span><br><span class="line">    for(int i = 1; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = lower_bound(b + 1, b + sz + 1, a[i]) - b;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int  i = 1; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        update(rt[i], rt[i - 1], a[i], 1, sz);</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i = 1 ; i &lt;= Q; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d %d %d&quot;,&amp;l,&amp;r,&amp;k);</span><br><span class="line">        printf(&quot;%d\n&quot;,b[query(rt[l - 1], rt[r], 1 , sz ,k)]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title>刘二大人pytorch学习笔记</title>
    <url>/2024/04/16/%E5%88%98%E4%BA%8C%E5%A4%A7%E4%BA%BApytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>pytorch学习记录</p>
<span id="more"></span>

<h4 id="1-加载文件"><a href="#1-加载文件" class="headerlink" title="1. 加载文件"></a>1. 加载文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>加载txt</span><br><span class="line">file = np.loadtxt(filepath,delimiter=<span class="string">&#x27;,&#x27;</span>,dtype=np.float32)</span><br><span class="line">x_data = torch.from_numpy(file[:,:-<span class="number">1</span>]) <span class="comment">#不包含最后一列</span></span><br><span class="line">y_data = torch.from_numpy(file[:,[-<span class="number">1</span>]])  <span class="comment">#只包含最后一列</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>加载h5文件</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line">file = h5py.File(<span class="string">&#x27;.h5&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">file.keys() 	<span class="comment">#查看h5文件的keys</span></span><br><span class="line">x=np.array(file[<span class="string">&#x27;train_x&#x27;</span>])</span><br><span class="line">x = x.astype(<span class="string">&#x27;float32&#x27;</span>)/<span class="number">255</span></span><br><span class="line">x = torch.from_numpy(x)</span><br><span class="line"><span class="comment"># x的维度为 m * h * w * c,需要转换维度</span></span><br><span class="line">x.permute(<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-手写数字识别model搭建"><a href="#2-手写数字识别model搭建" class="headerlink" title="2. 手写数字识别model搭建"></a>2. 手写数字识别model搭建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">train_data = torchvision.datasets.MNIST(<span class="string">&#x27;data/mnist&#x27;</span>,transform=torchvision.transforms.ToTensor(),train=<span class="literal">True</span>,download=<span class="literal">True</span>)</span><br><span class="line">test_data = torchvision.datasets.MNIST(<span class="string">&#x27;data/mnist&#x27;</span>,transform=torchvision.transforms.ToTensor(),train=<span class="literal">False</span>,download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">train_loader = DataLoader(train_data,batch_size=<span class="number">64</span>,shuffle=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(test_data,batch_size=<span class="number">64</span>,shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">train_len =  <span class="built_in">len</span>(train_data)</span><br><span class="line">test_len = <span class="built_in">len</span>(test_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(<span class="number">1</span>,<span class="number">6</span>,<span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.avg_pool1 = nn.AvgPool2d(<span class="number">2</span>,stride=<span class="number">2</span>)</span><br><span class="line">        <span class="variable language_">self</span>.conv2 = nn.Conv2d(<span class="number">6</span>,<span class="number">16</span>,<span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.avg_pool2 = nn.AvgPool2d(<span class="number">2</span>,stride=<span class="number">2</span>)</span><br><span class="line">        <span class="variable language_">self</span>.flatten = nn.Flatten()</span><br><span class="line">        <span class="variable language_">self</span>.l1 = nn.Linear(<span class="number">256</span>,<span class="number">64</span>)</span><br><span class="line">        <span class="variable language_">self</span>.l2 = nn.Linear(<span class="number">64</span>,<span class="number">10</span>)</span><br><span class="line">        <span class="variable language_">self</span>.relu = nn.ReLU()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.conv1(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.avg_pool1(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.conv2(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.avg_pool2(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.flatten(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.relu(<span class="variable language_">self</span>.l1(x))</span><br><span class="line">        x = <span class="variable language_">self</span>.l2(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">model = Model()</span><br><span class="line">model= model.to(device)</span><br><span class="line"></span><br><span class="line">loss_func = nn.CrossEntropyLoss()</span><br><span class="line">loss_func = loss_func.to(device)</span><br><span class="line">optim = torch.optim.SGD(model.parameters(),lr=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">epoch = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----------------第&#123;&#125;次迭代开始-----------&#x27;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>))</span><br><span class="line">    loss_cnt = <span class="number">0</span></span><br><span class="line">    acc = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_loader:</span><br><span class="line">        imgs, labels = data      <span class="comment">#64 1 28 28</span></span><br><span class="line">       <span class="comment"># imgs = torch.reshape(imgs, (-1, 784))</span></span><br><span class="line">        imgs = imgs.to(device)</span><br><span class="line">        labels = labels.to(device)</span><br><span class="line"></span><br><span class="line">        y_hat = model(imgs)</span><br><span class="line"></span><br><span class="line">        acc += (y_hat.argmax(<span class="number">1</span>) == labels).<span class="built_in">sum</span>()</span><br><span class="line">        loss = loss_func(y_hat, labels)</span><br><span class="line">        loss_cnt += loss</span><br><span class="line"></span><br><span class="line">        optim.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optim.step()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第&#123;&#125;次的loss为&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>, loss_cnt))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第&#123;&#125;次的acc为&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>, acc/train_len))</span><br><span class="line"></span><br><span class="line"><span class="comment">#test</span></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    acc = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">        imgs, labels = data</span><br><span class="line">        <span class="comment">#imgs: 64*1*32*32</span></span><br><span class="line">       <span class="comment"># imgs = torch.reshape(imgs, (-1,784))</span></span><br><span class="line">        imgs = imgs.to(device)</span><br><span class="line">        labels = labels.to(device)</span><br><span class="line"></span><br><span class="line">        y_hat = model(imgs)</span><br><span class="line"></span><br><span class="line">        acc += (y_hat.argmax(<span class="number">1</span>) == labels).<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;acc=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(acc/test_len))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
        <tag>cnn</tag>
      </tags>
  </entry>
  <entry>
    <title>动手学深度学习笔记</title>
    <url>/2024/04/29/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>动手学深度学习</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#搭建环境</span></span><br><span class="line">nvidia-smi查看cuda版本</span><br><span class="line">conda create -n myenv python=<span class="number">3.8</span></span><br><span class="line"><span class="comment">#官网安装torch</span></span><br><span class="line">pip install nb_conda(可以在jupyter中切换虚拟环境)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">a = torch.tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],dtype=torch.float32)</span><br><span class="line">torch.cat((a,b),dim=<span class="number">1</span>) <span class="comment">#连接a, b</span></span><br><span class="line"><span class="comment">#创建3*4正态分布tensor</span></span><br><span class="line">a = torch.normal(<span class="number">0</span>,<span class="number">0.01</span>,(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">x.numel() <span class="comment">#查看tensor x中元素的个数</span></span><br><span class="line"><span class="comment">#解压缩</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">data_array=(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">get(*data_array)</span><br><span class="line"><span class="comment">#压缩 </span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">b = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(a,b):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment"># (1,3),(2,4)</span></span><br><span class="line"><span class="comment">#迭代器</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">iter</span>(<span class="built_in">list</span>):</span><br><span class="line">	<span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment">#查看第一个batch</span></span><br><span class="line">X,y = <span class="built_in">next</span>(<span class="built_in">iter</span>(train_dataloader))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#tensor转numpy</span></span><br><span class="line">X = X.numpy()</span><br><span class="line"><span class="comment">#numpy转tensor</span></span><br><span class="line">tensor = torch.from_numpy(numpy)</span><br><span class="line">tensor = torch.tensor(numpy)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如果已经存在这个文件夹 也不报错</span></span><br><span class="line"><span class="comment">#创建../data文件夹</span></span><br><span class="line">os.makedirs(os.path.join(<span class="string">&#x27;..&#x27;</span>,<span class="string">&#x27;data&#x27;</span>),exist_ok=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#读取csv</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;.csv&#x27;</span>)</span><br><span class="line"><span class="built_in">input</span>,output  = data.iloc[:,<span class="number">0</span>:<span class="number">2</span>],data.iloc[:,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看网络的参数</span></span><br><span class="line">net = nn.Sequential(nn.Linear(<span class="number">4</span>,<span class="number">8</span>), nn.ReLU(), nn.Linear(<span class="number">8</span>,<span class="number">1</span>))</span><br><span class="line"><span class="keyword">for</span> para <span class="keyword">in</span> net.parameters():</span><br><span class="line">    para.shape</span><br><span class="line"><span class="keyword">for</span> name, para <span class="keyword">in</span> net.named_parameters():</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line">net[<span class="number">2</span>].weight.data  <span class="comment">#tensor</span></span><br><span class="line">net[<span class="number">2</span>].bias.data.device</span><br><span class="line"><span class="built_in">next</span>(<span class="built_in">iter</span>(net.parameters())).shape</span><br><span class="line"></span><br><span class="line"><span class="comment">##定义一个大型网络， 查看每层的输出维度</span></span><br><span class="line">net = torch.nn.Sequential(Reshape(), nn.Conv2d(<span class="number">1</span>, <span class="number">6</span>, kernel_size=<span class="number">5</span>,</span><br><span class="line">                                               padding=<span class="number">2</span>), nn.Sigmoid(),</span><br><span class="line">                          nn.AvgPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>),</span><br><span class="line">                          nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, kernel_size=<span class="number">5</span>), nn.Sigmoid(),</span><br><span class="line">                          nn.AvgPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>), nn.Flatten(),</span><br><span class="line">                          nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>), nn.Sigmoid(),</span><br><span class="line">                          nn.Linear(<span class="number">120</span>, <span class="number">84</span>), nn.Sigmoid(), nn.Linear(<span class="number">84</span>, <span class="number">10</span>))</span><br><span class="line">X = torch.rand((<span class="number">1</span>,<span class="number">1</span>,<span class="number">28</span>,<span class="number">28</span>), dtype=torch.float32)</span><br><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> net:</span><br><span class="line">    X = layer(X)</span><br><span class="line">    <span class="built_in">print</span>(layer.__class__.__name__.ljust(<span class="number">20</span>), <span class="string">&#x27;outshape: &#x27;</span> ,X.shape)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据增广</span></span><br><span class="line">trans = torvision.transforms.Compose([</span><br><span class="line">    transforms.RandomHorizontalFlip(p=<span class="number">0.5</span>)</span><br><span class="line">    <span class="comment">#裁剪之后为200*200 , 选择的区域最少是0.1,最多是1,  裁剪之前高宽比最低0.5 </span></span><br><span class="line">    transforms.RandomResizedCrop((<span class="number">200</span>, <span class="number">200</span>), scale=(<span class="number">0.1</span>, <span class="number">1</span>), ratio=(<span class="number">0.5</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="comment">#亮度，饱和度之类的,允许上下变动50%</span></span><br><span class="line">    torchvision.transforms.ColorJitter(brightness=<span class="number">0.5</span>, contrast=<span class="number">0.5</span>, saturation=<span class="number">0.5</span>,</span><br><span class="line">                                       hue=<span class="number">0.5</span>)</span><br><span class="line">    transforms.Resize(<span class="number">256</span>)</span><br><span class="line">    transforms.CenterCrop(<span class="number">224</span>)</span><br><span class="line">    transforms.ToTensor()</span><br><span class="line">])</span><br><span class="line"><span class="comment">#可以将PILImage 直接转换为tensor</span></span><br><span class="line">img = trans(img)</span><br><span class="line"></span><br><span class="line"><span class="comment">#语义分割随机裁剪</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">voc_rand_crop</span>(<span class="params">feature, label, height, width</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;随机裁剪特征和标签图像。&quot;&quot;&quot;</span></span><br><span class="line">    rect = torchvision.transforms.RandomCrop.get_params(</span><br><span class="line">        feature, (height, width))</span><br><span class="line">    feature = torchvision.transforms.functional.crop(feature, *rect)</span><br><span class="line">    label = torchvision.transforms.functional.crop(label, *rect)</span><br><span class="line">    <span class="keyword">return</span> feature, label</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#学习率衰减,每个epoch scheduler.step()</span></span><br><span class="line">lr_period = <span class="number">2</span> , lr_decay = <span class="number">0.9</span></span><br><span class="line">scheduler = torch.optim.lr_scheduler.StepLR(optimizer, lr_period, lr_decay)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读入图片</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&#x27;catdog.jpg&#x27;</span>)</span><br><span class="line"><span class="comment">#image.show()</span></span><br><span class="line">plt.imshow(image)</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">image = plt.imread(<span class="string">&#x27;catdog.jpg&#x27;</span>)</span><br><span class="line">plt.imshow(image)</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">image = torchvision.io.read_image(<span class="string">&#x27;catdog.jpg&#x27;</span>)</span><br><span class="line">image.shape</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在图中画框</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;catdog.jpg&#x27;</span>)</span><br><span class="line">fig=plt.imshow(img)</span><br><span class="line">fig.axes.add_patch(plt.Rectangle(xy=(<span class="number">10</span>,<span class="number">10</span>),width=<span class="number">200</span>, height=<span class="number">200</span>,linewidth=<span class="number">1</span>, color=<span class="string">&#x27;r&#x27;</span>, fill=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置dataframe某一列为索引</span></span><br><span class="line">csv_data = pd.read_csv(<span class="string">&#x27;.csv&#x27;</span>)</span><br><span class="line">csv_data = csv_data.set_index(<span class="string">&#x27;img_name&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> img_name, target <span class="keyword">in</span> csv_data.iterrows():</span><br><span class="line">	<span class="comment">#target为series类型</span></span><br><span class="line">	<span class="built_in">list</span>(series)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## net = nn.Sequential(*list(pretrained_net.children())[:-2])</span></span><br><span class="line">pretrained_net = torchvision.models.resnet18(pretrained=<span class="literal">True</span>)</span><br><span class="line">net = nn.Sequential(*<span class="built_in">list</span>(pretrained_net.children())[:-<span class="number">2</span>])</span><br><span class="line">X = torch.rand(size=(<span class="number">1</span>, <span class="number">3</span>, <span class="number">320</span>, <span class="number">480</span>))</span><br><span class="line">net(X).shape</span><br><span class="line"></span><br><span class="line"><span class="comment">#假设input = (32,3,320,480),经过上面网络变为(32, 512, 10, 15),经过如下网络变为(32,num_class, 320, 480)</span></span><br><span class="line">net.add_module(<span class="string">&#x27;final_conv&#x27;</span>, nn.Conv2d(<span class="number">512</span>, num_classes, kernel_size=<span class="number">1</span>))</span><br><span class="line">net.add_module(</span><br><span class="line">    <span class="string">&#x27;transpose_conv&#x27;</span>,</span><br><span class="line">    nn.ConvTranspose2d(num_classes, num_classes, kernel_size=<span class="number">64</span>, padding=<span class="number">16</span>,</span><br><span class="line">                       stride=<span class="number">32</span>))</span><br><span class="line"><span class="comment">#损失函数, inputs(32,21,320,480)  targets(32,320,480) , F.cross_entropy返回维度(32,320,480)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loss</span>(<span class="params">inputs, targets</span>):</span><br><span class="line">    <span class="keyword">return</span> F.cross_entropy(inputs, targets, reduction=<span class="string">&#x27;none&#x27;</span>).mean(<span class="number">1</span>).mean(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>单调栈 牛客网 区区区间间间</title>
    <url>/2019/11/05/%E5%8D%95%E8%B0%83%E6%A0%88-%E7%89%9B%E5%AE%A2%E7%BD%91-%E5%8C%BA%E5%8C%BA%E5%8C%BA%E9%97%B4%E9%97%B4%E9%97%B4/</url>
    <content><![CDATA[<span id="more"></span>用单调栈算出以每个数作为区间最小数和最大数的区间的范围，算出每个数字的贡献。

<h2 id="区区区间间间"><a href="#区区区间间间" class="headerlink" title="区区区间间间"></a>区区区间间间</h2><p><a href="https://ac.nowcoder.com/acm/problem/20806">题目链接</a></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>以前做过一道CF的类似的， 不过这两道题还是不太一样，为了不需要N^2复杂度，我们用单调栈预处理出每个数字的作为区间最小数和最大数的贡献，然后O（N）遍历即可。把我卡住的是如果有相等数字的情况，我们必须保证两个相等的数字它们扩展的范围并不一样，否则贡献就重叠了， 也就是代码中的加不加等于号的问题。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">ll a[<span class="number">100005</span>];</span><br><span class="line">ll l[<span class="number">100005</span>], r[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> T, n;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt;S1,S2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        ll Maxsum  = <span class="number">0</span>,Minsum = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;  i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!S<span class="number">1.</span><span class="built_in">empty</span>() &amp;&amp; a[i] &lt;= a[S<span class="number">1.</span><span class="built_in">top</span>()] )</span><br><span class="line">            &#123;</span><br><span class="line">                S<span class="number">1.</span><span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(S<span class="number">1.</span><span class="built_in">empty</span>()) l[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> l[i] = S<span class="number">1.</span><span class="built_in">top</span>() + <span class="number">1</span>;</span><br><span class="line">            S<span class="number">1.</span><span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!S<span class="number">2.</span><span class="built_in">empty</span>() &amp;&amp; a[i] &lt; a[S<span class="number">2.</span><span class="built_in">top</span>()])</span><br><span class="line">            &#123;</span><br><span class="line">                S<span class="number">2.</span><span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(S<span class="number">2.</span><span class="built_in">empty</span>())  r[i] = n;</span><br><span class="line">            <span class="keyword">else</span> r[i] = S<span class="number">2.</span><span class="built_in">top</span>() - <span class="number">1</span>;</span><br><span class="line">            S<span class="number">2.</span><span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            Minsum -= ((r[i] - i + <span class="number">1</span>) * (i - l[i]) + r[i] - i) * a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt;S3,S4;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!S<span class="number">3.</span><span class="built_in">empty</span>() &amp;&amp; a[i] &gt;= a[S<span class="number">3.</span><span class="built_in">top</span>()])</span><br><span class="line">            &#123;</span><br><span class="line">                S<span class="number">3.</span><span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(S<span class="number">3.</span><span class="built_in">empty</span>()) l[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> l[i] = S<span class="number">3.</span><span class="built_in">top</span>() + <span class="number">1</span>;</span><br><span class="line">            S<span class="number">3.</span><span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>;--i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!S<span class="number">4.</span><span class="built_in">empty</span>() &amp;&amp; a[i] &gt; a[S<span class="number">4.</span><span class="built_in">top</span>()])</span><br><span class="line">            &#123;</span><br><span class="line">                S<span class="number">4.</span><span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(S<span class="number">4.</span><span class="built_in">empty</span>()) r[i] = n;</span><br><span class="line">            <span class="keyword">else</span> r[i] = S<span class="number">4.</span><span class="built_in">top</span>() - <span class="number">1</span>;</span><br><span class="line">            S<span class="number">4.</span><span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">         &#123;</span><br><span class="line">             Maxsum += ((r[i] - i + <span class="number">1</span>) * (i - l[i]) + r[i] - i) * a[i];</span><br><span class="line">         &#125;</span><br><span class="line">        </span><br><span class="line">        cout &lt;&lt; Maxsum + Minsum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈题目(一)</title>
    <url>/2019/05/21/%E5%8D%9A%E5%BC%88%E9%A2%98%E7%9B%AE-%E4%B8%80/</url>
    <content><![CDATA[<p>最近开始学习博弈相关的知识了，记录一下刷题过程。</p>
<span id="more"></span>

<p><a href="https://vjudge.net/problem/LightOJ-1199">Partitioning Game </a></p>
<h4 id="Partitioning-Game"><a href="#Partitioning-Game" class="headerlink" title="Partitioning Game"></a>Partitioning Game</h4><h5 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h5><p>有N堆，每人每次选一堆进行操作：把这堆拆分成两个不同的堆，直到某人不能拆了，即算失败</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">10001</span>];</span><br><span class="line"><span class="type">int</span> sg[<span class="number">10001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getSG</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span> , <span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; i - j &gt; j ; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[sg[j]^sg[i - j]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; ; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[j])</span><br><span class="line">            &#123;</span><br><span class="line">                sg[i] = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">getSG</span>();</span><br><span class="line">    <span class="type">int</span> t, n, a, caser = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a;</span><br><span class="line">            flag ^= sg[a];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; caser++ &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Alice&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Bob&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2147">kiki’s game</a></p>
<h4 id="Kiki’s-game"><a href="#Kiki’s-game" class="headerlink" title="Kiki’s game"></a>Kiki’s game</h4><h5 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h5><p>给你一个N * M的矩阵， 从（1，M）开始出发，每人可以移动一次：可以向左移动，向下移动，向左下移动，现在给你N，M，问你谁赢。</p>
<h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>本来以为需要sg函数，但总认为需要二维sg,但问题是没见过二维的模板，后来才知道其实是很普通的博弈，只需要把图中的P,N态画出来就一目了然（感觉这个图是真的奇妙啊）。需要记住3点，这也是很多博客提到的：</p>
<ol>
<li>终结态一定为P态，即先手必败</li>
<li>如果一个状态的后继状态全为N态，那么该状态为P态</li>
<li>如果一个状态的后继状态有一个为P态，那么该状态为N态。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m &amp;&amp; n &amp;&amp; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span> &amp;&amp; m &amp; <span class="number">1</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;What a pity!&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Wonderful!&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1847">Good Luck in CET-4 Everybody!</a></p>
<h4 id="Good-Luck-in-CET-4-Everybody"><a href="#Good-Luck-in-CET-4-Everybody" class="headerlink" title="Good Luck in CET-4 Everybody!"></a>Good Luck in CET-4 Everybody!</h4><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>简单的sg模板，后来发现还有更简单的思路</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">64</span>,<span class="number">128</span>,<span class="number">256</span>,<span class="number">512</span>&#125;;</span><br><span class="line"><span class="type">int</span> sg[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sg[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    sg[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    sg[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">1000</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span> &amp;&amp; a[j] &lt; i; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(sg[i - a[j]] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sg[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sg[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sg[n] == <span class="number">0</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Cici&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Kiki&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>博弈</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈题目(三)</title>
    <url>/2019/05/23/%E5%8D%9A%E5%BC%88%E9%A2%98%E7%9B%AE-%E4%B8%89/</url>
    <content><![CDATA[<p>博弈题目(三)</p>
<span id="more"></span>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1525">HDU - 1525</a></p>
<h4 id="Euclid’s-Game"><a href="#Euclid’s-Game" class="headerlink" title="Euclid’s Game"></a>Euclid’s Game</h4><h5 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h5><p>没人每回合进行如下操作: 将两个数字中较大的数字减去较小的数字的倍数，但是不能使最终的数字变为0。谁先将其中一个数字变为0就赢。</p>
<h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>假设两个数字中较大的数字为N， 较小的数字为M</p>
<p>1.如果N &#x3D;&#x3D; M 那么先手赢</p>
<p>2.如果N &gt;&#x3D; 2 * M , 我们知道一定会到达的状态是（N % M， M）, 而先手是可以判断这个状态是必胜态还是必败态的。如果该状态是必胜态，那么先手可以到达(N % M + M, M)状态，那么下个人进行操作之后的状态就是(N %  M, M),所以先手赢。  如果这个状态是必败态，那么先手可以一步就到达(N % M, M)，从而获胜。</p>
<p>3.如果N &lt; 2 * M， 第一步的状态只能是到达(N - M, M), 接下来谁先控制到达 N &gt;&#x3D; 2 * M 或者是 N % M &#x3D;&#x3D; 0，谁就获胜。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num1 = <span class="built_in">min</span>(n , m);</span><br><span class="line">        <span class="type">int</span> num2 = <span class="built_in">max</span>(n , m);</span><br><span class="line">        <span class="keyword">if</span>(num2 % num1 == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Stan wins&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num2 &gt;= <span class="number">2</span> * num1)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Stan wins&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="keyword">if</span>(num1 &gt; num2) <span class="built_in">swap</span>(num1, num2);</span><br><span class="line">               <span class="keyword">if</span>(num2 % num1 == <span class="number">0</span>)  <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">if</span>(num2 &gt; <span class="number">2</span> * num1)  <span class="keyword">break</span>;</span><br><span class="line">               flag = !flag;</span><br><span class="line">               num2 -= num1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Ollie wins&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Stan wins&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://vjudge.net/contest/286681#problem/F">HDU - 2516</a></p>
<h4 id="取石子游戏"><a href="#取石子游戏" class="headerlink" title="取石子游戏"></a>取石子游戏</h4><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>以前没遇到过，看了题解知道是斐波那契博弈。有如下的规定：当且仅当石子的个数是一个斐波那契数的时候，先手必败。下面给出证明：(数学归纳法)</p>
<ol>
<li><p>当i &#x3D; 2，显然成立。</p>
</li>
<li><p>假设当i &lt;&#x3D; k 时，结论成立。</p>
<p>则当i &#x3D; k + 1时，有f[i] &#x3D; f[k] + f[k - 1]成立</p>
<p>我们可以把这堆石子看成两堆（因为f[k] &lt; 2 * f[k-1]，假如先手取完f[k - 1]堆，那么后手就直接赢了）</p>
<p>根据 假设，在取第f[k - 1]堆时，最后一颗石子必定由后手移动。若先手在第f[k - 1]堆中取走&gt;&#x3D; f[k - 1]&#x2F;3， 则后手取走的个数 &lt;&#x3D;  2 * f[k - 1]&#x2F;3,  当正好为2 * f[k - 1]&#x2F; 3时，先手在下一次中最大移动的为4 * f[k - 1]&#x2F; 3 ，我们把这个数字和 f[k]比较，发现后面的数字更大，因此先手的这次移动还是不能改变游戏规则。因此先手必败。 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> f[<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[<span class="number">0</span>] = f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">45</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i] = f[i - <span class="number">1</span>] + f[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> t;</span><br><span class="line">  <span class="built_in">init</span>();</span><br><span class="line">  <span class="keyword">while</span>(cin &gt;&gt; t &amp;&amp; t)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">45</span>; ++i)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span>(f[i] == t)</span><br><span class="line">          &#123;</span><br><span class="line">              flag = <span class="number">1</span>;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(flag)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Second win&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;First win&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><a href="https://vjudge.net/contest/286681#problem/H">HDU - 3032</a></p>
<h4 id="NIM-or-not-NIM"><a href="#NIM-or-not-NIM" class="headerlink" title="NIM or not NIM"></a>NIM or not NIM</h4><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>可以对一堆进行两种操作，问题是一堆中的石子数是很多的，求sg打表超时，后来发现sg也是有规律的，找出规律就和普通NIM一样了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">getSG</span><span class="params">()</span>    <span class="comment">//打表函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sg[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span> , <span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[sg[i - j]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[sg[i - j]^sg[j]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; ; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[j])</span><br><span class="line">            &#123;</span><br><span class="line">                sg[i] = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>主代码</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">elect</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> n - <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">4</span> == <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t, n;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a;</span><br><span class="line">            cin &gt;&gt; a;</span><br><span class="line">            flag ^= <span class="built_in">elect</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Alice&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Bob&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>博弈</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈题目(二)</title>
    <url>/2019/05/22/%E5%8D%9A%E5%BC%88%E9%A2%98%E7%9B%AE-%E4%BA%8C/</url>
    <content><![CDATA[<p>博弈题目(二)</p>
<span id="more"></span>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1536">HDU - 1536 S-NIM</a></p>
<h4 id="S-NIM"><a href="#S-NIM" class="headerlink" title="S-NIM"></a>S-NIM</h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>我看了半天什么XOR的，最后告诉我不用这个信息？光理解题意理解半天，最后发现是最基本的SG函数。不过也遇到坑了，就是f[]数组一定要排序，是递增序列。OJ后台输入和输出的数据是分开的，所以输出结果可以一个字符一个字符输出。</p>
<p><strong>预处理打表</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> sg[<span class="number">10001</span>];</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">10001</span>];</span><br><span class="line"><span class="type">int</span> f[<span class="number">101</span>], t;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getSG</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span> ,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; t &amp;&amp; f[j] &lt;= i; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[sg[i - f[j]]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[j])</span><br><span class="line">            &#123;</span><br><span class="line">                sg[i] = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m, num, n;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; t &amp;&amp; t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; t; ++i)</span><br><span class="line">            cin &gt;&gt; f[i];</span><br><span class="line">        <span class="built_in">sort</span>(f , f + t);</span><br><span class="line">        <span class="built_in">getSG</span>();</span><br><span class="line">        cin &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; n;</span><br><span class="line">            <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                cin &gt;&gt; num;</span><br><span class="line">                flag ^= sg[num];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">                cout &lt;&lt; <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout &lt;&lt; <span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>dfs</strong>   借鉴师哥写的，只是把这个模板记住了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int sg[10011];</span><br><span class="line">int f[101], t , m ,n, num;</span><br><span class="line">int dfsSG(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if(sg[x] != -1)</span><br><span class="line">        return sg[x];</span><br><span class="line"></span><br><span class="line">    bool vis[101] = &#123;0&#125;;</span><br><span class="line">    for(int i = 0; i &lt; t &amp;&amp; f[i] &lt;= x; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        dfsSG(x - f[i]);</span><br><span class="line">        vis[sg[x - f[i]]] = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i = 0; ;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        if(!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">             return sg[x] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while(cin &gt;&gt; t &amp;&amp; t)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i = 0; i &lt; t; ++i)</span><br><span class="line">            cin &gt;&gt; f[i];</span><br><span class="line">        sort(f , f + t);</span><br><span class="line">        memset(sg, -1 , sizeof(sg));</span><br><span class="line">        cin &gt;&gt; m;</span><br><span class="line">         while(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; n;</span><br><span class="line">            int flag = 0;</span><br><span class="line">            for(int j = 0; j &lt; n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                cin &gt;&gt; num;</span><br><span class="line">                flag ^= dfsSG(num);</span><br><span class="line">            &#125;</span><br><span class="line">            if(flag)</span><br><span class="line">                cout &lt;&lt; &#x27;W&#x27;;</span><br><span class="line">            else</span><br><span class="line">                cout &lt;&lt; &#x27;L&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; &#x27;\n&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1527">HDU - 1527 取石子游戏</a></p>
<h4 id="取石子游戏"><a href="#取石子游戏" class="headerlink" title="取石子游戏"></a>取石子游戏</h4><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>典型的威佐夫博弈，真的很奇妙。  </p>
<p>学习网址: <a href="https://blog.csdn.net/y990041769/article/details/21694007">威佐夫博弈</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num = <span class="built_in">abs</span>(n - m);</span><br><span class="line">        <span class="type">int</span> num1 = (<span class="type">int</span>)(((<span class="built_in">sqrt</span>(<span class="number">5</span>) + <span class="number">1</span> )/ <span class="number">2.0</span>) * num);</span><br><span class="line">        <span class="keyword">if</span>(num1 == <span class="built_in">min</span>(n , m))</span><br><span class="line">            cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2177">HDU 2177 </a></p>
<h4 id="取两堆石子"><a href="#取两堆石子" class="headerlink" title="取两堆石子"></a>取两堆石子</h4><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>应用威佐夫博弈的思想，不断枚举，判断取完之后是否构成了奇异状态。忘了在赢的时候写1，一直WA。注意输出的格式，我用set存的。这题还有公式解法，以后再补吧。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">elect</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="built_in">int</span>((<span class="built_in">sqrt</span>(<span class="number">5</span>) + <span class="number">1</span>)/ <span class="number">2.0</span> * <span class="built_in">abs</span>(n - m));</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="built_in">min</span>(n , m))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m &amp;&amp; n &amp;&amp; m)&#123;</span><br><span class="line">        set&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt;S;</span><br><span class="line">        set&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span> &gt; &gt;::iterator it;</span><br><span class="line">    <span class="type">int</span> num = <span class="built_in">elect</span>(n , m);</span><br><span class="line">    <span class="keyword">if</span>(num)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">min</span>(n , m); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num1 = <span class="built_in">elect</span>(n - i, m - i);</span><br><span class="line">        <span class="keyword">if</span>(num1)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">min</span>(n - i, m - i) &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="built_in">max</span>(n - i, m - i) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num1 = <span class="built_in">elect</span>(n - i, m);</span><br><span class="line">        <span class="keyword">if</span>(num1)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(S.<span class="built_in">count</span>(&#123;<span class="built_in">min</span>(n - i , m), <span class="built_in">max</span>(n - i, m)&#125;) == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    cout &lt;&lt; <span class="built_in">min</span>(n - i, m) &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="built_in">max</span>(n - i, m) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                    S.<span class="built_in">insert</span>(&#123;<span class="built_in">min</span>(n - i, m), <span class="built_in">max</span>(n - i, m)&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num1 = <span class="built_in">elect</span>(n, m - i);</span><br><span class="line">        <span class="keyword">if</span>(num1)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span>(S.<span class="built_in">count</span>(&#123;<span class="built_in">min</span>(n  , m - i), <span class="built_in">max</span>(n , m - i)&#125;) == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    cout &lt;&lt; <span class="built_in">min</span>(n , m - i) &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="built_in">max</span>(n , m - i) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                    S.<span class="built_in">insert</span>(&#123;<span class="built_in">min</span>(n , m - i), <span class="built_in">max</span>(n , m - i)&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1850">HDU 1850</a></p>
<h4 id="Being-a-Good-Boy-in-Spring-Festival"><a href="#Being-a-Good-Boy-in-Spring-Festival" class="headerlink" title="Being a Good Boy in Spring Festival"></a>Being a Good Boy in Spring Festival</h4><h5 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h5><p>考察NIM博弈的理解。如果堆数的异或和为0直接输出0.  否则有 a1^a2^a3^an &#x3D; k !&#x3D; 0  肯定存在某个ai改变成为ai’ 后，使得 a1^a2^ai‘^an &#x3D; 0.  我们现在要看看有多少个ai符合这样的条件。看了网上的题解，感觉说的有些模糊，于是我自己又推了一遍。</p>
<p>a1^a2^a3^ai^an &#x3D; k !&#x3D; 0       &#x2F;&#x2F;可以得到a1 ^ a2 ^ a3 ^ an(不包括ai) &#x3D; k^ai</p>
<p> &#x2F;&#x2F;当我们把ai 变为 ai’ 后</p>
<p>a1^a2^a3^ai’^an &#x3D; 0        &#x2F;&#x2F;把上边得到的式子带进来 -&gt; k^ai &#x3D; ai’ </p>
<p>因此只要满足k ^ ai &#x3D; ai’ 就说明我们可以把ai 变为 ai’后  就有异或和为0的局面了。 而这个ai’只要满足 ai’ &lt;&#x3D; ai即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n ; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">            sum ^= a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;0&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> num1 = sum^a[i];</span><br><span class="line">            <span class="keyword">if</span>(num1 &lt; a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; cnt &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    </p>
]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>博弈</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈题目(四)</title>
    <url>/2019/05/24/%E5%8D%9A%E5%BC%88%E9%A2%98%E7%9B%AE-%E5%9B%9B/</url>
    <content><![CDATA[<p>博弈题目&lt;四&gt;</p>
<span id="more"></span>

<p><a href="https://acm.ecnu.edu.cn/contest/173/problem/D/">小花梨的取石子游戏</a></p>
<h4 id="小花梨的取石子游戏"><a href="#小花梨的取石子游戏" class="headerlink" title="小花梨的取石子游戏"></a>小花梨的取石子游戏</h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>我们发现，只要这一堆的石子大于1，那么这堆石子的掌控者就能通过控制取该堆的次数来掌握先机。因此特殊情况就是看看从该堆开始有几个1，比如说  1 1 1 2 2 ，开始有3个1，那么他们每个人只能一个一个拿，第三个1的时候就是先手把第三堆取走，然后后手就可以通过对2 进行直接取走或者是分开取来掌握全局。 因此我们需要记录从该点开始向后找的连续的1的个数，开始我是直接遍历，就超时了，后来想到可以从后往前遍历进行记录。用的时候直接查询就行了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">300001</span>];</span><br><span class="line"><span class="type">int</span> sum[<span class="number">300001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">            <span class="keyword">if</span>(a[i] != <span class="number">1</span>) flag = <span class="number">1</span>;</span><br><span class="line">            a[n + i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    sum[n] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>*n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] != <span class="number">1</span>)  sum[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>  sum[i] = sum[i + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;First&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!flag)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(n &amp; <span class="number">1</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;First&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Second&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] != <span class="number">1</span>) &#123;cout &lt;&lt; <span class="string">&quot;First&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;   <span class="keyword">continue</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span>(sum[i] % <span class="number">2</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Second&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;First&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Index/problemdetail/pid/3893.html">SDUT 3893</a></p>
<h4 id="Return-of-the-nim"><a href="#Return-of-the-nim" class="headerlink" title="Return of the nim"></a>Return of the nim</h4><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>当N &#x3D; 2时是威佐夫博弈，当N &gt; 2是我们需要证明其是NIM博弈</p>
<p>1.当现在是平衡态，即异或和为0的时候，那么1可以执行操作1或者操作2打破平衡态，但是后手可以执行操作1就再次将其转化为平衡态。即假若现在是平衡态，先手必败</p>
<p>2.当现在是非平衡态，那么先手可以执行操作1将其转化为平衡态，即若开始平衡，先手必赢。</p>
<p>以上满足nim博弈。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t, a, b , n;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            <span class="type">int</span> num = <span class="built_in">int</span>(((<span class="built_in">sqrt</span>(<span class="number">5</span>) + <span class="number">1</span> )/ <span class="number">2.0</span>) * <span class="built_in">abs</span>(b - a));</span><br><span class="line">            <span class="keyword">if</span>(num != <span class="built_in">min</span>(a,b))</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Sherlock&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Watson&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a;</span><br><span class="line">            f ^= a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Sherlock&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Watson&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>博弈</tag>
      </tags>
  </entry>
  <entry>
    <title>哈夫曼树及哈夫曼编码</title>
    <url>/2019/04/28/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<p>哈夫曼树又称最优树，是一类带权路径长度最短的树。在本例中我们用它对字符进行编码。首先先创建一个哈夫曼树，然后从叶子节点开始往根上寻找路线，是左子树则编码为0，右子树编码为1.<span id="more"></span> 有一个步骤我们需要将最小的两个权值的叶子结点合并成一个节点，同时还要删除这两个节点，我用的是优先队列，优先队列出来的是权值最小的点，我们把他们合并之后可以很容易的删除。同时要注意哈夫曼树并不唯一，但是他们都具有最小的WPL（树的带权路径长度）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Tnode</span>&#123;</span><br><span class="line">    <span class="type">int</span> w;</span><br><span class="line">    <span class="type">int</span> pos;</span><br><span class="line">    <span class="type">int</span> parent,lchild,rchild;</span><br><span class="line">     <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Tnode &amp;a)<span class="type">const</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">return</span> a.w &lt; w;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;Tnode,*tree;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">priority_queue&lt;Tnode&gt;P;</span><br><span class="line">string s[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">select</span><span class="params">(tree &amp;HT,<span class="type">int</span> &amp;s1, <span class="type">int</span> &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tnode t = P.<span class="built_in">top</span>();</span><br><span class="line">    s1 = t.pos;</span><br><span class="line">    P.<span class="built_in">pop</span>();</span><br><span class="line">    t = P.<span class="built_in">top</span>();</span><br><span class="line">    s2 = t.pos;</span><br><span class="line">    P.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">huffmantree</span><span class="params">(tree &amp;HT)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">2</span> * n - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> s1,s2;</span><br><span class="line">    HT = <span class="keyword">new</span> Tnode[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m ;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        HT[i].parent = HT[i].lchild = HT[i].rchild = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; HT[i].w;</span><br><span class="line">        HT[i].pos = i;</span><br><span class="line">        P.<span class="built_in">push</span>(HT[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= m ;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">select</span>(HT ,s1, s2);</span><br><span class="line">        HT[s1].parent = i;</span><br><span class="line">        HT[s2].parent = i;</span><br><span class="line">        HT[i].lchild = s1;</span><br><span class="line">        HT[i].rchild = s2;</span><br><span class="line">        HT[i].w = HT[s1].w + HT[s2].w;</span><br><span class="line">        HT[i].pos = i ;</span><br><span class="line">        P.<span class="built_in">push</span>(HT[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">huffmancode</span><span class="params">(tree &amp;HT)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> index = i;</span><br><span class="line">        <span class="type">int</span> p = HT[i].parent;</span><br><span class="line">        <span class="keyword">while</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(HT[p].lchild == index)</span><br><span class="line">                s[i] += <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                s[i] += <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            index = p;</span><br><span class="line">            p = HT[p].parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(s[i].<span class="built_in">begin</span>(),s[i].<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree HT;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">huffmantree</span>(HT);</span><br><span class="line">    <span class="built_in">huffmancode</span>(HT);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个字符的权值为：&quot;</span> &lt;&lt; HT[i].w &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个字符的哈夫曼编码为:&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; s[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>哈夫曼编码</tag>
      </tags>
  </entry>
  <entry>
    <title>字典树</title>
    <url>/2019/05/30/%E5%AD%97%E5%85%B8%E6%A0%91/</url>
    <content><![CDATA[<p>开始学习字典树，记录一下。</p>
<span id="more"></span>

<p>字典树的巧妙就在于把所有的单词都放在了一棵树中，那么当你查询的时候，你只要查询这棵树就行，而不是遍历每个单词。</p>
<p><a href="https://www.cnblogs.com/TheRoadToTheGold/p/6290732.html">学习网站</a></p>
<h4 id="查询输入的单词中是否出现了该前缀。"><a href="#查询输入的单词中是否出现了该前缀。" class="headerlink" title="查询输入的单词中是否出现了该前缀。"></a>查询输入的单词中是否出现了该前缀。</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//查询一些单词中某个前缀是否出现过</span></span><br><span class="line"><span class="type">int</span> tree[<span class="number">10005</span>][<span class="number">26</span>];     <span class="comment">//第一维大小应该是所有字母的总长度</span></span><br><span class="line"><span class="type">int</span> tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tree[rt][x])</span><br><span class="line">        &#123;</span><br><span class="line">            tree[rt][x] = ++tot;</span><br><span class="line">        &#125;</span><br><span class="line">        rt = tree[rt][x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(string s)</span>      <span class="comment">//查询是否出现过这个前缀</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tree[rt][x])  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        rt = tree[rt][x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="built_in">insert</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(s))</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;have found&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;not found&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="查询一些单词中是否出现了某个单词。"><a href="#查询一些单词中是否出现了某个单词。" class="headerlink" title="查询一些单词中是否出现了某个单词。"></a>查询一些单词中是否出现了某个单词。</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//查询一些单词中某个单词是否出现过</span></span><br><span class="line"><span class="type">int</span> tree[<span class="number">10005</span>][<span class="number">26</span>];     </span><br><span class="line"><span class="type">int</span> tot = <span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> is[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tree[rt][x])</span><br><span class="line">        &#123;</span><br><span class="line">            tree[rt][x] = ++tot;</span><br><span class="line">        &#125;</span><br><span class="line">        rt = tree[rt][x];</span><br><span class="line">    &#125;</span><br><span class="line">    is[rt] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(string s)</span>      <span class="comment">//查询是否出现过这个单词</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tree[rt][x])  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        rt = tree[rt][x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> is[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="built_in">insert</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(s))</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;have found&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;not found&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="查询在某些单词中一个单词的出现次数"><a href="#查询在某些单词中一个单词的出现次数" class="headerlink" title="查询在某些单词中一个单词的出现次数"></a>查询在某些单词中一个单词的出现次数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//查询一些单词中某个单词的出现次数</span></span><br><span class="line"><span class="type">int</span> tree[<span class="number">10005</span>][<span class="number">26</span>];     </span><br><span class="line"><span class="type">int</span> tot = <span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> is[<span class="number">10005</span>];</span><br><span class="line"><span class="type">int</span> sum[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tree[rt][x])</span><br><span class="line">        &#123;</span><br><span class="line">            tree[rt][x] = ++tot;</span><br><span class="line">        &#125;</span><br><span class="line">        sum[tree[rt][x]]++;</span><br><span class="line">        rt = tree[rt][x];</span><br><span class="line">    &#125;</span><br><span class="line">    is[rt] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(string s)</span>      <span class="comment">//查询出现这个单词的次数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tree[rt][x])  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        rt = tree[rt][x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="built_in">insert</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">find</span>(s) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实这三种代码都是稍微改动了一下，重要的是理解trie树的构建。</p>
]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>字典树</tag>
      </tags>
  </entry>
  <entry>
    <title>字典树练习</title>
    <url>/2019/05/30/%E5%AD%97%E5%85%B8%E6%A0%91%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<p>字典树相关习题练习</p>
<span id="more"></span>

<p><a href="http://codevs.cn/problem/4189/">字典</a></p>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>字典树模板，注意数组大小</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//查询一些单词中某个前缀是否出现过</span></span><br><span class="line"><span class="type">int</span> tree[<span class="number">2000005</span>][<span class="number">26</span>];     <span class="comment">//第一维代表字母的最大长度</span></span><br><span class="line"><span class="type">int</span> tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Insert</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tree[rt][x])</span><br><span class="line">        &#123;</span><br><span class="line">            tree[rt][x] = ++tot;</span><br><span class="line">        &#125;</span><br><span class="line">        rt = tree[rt][x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(string s)</span>      <span class="comment">//查询是否出现过这个前缀</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tree[rt][x])  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        rt = tree[rt][x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n ;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="built_in">Insert</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Find</span>(s))</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="统计难题"><a href="#统计难题" class="headerlink" title="统计难题"></a>统计难题</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1251">HDU - 1251</a></p>
<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>依然是模板题，注意回车的判断。可以是getline，然后判断字符串长度为0，或者是gets &#x3D;&#x3D; NULL，但是gets读入的是字符串</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//查询一些单词中某个单词的出现次数</span></span><br><span class="line"><span class="type">int</span> tree[<span class="number">2000005</span>][<span class="number">26</span>];</span><br><span class="line"><span class="type">int</span> tot = <span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> is[<span class="number">2100005</span>];</span><br><span class="line"><span class="type">int</span> sum[<span class="number">2100005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tree[rt][x])</span><br><span class="line">        &#123;</span><br><span class="line">            tree[rt][x] = ++tot;</span><br><span class="line">        &#125;</span><br><span class="line">        sum[tree[rt][x]]++;</span><br><span class="line">        rt = tree[rt][x];</span><br><span class="line">    &#125;</span><br><span class="line">    is[rt] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(string s)</span>      <span class="comment">//查询出现这个单词的次数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tree[rt][x])  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        rt = tree[rt][x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(cin, s))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">insert</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">find</span>(s) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Shortest-Prefixes"><a href="#Shortest-Prefixes" class="headerlink" title="Shortest Prefixes"></a>Shortest Prefixes</h3><p><a href="http://poj.org/problem?id=2001">POJ - 2001</a></p>
<h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>要求一个字符串的在能够唯一辨认的前提下的最小前缀。</p>
<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>我们先把所有的单词放在字典树中，然后枚举每个单词，在每个单词中枚举每个字母，如果发现这个前缀的出现的次数等于1，那么就直接输出。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> tree[<span class="number">20005</span>][<span class="number">26</span>];</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">20005</span>];</span><br><span class="line"><span class="type">int</span> sum[<span class="number">20005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tree[rt][x])</span><br><span class="line">            tree[rt][x] = ++tot;</span><br><span class="line">        sum[tree[rt][x]]++;</span><br><span class="line">        rt = tree[rt][x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tree[rt][x])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        rt = tree[rt][x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    vector&lt;string&gt;V;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">insert</span>(s);</span><br><span class="line">        V.<span class="built_in">push_back</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; V.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        string s1;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; V[i].<span class="built_in">size</span>(); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            s1 += V[i][j];</span><br><span class="line">            <span class="type">int</span> num = <span class="built_in">find</span>(s1);</span><br><span class="line">            <span class="keyword">if</span>(num == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                cout &lt;&lt; V[i] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; s1 &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; V[i] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; s1 &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>字典树</tag>
      </tags>
  </entry>
  <entry>
    <title>小土堆视频笔记</title>
    <url>/2024/04/16/%E5%B0%8F%E5%9C%9F%E5%A0%86%E8%A7%86%E9%A2%91%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>小土堆pytorch学习记录</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">过程记录</span><br><span class="line">1.cmd中nvidia-smi 可以查看最高支持的cuda版本</span><br><span class="line">2.创建与删除虚拟环境</span><br><span class="line">conda create -n myenv python=3.8</span><br><span class="line">conda remove -n myenv --all</span><br><span class="line">查看虚拟环境的路径</span><br><span class="line">conda info --envs</span><br><span class="line">conda env list</span><br><span class="line">3.在torch官网中，最好使用pip install ,不用conda install下载torch</span><br><span class="line">4.在虚拟环境中 需要使用conda install nb_conda 下载jupyter 相关依赖</span><br><span class="line">这样就可以在jupyter中使用虚拟环境(应该和ipython相关)</span><br></pre></td></tr></table></figure>



<h4 id="1-torchvision-datasets以及DataLoader的使用"><a href="#1-torchvision-datasets以及DataLoader的使用" class="headerlink" title="1. torchvision.datasets以及DataLoader的使用"></a>1. torchvision.datasets以及DataLoader的使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;dataset1&#x27;</span>,train=<span class="literal">False</span>,transform=torchvision.transforms.ToTensor())</span><br><span class="line">data_loader = DataLoader(test_data,batch_size=<span class="number">64</span>,shuffle=<span class="literal">True</span>,num_workers=<span class="number">0</span>,drop_last=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    step = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> data_loader:</span><br><span class="line">        img, label = data</span><br><span class="line">        writer.add_images(<span class="string">&quot;dataloader &#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch), img, step)</span><br><span class="line">        step = step + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">writer.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#在terminal中输入tensorboard --logdir=logs</span></span><br></pre></td></tr></table></figure>

<h4 id="2-文件的创建以及写入"><a href="#2-文件的创建以及写入" class="headerlink" title="2. 文件的创建以及写入"></a>2. 文件的创建以及写入</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(root_path,out_path,<span class="string">&quot;&#123;&#125;.txt&quot;</span>.<span class="built_in">format</span>(name)), <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     f.write(content)</span><br></pre></td></tr></table></figure>

<h4 id="3-PIL-Image的转换"><a href="#3-PIL-Image的转换" class="headerlink" title="3.PIL Image的转换"></a>3.PIL Image的转换</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>将Image转换为np.array, shape=H*W*C</span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">root_path = <span class="string">&quot;dataset/train/ants_image/0013035.jpg&quot;</span></span><br><span class="line">image = Image.<span class="built_in">open</span>(root_path)</span><br><span class="line">image.show()  <span class="comment">#查看图片</span></span><br><span class="line">image = np.array(image)</span><br><span class="line">writer.add_image(<span class="string">&quot;test&quot;</span>,image,<span class="number">1</span>,dataformats=<span class="string">&#x27;HWC&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>将Image转换为tensor 不需要转换通道，tensor格式就是c*h*w</span><br><span class="line">trans = transforms.ToTensor()</span><br><span class="line">image = trans(image)</span><br><span class="line">writer.add_image(<span class="string">&quot;test&quot;</span>,image,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>先resize然后转换为tensor</span><br><span class="line">tran_resize2 = transforms.Resize(<span class="number">512</span>)</span><br><span class="line">tran_tensor = transforms.ToTensor()</span><br><span class="line">tran_compose = transforms.Compose([tran_resize2,tran_tensor])</span><br><span class="line">img_compose = tran_compose(image)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-自定义dataset"><a href="#4-自定义dataset" class="headerlink" title="4.自定义dataset"></a>4.自定义dataset</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">mydata</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root_path, label_path</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root_path = root_path</span><br><span class="line">        <span class="variable language_">self</span>.label_path = label_path</span><br><span class="line">        <span class="variable language_">self</span>.img_path = os.path.join(root_path, label_path)</span><br><span class="line">        <span class="variable language_">self</span>.img_list = os.listdir(<span class="variable language_">self</span>.img_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        img_name = <span class="variable language_">self</span>.img_list[idx]</span><br><span class="line">        img = Image.<span class="built_in">open</span>(os.path.join(<span class="variable language_">self</span>.img_path, img_name))</span><br><span class="line">        label = <span class="variable language_">self</span>.label_path</span><br><span class="line">        <span class="keyword">return</span> img, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.img_list)</span><br><span class="line"></span><br><span class="line">root_path = <span class="string">&quot;dataset/train&quot;</span></span><br><span class="line">ants_label_path = <span class="string">&quot;ants&quot;</span></span><br><span class="line">bees_label_path = <span class="string">&quot;bees&quot;</span></span><br><span class="line">ants_datalist = mydata(root_path, ants_label_path)</span><br><span class="line">bees_datalist = mydata(root_path, bees_label_path)</span><br><span class="line">train_datalist = ants_datalist + bees_datalist</span><br></pre></td></tr></table></figure>

<h4 id="5-改变tensor维度"><a href="#5-改变tensor维度" class="headerlink" title="5.改变tensor维度"></a>5.改变tensor维度</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">64</span>*<span class="number">1</span>*<span class="number">28</span>*<span class="number">28</span>)</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line">a = torch.randn(<span class="number">64</span>,<span class="number">1</span>,<span class="number">28</span>,<span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">a=a.view(-<span class="number">1</span>,<span class="number">28</span>*<span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">a=torch.reshape(a,(-<span class="number">1</span>,<span class="number">28</span>*<span class="number">28</span>))</span><br><span class="line"></span><br><span class="line">flatten = nn.Flatten()</span><br><span class="line">a=flatten(a)</span><br><span class="line"></span><br><span class="line">a = a.reshape(a.shape[<span class="number">0</span>],-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h4 id="6-model的保存与加载"><a href="#6-model的保存与加载" class="headerlink" title="6.model的保存与加载"></a>6.model的保存与加载</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">非预训练的vgg16模型</span><br><span class="line">vgg16 = torchvision.models.vgg16(weights=None)</span><br><span class="line">两种保存方式</span><br><span class="line">1.torch.save(vgg16, &quot;vgg16.pth&quot;)</span><br><span class="line">2.torch.save(vgg16.state_dict(), &#x27;vgg16.pth&#x27;)</span><br><span class="line"></span><br><span class="line">对应的两种加载方式</span><br><span class="line">1.vgg16=torch.load(&#x27;vgg16.pth&#x27;)</span><br><span class="line">2.vgg16 = torchvision.models.vgg16(weights=None)</span><br><span class="line">vgg16.load_state_dict(torch.load(&#x27;vgg16.pth&#x27;))</span><br></pre></td></tr></table></figure>

<h4 id="7-总的模型"><a href="#7-总的模型" class="headerlink" title="7.总的模型"></a>7.总的模型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取数据</span></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(<span class="string">&#x27;data&#x27;</span>,train=<span class="literal">True</span>,download=<span class="literal">True</span>,transform=torchvision.transforms.ToTensor())</span><br><span class="line">test_data = torchvision.datasets.CIFAR10(<span class="string">&#x27;data&#x27;</span>,train=<span class="literal">True</span>,download=<span class="literal">True</span>,transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">train_loader = DataLoader(train_data,batch_size=<span class="number">64</span>,shuffle=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(test_data, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据长度</span></span><br><span class="line">train_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_size = <span class="built_in">len</span>(test_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#加载模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">32</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        output = <span class="variable language_">self</span>.model(x)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">tudui = Tudui()</span><br><span class="line">tudui = tudui.cuda()</span><br><span class="line"></span><br><span class="line"><span class="comment">#损失函数</span></span><br><span class="line">loss_func = nn.CrossEntropyLoss()</span><br><span class="line">loss_func = loss_func.cuda()</span><br><span class="line"></span><br><span class="line"><span class="comment">#优化器</span></span><br><span class="line">optimizer = torch.optim.SGD(tudui.parameters(),lr=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">epoch = <span class="number">20</span></span><br><span class="line">train_cnt = <span class="number">0</span></span><br><span class="line">test_cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;nn_model&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line">    train_loss = <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---------第&#123;&#125;次迭代开始了------------&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_loader:</span><br><span class="line">        imgs, labels = data</span><br><span class="line">        imgs = imgs.cuda()</span><br><span class="line">        labels = labels.cuda()</span><br><span class="line">        output = tudui(imgs)</span><br><span class="line">        loss = loss_func(output, labels)</span><br><span class="line"></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        train_loss += loss.item()</span><br><span class="line">        train_cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> train_cnt % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;第&#123;&#125;次训练的损失是&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_cnt,loss.item()))</span><br><span class="line">            writer.add_scalar(<span class="string">&#x27;train_loss&#x27;</span>,loss.item(), train_cnt)</span><br><span class="line"></span><br><span class="line">    test_loss = <span class="number">0</span></span><br><span class="line">    acc = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">            imgs, labels = data</span><br><span class="line">            imgs = imgs.cuda()</span><br><span class="line">            labels = labels.cuda()</span><br><span class="line">            output = tudui(imgs)</span><br><span class="line">            loss = loss_func(output, labels)</span><br><span class="line">            acc += (output.argmax(<span class="number">1</span>) == labels).<span class="built_in">sum</span>()</span><br><span class="line">            test_loss += loss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第&#123;&#125;次迭代后的损失为&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i,test_loss))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第&#123;&#125;次迭代后的acc为&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i,acc/test_size))</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;test_loss&quot;</span>,loss,i)</span><br><span class="line"></span><br><span class="line">    torch.save(tudui, <span class="string">&#x27;vgg_&#123;&#125;.pth&#x27;</span>.<span class="built_in">format</span>(i))</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>



<h4 id="8-其余的一些函数"><a href="#8-其余的一些函数" class="headerlink" title="8.其余的一些函数"></a>8.其余的一些函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>numpy转换为tensor</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">b=torch.from_numpy(a)</span><br><span class="line">pirnt(b)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>其余类型转换为tensor</span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">tensor = torch.tensor(<span class="built_in">list</span>)</span><br><span class="line">tensor = torch.tensor([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]],dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>改变模型的某一层</span><br><span class="line">vgg16_false = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line">vgg16_true = torchvision.models.vgg16(pretrained=<span class="literal">True</span>)</span><br><span class="line">vgg16_true.classifier.add_module(<span class="string">&quot;last&quot;</span>,nn.Linear(<span class="number">1000</span>,<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(vgg16_true)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
        <tag>cnn</tag>
      </tags>
  </entry>
  <entry>
    <title>山东省第二届ACM - Ivan comes again!</title>
    <url>/2019/04/30/%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%AC%AC%E4%BA%8C%E5%B1%8AACM-Ivan-comes-again/</url>
    <content><![CDATA[<p>题目链接：<a href="https://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Index/problemdetail/pid/2159.html">Ivan comes again!</a></p>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>有一个矩阵，有三种操作，add A B代表给矩阵的第A行B列的元素标记。 find A B代表让你输出 某一个标记元素的下标 ，且满足对应的下标分别大于A ,B， 如果没有就输出-1 . remove 代表移走该位置的标记。</p>
<span id="more"></span>

<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>一开始就想的用set存，但是没用过set里面存pair,开始set里存的结构体，结构体里再写个排序，但最终不太对，又换成pair了，不得不说是真的方便，add和remove函数用Insert和erase。至于查找则用upper_bound. </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,A,B,caser = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &amp;&amp; n)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Case %d:\n&quot;</span>,caser++);</span><br><span class="line">    string s;</span><br><span class="line">    set&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt;S;</span><br><span class="line">    set&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n ; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; s &gt;&gt; A &gt;&gt; B;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            S.<span class="built_in">insert</span>(&#123;A,B&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            S.<span class="built_in">erase</span>(&#123;A,B&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;f&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            it = S.<span class="built_in">upper_bound</span>(&#123;A,B&#125;);</span><br><span class="line">            <span class="keyword">for</span>(; it != S.<span class="built_in">end</span>(); it ++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(it -&gt; first &gt; A &amp;&amp; it -&gt; second &gt; B)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(it == S.<span class="built_in">end</span>())</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout &lt;&lt; it -&gt; first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; it -&gt; second &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title>山东省第八届ACM省赛 总结</title>
    <url>/2019/05/09/%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%AC%AC%E5%85%AB%E5%B1%8AACM%E7%9C%81%E8%B5%9B-%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><a href="https://acm.sdut.edu.cn/onlinejudge2/index.php?m=&c=Index&a=problemlist&p=24">题目链接</a></p>
<p>总结今天下午的做题情况：做了一下第八届省赛的题目，A了3个题，做的第4个题简直是太坑了。看了题解后，真的想实名吐槽一下这个题目。（当然既然有做出来的，说明也是我的问题）</p>
<span id="more"></span>

<h4 id="F题"><a href="#F题" class="headerlink" title="F题"></a>F题</h4><p>这就是我想说的题目，我把复数考虑了进去，认为如果二次方程有复数解，也应该输出NO，谁知道按照题目的意思，这也是无解的情况，输出YES，因为这一点我A的好辛苦啊。剩下的分类讨论就行了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,a ,b ,c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span> &amp;&amp; c == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span> &amp;&amp; c != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">0</span> &amp;&amp; b != <span class="number">0</span> &amp;&amp; c == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">0</span> &amp;&amp; b != <span class="number">0</span> &amp;&amp; c != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( (-c) % b == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> num = b * b - <span class="number">4</span> * a * c;</span><br><span class="line">        <span class="keyword">if</span>(num &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">-11</span> ; i &lt;= <span class="number">11</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num == i * i)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> num1 = -b + (<span class="type">int</span>)<span class="built_in">sqrt</span>(num);</span><br><span class="line">        <span class="type">int</span> num2 = -b - (<span class="type">int</span>)<span class="built_in">sqrt</span>(num);</span><br><span class="line">        <span class="keyword">if</span>(num1 % (<span class="number">2</span> * a) != <span class="number">0</span> || num2 % (<span class="number">2</span> * a) != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="G题"><a href="#G题" class="headerlink" title="G题"></a>G题</h4><p>快速幂模板题。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">quick</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    a = a % mod;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b % <span class="number">2</span>)</span><br><span class="line">            ans = ans * a % mod;</span><br><span class="line">        b = b / <span class="number">2</span>;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n,m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt;m ;</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = (sum + <span class="built_in">quick</span>(i,m)) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="I题"><a href="#I题" class="headerlink" title="I题"></a>I题</h4><p>先找出规律，和五一假期一次比赛的差不多，这个还简单点。看这个数对3取余的结果就行。本来想用JAVA写，后来想想直接用了大数取余。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">elect</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = (sum  * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>) % <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> c = <span class="built_in">elect</span>(s);</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="number">0</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&#x27;0&#x27;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&#x27;1&#x27;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="J题"><a href="#J题" class="headerlink" title="J题"></a>J题</h4><p>感觉和以前做的一道题目也差不多，当时没有A，今天重新再做的时候思路就很明确了，先把每个数字从小到大排个序，然后从大数开始往前看，究竟下面的小数可不可以加呢，我们需要判断一下他对整体的结果有利没有，有的话就加上，同时还要更新总体的sum。这个题目还有注意的是sum会爆int。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> cnt,val;</span><br><span class="line">&#125;a[<span class="number">200001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.val &gt; b.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> b[<span class="number">200001</span>];</span><br><span class="line"><span class="type">int</span> sum1[<span class="number">200001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>,a + n + <span class="number">1</span>,cmp);</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    sum1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n ; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= a[i].cnt; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            b[++tot] = a[i].val;</span><br><span class="line">            sum1[tot] = sum1[tot - <span class="number">1</span>] + b[tot];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(sum1[i - <span class="number">1</span>] + b[i] &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum = sum + sum1[i - <span class="number">1</span>] + b[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>比赛总结</tag>
      </tags>
  </entry>
  <entry>
    <title>山东省第五届ACM省赛 总结</title>
    <url>/2019/05/05/%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%AC%AC%E4%BA%94%E5%B1%8AACM%E7%9C%81%E8%B5%9B-%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>山东省第五届ACM省赛</p>
<span id="more"></span>

<p><a href="https://acm.sdut.edu.cn/onlinejudge2/index.php?m=&c=Index&a=problemlist&p=17">比赛题目</a></p>
<p>总结：大约拿出了2个多小时的时间来看题，一个是开始的时间有点晚了，同时后期卡在一个题上纠结，也就不想做了，共A了4道题，看了看当年的榜单，也就是混个铜牌的末尾。但是如今大家都进步了，更不应该松懈了。</p>
<h4 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h4><p>纯粹的数学题，做这道题真的让我怀疑我的数学水平了，y’ &#x3D; 2ax + b，我竟然认为在x处的切线的斜率是2a, 关键是求出抛物线的表达式，然后进行积分，这道题最后才A了，真的不应该啊。好处就是这种题不会WA，一遍过。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> a;</span><br><span class="line">    <span class="type">double</span> P,T;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf %lf&quot;</span>,&amp;P,&amp;T,&amp;a);</span><br><span class="line">        <span class="type">double</span> b = <span class="built_in">tan</span>(a);</span><br><span class="line">        <span class="type">double</span> num;</span><br><span class="line">        num = ( b * P ) / (-(<span class="number">2.0</span> * T * P) + (T * T));</span><br><span class="line">        <span class="type">double</span> sum;</span><br><span class="line">        sum = (num * T * T * T )/ <span class="number">3.0</span> + (b * T * T) / <span class="number">2.0</span> - <span class="number">0.5</span> * (<span class="number">2</span> * num * T + b) * (P - T) * (P - T);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.3f\n&quot;</span>,sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="E题"><a href="#E题" class="headerlink" title="E题"></a>E题</h4><p>签到题，求10以内的阶乘</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum *= i;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="F题"><a href="#F题" class="headerlink" title="F题"></a>F题</h4><p>给你一颗完全二叉树，给你任意两个节点的标号，问你这两个节点之间的最短距离是多少。第一次看的时候没思路，看A的人比较多之后，就有思路了。我们先把深度较深的节点往上找他的祖先，知道他的祖先和那个较浅的节点是兄弟节点，同时我们记录好较深的节点移动了几次，假设是m次。这样之后我们只需要求两个同深度的节点他们的最短距离，我们同时把他们往上移，直到他们的祖先相同，假设移动的次数是n次，那么这两个同深度的节点的距离就是2 * n，最后2 * n + m就是答案</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">10000010</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">deep</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">floor</span>(<span class="built_in">log2</span>(n)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t, n, m, n1, m1;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">        n1 = <span class="built_in">max</span>(n , m);</span><br><span class="line">        m1 = <span class="built_in">min</span>(n , m);</span><br><span class="line">        <span class="type">int</span> dp1 = <span class="built_in">deep</span>(n1);</span><br><span class="line">        <span class="type">int</span> dp2 = <span class="built_in">deep</span>(m1);</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(dp1 &gt; dp2)</span><br><span class="line">        &#123;</span><br><span class="line">            n1 /= <span class="number">2</span>;</span><br><span class="line">            dp1 = <span class="built_in">deep</span>(n1);</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n1 != m1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; ;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                n1 /= <span class="number">2</span>;</span><br><span class="line">                m1 /= <span class="number">2</span>;</span><br><span class="line">                sum += <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(n1 == m1)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="G题"><a href="#G题" class="headerlink" title="G题"></a>G题</h4><p>比赛的时候没有A，赛后补题发现是dp，发现很多排列组合的题都是dp,找一个一般的状态，都与它的前一状态相关。比如说这道题，设置$ dp[i][j] $ 为前i场比赛用了j种桌子的方法数目</p>
<p>有如下递推式:</p>
<p>$$ dp[i][j]  &#x3D;   dp[i - 1][j]  \times j +   dp[i][j]   \times (m - j + 1)$$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> dp[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> mod = <span class="number">1000000007</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">min</span>(m, i); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j] = (dp[i - <span class="number">1</span>][j] * j % mod + dp[i - <span class="number">1</span>][j - <span class="number">1</span>] * (m - j + <span class="number">1</span>) % mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[n][m] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="J题"><a href="#J题" class="headerlink" title="J题"></a>J题</h4><p>告诉你一个序列 ，x1,x2,x3,xn  以及每个值对应w1,w2,w3,wn;</p>
<p>现在问你满足要求的某一个Xk是哪一个数字。</p>
<p>我们看到题目中有个xi &lt; xk 和 xi &gt; xk 就要想到排序了，同时我们要用前缀和记录前i个数字的和，这样当我们遍历到第i个数字的时候，我们就可以在O（1）时间表达出 第i个数字之前的所有数字的和，以及第i个数字之后的所有数字的和。就可以在O（n）的复杂度内算出Xk的值。WA了两次，是因为没有注意long long。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">10000010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> x ,w;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">   <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n) != EOF)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].x);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">long</span> <span class="type">long</span> SUM = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].w);</span><br><span class="line">           SUM += a[i].w;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">sort</span>(a + <span class="number">1</span>,a + n + <span class="number">1</span>,cmp);</span><br><span class="line">       sum[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">       &#123;</span><br><span class="line">           sum[i] = sum[i - <span class="number">1</span>] + a[i].w;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="type">double</span> num1 = (<span class="type">double</span>)sum[i - <span class="number">1</span>];</span><br><span class="line">           <span class="type">double</span> num2 = (<span class="type">double</span>)(sum[n] - sum[i]);</span><br><span class="line">           <span class="keyword">if</span>(num1 &lt; (SUM * <span class="number">1.0</span>) / <span class="number">2</span> &amp;&amp; ((num2 &lt; (SUM * <span class="number">1.0</span>)/ <span class="number">2</span>) || <span class="built_in">fabs</span>(num2 - (SUM * <span class="number">1.0</span>)/ <span class="number">2</span>) &lt; eps))</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[i].x);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>比赛总结</tag>
      </tags>
  </entry>
  <entry>
    <title>山东省第六届ACM比赛 总结</title>
    <url>/2019/05/07/%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%AC%AC%E5%85%AD%E5%B1%8AACM%E6%AF%94%E8%B5%9B-%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>山东省第六届ACM省赛题目</p>
<span id="more"></span>

<p><a href="https://acm.sdut.edu.cn/onlinejudge2/index.php?m=&c=Index&a=problemlist&p=19">题目链接</a></p>
<p>总结：这都是什么神仙题目，虽然说有简单的，但是感觉好几道题涉及到的知识点我以前没怎么重视过。看到师哥队昨晚这场比赛A了9道，本以为题目难度还行，看来是我高估自己了（师哥太强了）。好在是过的题目都是一遍过，罚时还是不错的。</p>
<h5 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h5><p>给你一些人的身高和体重，先把身高从小到大排个序，然后奇数号是一个队，偶数号是一个队，然后我们需要看哪个队伍的体重大一些，体重大的就赢得最后的比赛。考察结构体排序。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">double</span> h,w;</span><br><span class="line">&#125;a[<span class="number">201</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a ,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.h &lt; b.h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>,&amp;a[i].h,&amp;a[i].w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(a + <span class="number">1</span>,a + n + <span class="number">1</span>,cmp);</span><br><span class="line">        <span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> sum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += a[i].w;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sum1 += a[i].w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; sum1)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;red&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; sum1)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;blue&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;fair&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h5><p>第一眼看完题目就想到了用multiset，因为multiset可以自动排好序，同时还不会去重。然后我们找的时候从multiset里挨着找就行了。然后删除的时候，我们只需要删除一个数字，而不是全删除，这个需要注意。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,n,A;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        multiset&lt;<span class="type">int</span>&gt;M;</span><br><span class="line">        multiset&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; s;</span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;A);</span><br><span class="line">                M.<span class="built_in">insert</span>(A);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;A);</span><br><span class="line">                M.<span class="built_in">erase</span>(M.<span class="built_in">find</span>(A));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(it = M.<span class="built_in">begin</span>(); it != M.<span class="built_in">end</span>(); ++it)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(M.<span class="built_in">count</span>(*it) == <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        flag = <span class="number">0</span>;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*it);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;none\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="C题"><a href="#C题" class="headerlink" title="C题"></a>C题</h5><p>一道博弈题，一般我看到博弈就想直接放弃的，但是看到A的人挺多，不做的话也没题做啊QWQ。开始的时候写了前几个数字的答案，没发现什么。再后来重新做的时候，发现原来前面做错了几个数字，再理一遍思路，写出前几个数的答案，发现大于2的时候，全是另一个人赢，于是果断（其实是小心翼翼）的写了一个简单的代码就交了。A了，看来有的时候还真是需要敢想敢写。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> t, n;</span><br><span class="line">   cin &gt;&gt; t;</span><br><span class="line">   <span class="keyword">while</span>(t--)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="type">long</span> <span class="type">long</span> num;</span><br><span class="line">     cin &gt;&gt; num;</span><br><span class="line">     <span class="keyword">if</span>(num &lt;= <span class="number">2</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;zbybr&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;blankcqk&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="F题"><a href="#F题" class="headerlink" title="F题"></a>F题</h5><p>题目是读懂了，需要达到三角形内部的三边共点，问题是真的不知道怎么写啊。后来看别人的题解，发现有个赛瓦定理，好吧，原谅我数学真的不好。同时还需要二分。后来WA的原因也是因为eps开的精度不够高。附上赛瓦定理的图：</p>
<p><img src="/%E8%B5%9B%E7%93%A6%E5%AE%9A%E7%90%86.jpg"></p>
<p>塞瓦定理是指在△ABC内任取一点O，延长AO、BO、CO分别交对边于D、E、F，则          </p>
<p>$$\frac{BD}{DC}\times\frac{CE}{EA}\times\frac{AF}{FB} &#x3D; 1$$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> n;</span><br><span class="line">   <span class="type">double</span> t1,t2,t3;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">   <span class="keyword">while</span>(n--)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf %lf&quot;</span>,&amp;t1,&amp;t2,&amp;t3);</span><br><span class="line">       <span class="type">double</span> b = <span class="built_in">min</span>(t1,t2);</span><br><span class="line">       b = <span class="built_in">min</span>(b,t3);</span><br><span class="line">       <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">       <span class="type">double</span> l = <span class="number">0.0</span> , r = b;</span><br><span class="line">       <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">           <span class="type">double</span> sum = <span class="number">1</span>;</span><br><span class="line">           <span class="type">double</span> num1 = mid/t1;</span><br><span class="line">           <span class="type">double</span> num2 = <span class="number">1</span> - mid/t1;</span><br><span class="line">           <span class="type">double</span> num3 = num2/num1;</span><br><span class="line">           sum *= num3;</span><br><span class="line">           num1 = mid/t2;</span><br><span class="line">           num2 = <span class="number">1</span> - mid/t2;</span><br><span class="line">           num3 = num2/num1;</span><br><span class="line">           sum *= num3;</span><br><span class="line">           num1 = mid/t3;</span><br><span class="line">           num2 = <span class="number">1</span> - mid/t3;</span><br><span class="line">           num3 = num2/num1;</span><br><span class="line">           sum *= num3;</span><br><span class="line">           <span class="keyword">if</span>(<span class="built_in">fabs</span>(sum - <span class="number">1.0</span>) &lt; eps)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;YES %.4f\n&quot;</span>,mid);</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(sum &gt; <span class="number">1</span>)  l = mid;</span><br><span class="line">           <span class="keyword">else</span> r = mid;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(!flag)</span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="H题"><a href="#H题" class="headerlink" title="H题"></a>H题</h5><p>   <a href="https://yuntengzhiyu.github.io/2019/05/08/square%20numbers/">题解链接</a></p>
<h5 id="J题"><a href="#J题" class="headerlink" title="J题"></a>J题</h5><p>题目很简单，就是看两个数是不是相等，同时两个数还得都是11的倍数。注意题目中的数字可以非常大。师哥正好看到我在做这个题，当场指出我的错误，同时又耐心的告诉了我大数取模的处理方法。以前没涉及到这个，又收获了一点。</p>
<ul>
<li>c++</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M1 = <span class="number">11</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> t;</span><br><span class="line">   cin &gt;&gt; t;</span><br><span class="line">   <span class="keyword">while</span>(t--)</span><br><span class="line">   &#123;</span><br><span class="line">       string s,s1;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        cin &gt;&gt; s1;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>() != s<span class="number">1.</span><span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == s1[i])</span><br><span class="line">                cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt == s.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum1 = (sum1 * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>) % M1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum1 == <span class="number">0</span> &amp;&amp; flag == <span class="number">0</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JAVA</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">( String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner cin = <span class="keyword">new</span> <span class="built_in">Scanner</span>(System.in);</span><br><span class="line">		<span class="type">int</span> t;</span><br><span class="line">		BigInteger a,b;</span><br><span class="line">		t = cin.<span class="built_in">nextInt</span>();</span><br><span class="line">		<span class="keyword">while</span>(t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		a = cin.<span class="built_in">nextBigInteger</span>();</span><br><span class="line">		b = cin.<span class="built_in">nextBigInteger</span>();</span><br><span class="line">		<span class="keyword">if</span>(a.<span class="built_in">compareTo</span>(b) != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a.<span class="built_in">mod</span>(BigInteger.<span class="built_in">valueOf</span>(<span class="number">11</span>)).<span class="built_in">compareTo</span>(BigInteger.<span class="built_in">valueOf</span>(<span class="number">0</span>)) == <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">			          System.out.<span class="built_in">println</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>比赛总结</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之图的遍历BFS 邻接表+链栈</title>
    <url>/2019/05/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86BFS-%E9%82%BB%E6%8E%A5%E8%A1%A8-%E9%93%BE%E6%A0%88/</url>
    <content><![CDATA[<p>BFS需要用到队列，习惯了链栈，感觉链栈比较好写，循环队列以后再补吧。图的存储习惯用邻接表，虽然麻烦些，但是很好遍历。</p>
<span id="more"></span>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span>   <span class="comment">//BFS 链栈 + 邻接表存图</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Arcnode</span>&#123;</span><br><span class="line">    <span class="type">int</span> vertex,data;                <span class="comment">//这条边的终点 以及权值</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Arcnode</span> *nextArc;              <span class="comment">//与这条边同起点的下一条边</span></span><br><span class="line">&#125;Arcnode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">vernode</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;                   <span class="comment">//顶点数据</span></span><br><span class="line">     Arcnode *nextArc;            <span class="comment">// 以该点为起点的边</span></span><br><span class="line">&#125;vernode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    vernode vertex[<span class="number">1001</span>];</span><br><span class="line">    <span class="type">int</span> vernum,arcnum;</span><br><span class="line">&#125;Graph;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Qnode</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Qnode</span> *next;</span><br><span class="line">&#125;Qnode,*Qptr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    Qptr front;</span><br><span class="line">    Qptr rear;</span><br><span class="line">&#125;Linkqueue;</span><br><span class="line"><span class="type">int</span> vis[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">locate</span><span class="params">(Graph G, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= G.vernum; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(G.vertex[i].data == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">create</span><span class="params">(Graph &amp;G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,w;</span><br><span class="line">    cin &gt;&gt; G.vernum &gt;&gt; G.arcnum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= G.vernum ; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; G.vertex[i].data;</span><br><span class="line">        G.vertex[i].nextArc = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= G.arcnum; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; w;</span><br><span class="line">        <span class="type">int</span> A = <span class="built_in">locate</span>(G,a);</span><br><span class="line">        <span class="type">int</span> B = <span class="built_in">locate</span>(G,b);</span><br><span class="line">        Arcnode *p,*p1;</span><br><span class="line">        p = <span class="keyword">new</span> Arcnode;             <span class="comment">//！！！这一步总是忘记</span></span><br><span class="line">        p -&gt; vertex = B;</span><br><span class="line">        p -&gt; nextArc = G.vertex[A].nextArc;</span><br><span class="line">        p -&gt; data = w;</span><br><span class="line">        G.vertex[A].nextArc = p;</span><br><span class="line">        p = <span class="keyword">new</span> Arcnode;</span><br><span class="line">        p -&gt; vertex = A;</span><br><span class="line">        p -&gt; nextArc = G.vertex[B].nextArc;</span><br><span class="line">        p -&gt; data = w;</span><br><span class="line">        G.vertex[B].nextArc = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(Linkqueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Q.front = <span class="keyword">new</span> Qnode;</span><br><span class="line">    Q.front -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">    Q.rear = Q.front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(Linkqueue &amp;Q, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Qnode *q;</span><br><span class="line">    q = <span class="keyword">new</span> Qnode;</span><br><span class="line">    q -&gt; data = p;</span><br><span class="line">    q -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">    Q.rear -&gt; next = q;</span><br><span class="line">    Q.rear = q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">emptyqueue</span><span class="params">(Linkqueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front == Q.rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(Linkqueue &amp;Q, <span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Qnode *q;</span><br><span class="line">    q = Q.front -&gt; next;</span><br><span class="line">    p = q -&gt; data;</span><br><span class="line">    Q.front -&gt; next = q -&gt; next;</span><br><span class="line">    <span class="keyword">if</span>(q == Q.rear)</span><br><span class="line">        Q.rear = Q.front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(Graph G,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p;</span><br><span class="line">    vis[v] = <span class="number">1</span>;</span><br><span class="line">    Linkqueue Q;</span><br><span class="line">    <span class="built_in">init</span>(Q);</span><br><span class="line">    <span class="built_in">push</span>(Q,v);</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">emptyqueue</span>(Q))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pop</span>(Q,p);</span><br><span class="line">        cout &lt;&lt; p &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        Arcnode *q;</span><br><span class="line">        q = G.vertex[p].nextArc;</span><br><span class="line">        <span class="keyword">while</span>(q != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[q -&gt; vertex])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[q -&gt; vertex] = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">push</span>(Q,q -&gt; vertex);</span><br><span class="line">            &#125;</span><br><span class="line">            q = q -&gt; nextArc;      <span class="comment">//差点忘了这里</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    Graph G;</span><br><span class="line">    <span class="built_in">create</span>(G);</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    cin &gt;&gt; v;</span><br><span class="line">    <span class="built_in">bfs</span>(G,v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之图的遍历DFS 邻接矩阵存图</title>
    <url>/2019/05/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86DFS-%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E5%AD%98%E5%9B%BE/</url>
    <content><![CDATA[<p>利用已经用邻接矩阵建立好的图，可以进行DFS遍历。输出的是从该点开始进行DFS时的遍历的顺序。</p>
<p>为了方便起见，在输入v的时候输入的是该点是第几个点而不是它的data。</p>
<span id="more"></span>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Matrix</span>&#123;</span><br><span class="line">   <span class="type">int</span> vertex[<span class="number">101</span>];</span><br><span class="line">   <span class="type">int</span> M[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">&#125;Graph;</span><br><span class="line"><span class="type">int</span> n, vis[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">locate</span><span class="params">(Graph G, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(G.vertex[i] == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">create</span><span class="params">(Graph &amp;G,<span class="type">int</span> arcnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; G.vertex[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        <span class="keyword">if</span>(i != j)</span><br><span class="line">        G.M[i][j] = G.M[j][i] = inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= arcnum; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; w;</span><br><span class="line">        <span class="type">int</span> A = <span class="built_in">locate</span>(G,a);</span><br><span class="line">        <span class="type">int</span> B = <span class="built_in">locate</span>(G,b);</span><br><span class="line">        G.M[A][B] = G.M[B][A] = w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(Graph G,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; v &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    vis[v] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i] &amp;&amp; G.M[v][i] != inf)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(G,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Graph G;</span><br><span class="line">    <span class="type">int</span> arcnum, v;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cin &gt;&gt; arcnum;</span><br><span class="line">    <span class="built_in">create</span>(G,arcnum);</span><br><span class="line">    cin &gt;&gt; v ;              <span class="comment">// 为了方便起见。v代表是第几个顶点，而不是此顶点的data</span></span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">dfs</span>(G,v);               <span class="comment">//G为连通图时</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之学生信息管理系统</title>
    <url>/2019/05/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p> 简单的学生信息管理系统</p>
<span id="more"></span>

<p>  忙活了大约整个白天吧，整体算是写完了。 虽然看代码是比较简单，但是我感觉难度在于对整体轮廓的把握，必须先在整体构思好了才能写。常常是一个函数删了又加上，再删掉。其余的一些格式的控制包括颜色，光标，也学习到了很多课本上没有的东西。除了引用了移动光标的三行代码，其他的都是纯手敲，<del>好累啊,不过也好有成就^_^</del>。才发现 字符数组可以直接赋值给string，这样从文件中引入结构体就简单了。代码加入了文件。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">文件中的内容为：</span><br><span class="line"></span><br><span class="line">李文     <span class="number">12</span>    F      <span class="number">19862171111</span>     <span class="number">100</span>  <span class="number">100</span>  <span class="number">100</span>  <span class="number">200</span></span><br><span class="line">文志     <span class="number">11</span>   M      <span class="number">18923324345</span>     <span class="number">110</span>  <span class="number">110</span>  <span class="number">110</span>  <span class="number">230</span></span><br><span class="line">力哈     <span class="number">10</span>    F      <span class="number">42397744723</span>      <span class="number">100</span>  <span class="number">150</span>  <span class="number">120</span>  <span class="number">250</span></span><br><span class="line">李师傅   <span class="number">9</span>     F       <span class="number">28340242734</span>      <span class="number">120</span> <span class="number">130</span> <span class="number">120</span> <span class="number">230</span></span><br><span class="line">王智       <span class="number">7</span>     M     <span class="number">32493481343</span>     <span class="number">120</span> <span class="number">119</span> <span class="number">118</span> <span class="number">200</span></span><br><span class="line">李秋      <span class="number">13</span>   F       <span class="number">34857498573</span>     <span class="number">117</span> <span class="number">118</span> <span class="number">119</span> <span class="number">230</span></span><br><span class="line">毕非      <span class="number">14</span>   M     <span class="number">24334345433</span>      <span class="number">99</span> <span class="number">88</span> <span class="number">77</span> <span class="number">200</span></span><br><span class="line">王野      <span class="number">8</span>     F        <span class="number">24323424478</span>      <span class="number">100</span> <span class="number">77</span> <span class="number">88</span> <span class="number">210</span></span><br><span class="line">哈奇      <span class="number">6</span>     F        <span class="number">12345678901</span>       <span class="number">100</span> <span class="number">119</span> <span class="number">120</span> <span class="number">230</span></span><br><span class="line">王和      <span class="number">5</span>     M       <span class="number">13247482347</span>      <span class="number">110</span> <span class="number">110</span> <span class="number">129</span> <span class="number">240</span></span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> clc system(<span class="string">&quot;cls&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> color system(<span class="string">&quot;color F1&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">score</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> chinese;</span><br><span class="line">    <span class="type">int</span> math;</span><br><span class="line">    <span class="type">int</span> english;</span><br><span class="line">    <span class="type">int</span> tec;      <span class="comment">//代表理综成绩</span></span><br><span class="line">    <span class="type">int</span> all;        <span class="comment">//总成绩</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line">    string name;</span><br><span class="line">    string number;   <span class="comment">//学号</span></span><br><span class="line">    <span class="type">char</span> sex;      <span class="comment">//性别</span></span><br><span class="line">    string phonenum;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">score</span> score;</span><br><span class="line">&#125; stu[<span class="number">2001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(student a, student b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.name &lt; b.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(student a, student b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.number &lt; b.number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp3</span><span class="params">(student a, student b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.score.all &gt; b.score.all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp4</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> student &amp;a, <span class="type">const</span> student &amp;b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.score.all &lt; b.score.all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">checkstu</span><span class="params">()</span></span>;         <span class="comment">//检查学生信息录入情况.&quot; &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inputscore</span><span class="params">()</span></span>;           <span class="comment">//学生成绩录入</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort_number</span><span class="params">()</span></span>;               <span class="comment">//将成绩按照学号排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort_score</span><span class="params">()</span></span>;                       <span class="comment">//将成绩按照成绩大小排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change_score</span><span class="params">()</span></span>;                   <span class="comment">//对成绩进行修改.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_rank</span><span class="params">()</span></span>;                        <span class="comment">//显示总成绩排名(学生用)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del_score</span><span class="params">()</span></span>;                      <span class="comment">//删除成绩</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort_name</span><span class="params">()</span></span>;                    <span class="comment">//按照名字的字典序排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input_message</span><span class="params">()</span></span>;                  <span class="comment">//输入学生自己的信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_selfscore</span><span class="params">()</span></span>;                   <span class="comment">//查看学生自己的个人成绩</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change_selfmessage</span><span class="params">()</span></span>;                  <span class="comment">//改变个人的信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_teachermenu</span><span class="params">()</span></span>;                    <span class="comment">//显示教师端</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_stumenu</span><span class="params">()</span></span>;                      <span class="comment">//显示学生端</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_score</span><span class="params">()</span></span>;                           <span class="comment">//显示各种排序后的成绩</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tot, cnt ;     <span class="comment">//cnt记录学生的个数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_score</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; <span class="string">&quot;学号&quot;</span> &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; <span class="string">&quot;语文&quot;</span> &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;数学&quot;</span> &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; <span class="string">&quot;英语&quot;</span> &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; <span class="string">&quot;理综&quot;</span> &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; <span class="string">&quot;总分&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; stu[i].name &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; stu[i].number &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; stu[i].score.chinese;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; stu[i].score.math &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; stu[i].score.english &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>);</span><br><span class="line">        cout &lt;&lt; stu[i].score.tec &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; stu[i].score.all &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">toxy</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>    <span class="comment">//移动光标</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    COORD pos= &#123;x,y&#125;;</span><br><span class="line">    HANDLE Out=<span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line">    <span class="built_in">SetConsoleCursorPosition</span>(Out,pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">checkstu</span><span class="params">()</span>          <span class="comment">//检查学生信息录入情况.(查看目前已经上传信息的学生)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clc;</span><br><span class="line">    color;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; <span class="string">&quot;学号&quot;</span> &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt;  <span class="string">&quot;性别&quot;</span> &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; <span class="string">&quot;电话&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; stu[i].name &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>);</span><br><span class="line">        cout &lt;&lt; stu[i].number &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; stu[i].sex &lt;&lt; <span class="built_in">setw</span>(<span class="number">14</span>);</span><br><span class="line">        cout &lt;&lt; stu[i].phonenum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请按回车键即可返回。&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    string c;</span><br><span class="line">    <span class="built_in">getline</span>(cin,c);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print_stumenu</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inputscore</span><span class="params">()</span>               <span class="comment">//学生成绩录入</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clc;</span><br><span class="line">    color;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名   语文  数学  英语  理综&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = cnt<span class="number">+1</span> ; i &lt;= tot; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; stu[i].name &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">        cin &gt;&gt; stu[i].score.chinese &gt;&gt; stu[i].score.math &gt;&gt; stu[i].score.english;</span><br><span class="line">        cin &gt;&gt; stu[i].score.tec;</span><br><span class="line">        stu[i].score.all = stu[i].score.chinese + stu[i].score.math + stu[i].score.english;</span><br><span class="line">        stu[i].score.all += stu[i].score.tec;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请按回车键返回.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    string c;</span><br><span class="line">    <span class="built_in">getline</span>(cin,c);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print_stumenu</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort_score</span><span class="params">()</span>                        <span class="comment">//将成绩按照成绩大小排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clc;</span><br><span class="line">    color;</span><br><span class="line">    <span class="built_in">sort</span>(stu + <span class="number">1</span>, stu + tot + <span class="number">1</span>, cmp3);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序成功。&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">show_score</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;按回车即可保存并返回.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    string c;</span><br><span class="line">    <span class="built_in">getline</span>(cin,c);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print_stumenu</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change_score</span><span class="params">()</span>                    <span class="comment">//对成绩进行修改.</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clc;</span><br><span class="line">    color;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入您要修改的对应学生的姓名:&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot ; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(stu[i].name == s)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;请重新输入他的语文成绩；&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            cin &gt;&gt; stu[i].score.chinese;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;请重新输入他的数学成绩；&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            cin &gt;&gt; stu[i].score.math;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;请重新输入他的英语成绩；&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            cin &gt;&gt; stu[i].score.english;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;请重新输入他的理综成绩；&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            cin &gt;&gt; stu[i].score.tec;</span><br><span class="line">            stu[i].score.all = stu[i].score.chinese + stu[i].score.math + stu[i].score.english + stu[i].score.tec;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请按回车返回: &quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    string c;</span><br><span class="line">    <span class="built_in">getline</span>(cin,c);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print_stumenu</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del_score</span><span class="params">()</span>                       <span class="comment">//删除成绩</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clc;</span><br><span class="line">    color;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入您要删除的学生的姓名:&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(stu[i].name == s)</span><br><span class="line">        &#123;</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = index; i + <span class="number">1</span> &lt;= tot; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        stu[i] = stu[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    tot--;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;按回车即可保存并返回.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    string c;</span><br><span class="line">    <span class="built_in">getline</span>(cin,c);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print_stumenu</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort_name</span><span class="params">()</span>                     <span class="comment">//按照名字的字典序排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clc;</span><br><span class="line">    color;</span><br><span class="line">    <span class="built_in">sort</span>(stu + <span class="number">1</span>, stu + tot + <span class="number">1</span>,cmp1);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序成功。&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">show_score</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;按回车即可保存并返回.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    string c;</span><br><span class="line">    <span class="built_in">getline</span>(cin,c);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print_stumenu</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort_number</span><span class="params">()</span>                   <span class="comment">//按照学号大小进行排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clc;</span><br><span class="line">    color;</span><br><span class="line">    <span class="built_in">sort</span>(stu + <span class="number">1</span>, stu + tot + <span class="number">1</span>, cmp2);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序成功.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">show_score</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;按回车即可保存并返回.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    string c;</span><br><span class="line">    <span class="built_in">getline</span>(cin,c);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print_stumenu</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input_message</span><span class="params">()</span>                    <span class="comment">//输入学生自己的信息</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clc;</span><br><span class="line">    color;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入您的姓名: &quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cin &gt;&gt; stu[++tot].name;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入您的学号: (后两位即可)&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cin &gt;&gt; stu[tot].number;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入您的性别: (M男  F女)&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cin &gt;&gt; stu[tot].sex ;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入您的电话号码: &quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cin &gt;&gt; stu[tot].phonenum;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;按回车即可保存并返回.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    string c;</span><br><span class="line">    <span class="built_in">getline</span>(cin,c);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print_stumenu</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_selfscore</span><span class="params">()</span>                    <span class="comment">//查看学生自己的个人成绩</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clc;</span><br><span class="line">    color;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入您的名字: &quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(stu[i].name == s)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;语文: %d\n&quot;</span>, stu[i].score.chinese);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;数学: %d\n&quot;</span>, stu[i].score.math);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;英语: %d\n&quot;</span>, stu[i].score.english);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;理综: %d\n&quot;</span>, stu[i].score.tec);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;总成绩: %d\n&quot;</span>, stu[i].score.all);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;抱歉，您还未录入信息.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请按回车键返回.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    string c;</span><br><span class="line">    <span class="built_in">getline</span>(cin,c);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print_stumenu</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show_rank</span><span class="params">()</span>                     <span class="comment">//显示全班成绩,只是显示</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clc;</span><br><span class="line">    color;</span><br><span class="line">    priority_queue&lt;student, vector&lt;student&gt;, cmp4 &gt;P;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        P.<span class="built_in">push</span>(stu[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; <span class="string">&quot;学号&quot;</span> &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt;  <span class="string">&quot;语文&quot;</span> &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; <span class="string">&quot;数学&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; <span class="string">&quot;英语&quot;</span> &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; <span class="string">&quot;理综&quot;</span> &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt;  <span class="string">&quot;总分&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span>(!P.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        student a = P.<span class="built_in">top</span>();</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; a.name &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; a.number &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; a.score.chinese &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; a.score.math &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>);</span><br><span class="line">        cout &lt;&lt; a.score.english &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; a.score.tec &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; a.score.all &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        P.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请按回车键返回.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    string c;</span><br><span class="line">    <span class="built_in">getline</span>(cin,c);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print_stumenu</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change_selfmessage</span><span class="params">()</span>                   <span class="comment">//改变个人的信息</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clc;</span><br><span class="line">    color;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入您的名字: &quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(stu[i].name == s)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;请重新修改您的学号: &quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            cin &gt;&gt; stu[i].number ;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;请重新修改您的性别: &quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            cin &gt;&gt; stu[i].sex ;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;请重新修改您的电话号码: &quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            cin &gt;&gt; stu[i].phonenum;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请按回车键返回并保存: &quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    string c;</span><br><span class="line">    <span class="built_in">getline</span>(cin,c);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print_stumenu</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printmenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    string s;</span><br><span class="line">    color;</span><br><span class="line">    clc;</span><br><span class="line">    <span class="built_in">toxy</span>(<span class="number">20</span>,<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*****欢迎来到学生信息管理系统!*****&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请说明您是 1. 老师&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;           2. 学生&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;           3. 退出&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        clc;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的老师验证码: (123456)&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">while</span>(s != <span class="string">&quot;123456&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;您的输入错误，请重新输入: &quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            cin &gt;&gt; s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="string">&quot;123456&quot;</span>)</span><br><span class="line">            <span class="built_in">print_teachermenu</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        clc;</span><br><span class="line">        <span class="built_in">print_stumenu</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_teachermenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        clc;</span><br><span class="line">        color;</span><br><span class="line">        <span class="built_in">toxy</span>(<span class="number">20</span>,<span class="number">1</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;***欢迎来到教师端.***&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1. 检查学生信息录入情况.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2. 学生成绩录入.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;3. 将成绩按照学号排序.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;4. 将成绩按照成绩大小排序.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;5. 对成绩进行修改.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;6. 删除成绩.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;7. 返回主菜单.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;8. 按照名字的字典序排序&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的操作数字: &quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cin &gt;&gt; num;</span><br><span class="line">        <span class="keyword">switch</span>(num)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">checkstu</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">inputscore</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">sort_number</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">sort_score</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">change_score</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">del_score</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printmenu</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">sort_name</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;非法数字.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_stumenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        clc;</span><br><span class="line">        color;</span><br><span class="line">        <span class="built_in">toxy</span>(<span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;*****欢迎来到学生端*****&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1. 输入学生个人基本信息.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2. 查看个人成绩.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;3. 查看所在班级成绩排名.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;4. 查看所在班级学生基本信息.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;5. 修改个人基本信息&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;6. 返回主菜单.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cin &gt;&gt; num;</span><br><span class="line">        <span class="keyword">switch</span>(num)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">input_message</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">show_selfscore</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">show_rank</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">checkstu</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">change_selfmessage</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printmenu</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;非法字符.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2000</span>; ++i)             <span class="comment">//初始化操作</span></span><br><span class="line">    &#123;</span><br><span class="line">        stu[i].score.all = stu[i].score.chinese = <span class="number">0</span>;</span><br><span class="line">        stu[i].score.chinese = stu[i].score.english = <span class="number">0</span>;</span><br><span class="line">        stu[i].score.math = stu[i].score.tec = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tot = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\dd.txt&quot;</span>,ios::in)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(!in.<span class="built_in">eof</span>() &amp;&amp; n &lt; <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ++tot;</span><br><span class="line">        in &gt;&gt; stu[tot].name &gt;&gt; stu[tot].number &gt;&gt; stu[tot].sex &gt;&gt; stu[tot].phonenum &gt;&gt; stu[tot].score.chinese &gt;&gt; stu[tot].score.math &gt;&gt; stu[tot].score.english &gt;&gt; stu[tot].score.tec;</span><br><span class="line">        stu[tot].score.all = stu[tot].score.chinese + stu[tot].score.math + stu[tot].score.english + stu[tot].score.tec;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt = tot;</span><br><span class="line">    <span class="built_in">printmenu</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之图的遍历DFS 邻接表存图</title>
    <url>/2019/05/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86DFS-%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%AD%98%E5%9B%BE/</url>
    <content><![CDATA[<p>用邻接表存，为了方便依旧是输入的v代表该点是第几个点。然后输出的是从该点进行DFS的遍历的点的顺序。</p>
<span id="more"></span>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Arcnode</span>&#123;</span><br><span class="line">    <span class="type">int</span> vertex,data;                <span class="comment">//这条边的终点 以及权值</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Arcnode</span> *nextArc;              <span class="comment">//与这条边同起点的下一条边</span></span><br><span class="line">&#125;Arcnode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">vernode</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;                   <span class="comment">//顶点数据</span></span><br><span class="line">     Arcnode *nextArc;            <span class="comment">// 以该点为起点的边</span></span><br><span class="line">&#125;vernode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    vernode vertex[<span class="number">1001</span>];</span><br><span class="line">    <span class="type">int</span> vernum,arcnum;</span><br><span class="line">&#125;Graph;</span><br><span class="line"><span class="type">int</span> vis[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">locate</span><span class="params">(Graph G, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= G.vernum; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(G.vertex[i].data == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">create</span><span class="params">(Graph &amp;G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,w;</span><br><span class="line">    cin &gt;&gt; G.vernum &gt;&gt; G.arcnum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= G.vernum ; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; G.vertex[i].data;</span><br><span class="line">        G.vertex[i].nextArc = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= G.arcnum; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; w;</span><br><span class="line">        <span class="type">int</span> A = <span class="built_in">locate</span>(G,a);</span><br><span class="line">        <span class="type">int</span> B = <span class="built_in">locate</span>(G,b);</span><br><span class="line">        Arcnode *p,*p1;</span><br><span class="line">        p = <span class="keyword">new</span> Arcnode;             <span class="comment">//！！！这一步总是忘记</span></span><br><span class="line">        p -&gt; vertex = B;</span><br><span class="line">        p -&gt; nextArc = G.vertex[A].nextArc;</span><br><span class="line">        p -&gt; data = w;</span><br><span class="line">        G.vertex[A].nextArc = p;</span><br><span class="line">        p = <span class="keyword">new</span> Arcnode;</span><br><span class="line">        p -&gt; vertex = A;</span><br><span class="line">        p -&gt; nextArc = G.vertex[B].nextArc;</span><br><span class="line">        p -&gt; data = w;</span><br><span class="line">        G.vertex[B].nextArc = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(Graph G,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[v] = <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt; v &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    Arcnode *p;</span><br><span class="line">    p = G.vertex[v].nextArc;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> index = p -&gt; vertex;</span><br><span class="line">        <span class="keyword">if</span>(!vis[index])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[index] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(G,index);</span><br><span class="line">        &#125;</span><br><span class="line">        p = p -&gt; nextArc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    Graph G;</span><br><span class="line">    <span class="built_in">create</span>(G);</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    cin &gt;&gt; v;</span><br><span class="line">    <span class="built_in">dfs</span>(G,v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之邻接矩阵存图</title>
    <url>/2019/05/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E5%AD%98%E5%9B%BE/</url>
    <content><![CDATA[<p>本身邻接矩阵就是一个简单的二维数组，但是考虑到顶点的下标标号可能不是从1开始到的N结束的。所以用如下算法。当然你也可以离散化一下坐标再普通存图</p>
<span id="more"></span>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Matrix</span>&#123;</span><br><span class="line">   <span class="type">int</span> vertex[<span class="number">101</span>];</span><br><span class="line">   <span class="type">int</span> M[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">&#125;Graph;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">locate</span><span class="params">(Graph G, <span class="type">int</span> x,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(G.vertex[i] == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">create</span><span class="params">(Graph &amp;G,<span class="type">int</span> n,<span class="type">int</span> arcnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; G.vertex[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        <span class="keyword">if</span>(i != j)</span><br><span class="line">        G.M[i][j] = G.M[j][i] = inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= arcnum; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; w;</span><br><span class="line">        <span class="type">int</span> A = <span class="built_in">locate</span>(G,a,n);</span><br><span class="line">        <span class="type">int</span> B = <span class="built_in">locate</span>(G,b,n);</span><br><span class="line">        G.M[A][B] = G.M[B][A] = w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Graph G;</span><br><span class="line">    <span class="type">int</span> n,arcnum;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cin &gt;&gt; arcnum;</span><br><span class="line">    <span class="built_in">create</span>(G, n, arcnum);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n ; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,G.M[i][j],j==n?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之邻接表存储图</title>
    <url>/2019/05/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%AD%98%E5%82%A8%E5%9B%BE/</url>
    <content><![CDATA[<p>用邻接表存图适合稀疏图，不会浪费太多空间。写的时候一定要思路清晰，点和边的结构体存储要明确他们都包含什么内容。</p>
<span id="more"></span>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Arcnode</span>&#123;</span><br><span class="line">    <span class="type">int</span> vertex,data;                <span class="comment">//这条边的终点 以及权值</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Arcnode</span> *nextArc;              <span class="comment">//与这条边同起点的下一条边</span></span><br><span class="line">&#125;Arcnode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">vernode</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;                   <span class="comment">//顶点数据</span></span><br><span class="line">     Arcnode *nextArc;            <span class="comment">// 以该点为起点的边</span></span><br><span class="line">&#125;vernode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    vernode vertex[<span class="number">1001</span>];</span><br><span class="line">    <span class="type">int</span> vernum,arcnum;</span><br><span class="line">&#125;Graph;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">locate</span><span class="params">(Graph G, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= G.vernum; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(G.vertex[i].data == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">create</span><span class="params">(Graph &amp;G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,w;</span><br><span class="line">    cin &gt;&gt; G.vernum &gt;&gt; G.arcnum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= G.vernum ; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; G.vertex[i].data;</span><br><span class="line">        G.vertex[i].nextArc = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= G.arcnum; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; w;</span><br><span class="line">        <span class="type">int</span> A = <span class="built_in">locate</span>(G,a);</span><br><span class="line">        <span class="type">int</span> B = <span class="built_in">locate</span>(G,b);</span><br><span class="line">        Arcnode *p,*p1;</span><br><span class="line">        p = <span class="keyword">new</span> Arcnode;             <span class="comment">//！！！这一步总是忘记</span></span><br><span class="line">        p -&gt; vertex = B;</span><br><span class="line">        p -&gt; nextArc = G.vertex[A].nextArc;</span><br><span class="line">        p -&gt; data = w;</span><br><span class="line">        G.vertex[A].nextArc = p;</span><br><span class="line">        p = <span class="keyword">new</span> Arcnode;</span><br><span class="line">        p -&gt; vertex = A;</span><br><span class="line">        p -&gt; nextArc = G.vertex[B].nextArc;</span><br><span class="line">        p -&gt; data = w;</span><br><span class="line">        G.vertex[B].nextArc = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Graph G;</span><br><span class="line">    <span class="built_in">create</span>(G);</span><br><span class="line">    Arcnode *p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= G.vernum; ++i)&#123;</span><br><span class="line">    p = G.vertex[i].nextArc;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; p -&gt; data &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; p -&gt; vertex &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        p = p -&gt; nextArc;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数论之欧拉函数</title>
    <url>/2019/05/24/%E6%95%B0%E8%AE%BA%E4%B9%8B%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>欧拉函数，用$\phi(n)$ 表示 ，指的是小于等于n的数中与n互质的数的数目，欧拉函数是一个积性函数.<br>$$<br>\phi(x) &#x3D; x \times (1 -\frac{ 1}{p_1}) + x \times(1-\frac{1}{p_2}) +x \times(1 - \frac{1}{p_n})<br>$$</p>
<span id="more"></span>



<h3 id="这里介绍一些相关的知识"><a href="#这里介绍一些相关的知识" class="headerlink" title="这里介绍一些相关的知识:"></a>这里介绍一些相关的知识:</h3><p>1.一个算术函数f，如果对于两个互素整数m,n有f(nm)&#x3D;f(n)*f(m)则称 f为积性函数。如果对于任意两个正整数mn有f(nm)&#x3D;f(n)*f(m)则称f为完全积性函数 。</p>
<p>2.如果f是一个积性函数，则对于正整数$$ n &#x3D; p_1^{a_1} \times p_2^{a_2} \times p_n^{a_n}$$（pi为素数）(这里是唯一分解定理)，则$$ f(n)&#x3D;f(p_1^{a_1})\times f(p_2^{a_2}) \times f(p_n^{a_n}) $$</p>
<h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><p>现在回归欧拉函数，看公式中的字母：</p>
<p>其中p指的是x的质因子。（注意的是$\phi(1) &#x3D; 1$，当两个数字的公因数只有1的时候，就说两个数字互质）</p>
<p>接下来介绍几种欧拉函数的求法：</p>
<h4 id="分解质因数求欧拉函数"><a href="#分解质因数求欧拉函数" class="headerlink" title="分解质因数求欧拉函数:"></a>分解质因数求欧拉函数:</h4><p>注意的是，如果最终n&gt;1， 说明n也是一个质因子了，那么就要把它也算进去。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> ans = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = ans /i * (i - <span class="number">1</span>);        <span class="comment">//kuangbin中是ans -= ans/i;  这个肯定不会溢出</span></span><br><span class="line">            <span class="keyword">while</span>(n % i == <span class="number">0</span>)</span><br><span class="line">                n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) ans = ans / n * (n - <span class="number">1</span>);         </span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="欧拉函数打表（类似埃氏筛法）"><a href="#欧拉函数打表（类似埃氏筛法）" class="headerlink" title="欧拉函数打表（类似埃氏筛法）"></a>欧拉函数打表（类似埃氏筛法）</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">getphi</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        phi[i] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(phi[i] == i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt;= n; j += i)</span><br><span class="line">            &#123;</span><br><span class="line">                phi[j] = phi[j]/i * (i - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="欧拉函数线性筛法（可以得到欧拉函数和素数表）"><a href="#欧拉函数线性筛法（可以得到欧拉函数和素数表）" class="headerlink" title="欧拉函数线性筛法（可以得到欧拉函数和素数表）"></a>欧拉函数线性筛法（可以得到欧拉函数和素数表）</h4><p>需要用到以下三条性质，这里不作证明(第一条p为质数)</p>
<ol>
<li><p>$$phi[p] &#x3D; p - 1$$</p>
</li>
<li><p>$$ i \mod p &#x3D; 0   \to phi[i \times p] &#x3D; phi[i] \times p$$</p>
</li>
<li><p>$$   i  \mod  p \ne 0 \to phi[i \times p]  &#x3D; phi[i] \times (p - 1)$$</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> phi[<span class="number">10005</span>];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10000</span>;</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="type">int</span> is[N + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> pri[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getphi</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(is, <span class="number">0</span>, <span class="built_in">sizeof</span>(is));</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    is[<span class="number">0</span>] = is[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= N; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!is[i])</span><br><span class="line">        &#123;</span><br><span class="line">            pri[++tot] = i;</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i * pri[j] &lt;= N; ++j )</span><br><span class="line">        &#123;</span><br><span class="line">            is[i * pri[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % pri[j] == <span class="number">0</span>)</span><br><span class="line">                phi[i * pri[j]] = phi[i] * pri[j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                phi[i * pri[j]] = phi[i] * (pri[j] - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(i % pri[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="欧拉函数的重要性质"><a href="#欧拉函数的重要性质" class="headerlink" title="欧拉函数的重要性质:"></a>欧拉函数的重要性质:</h4><ol>
<li>若N是质数X的K次幂，$$phi[N] &#x3D; (X - 1)\times X ^{k - 1}$$</li>
<li>若M,N互质， 那么 $$ phi[M \times N] &#x3D; phi[M] \times phi[N]$$</li>
<li>若N是奇数，  那么$$ phi[2 \times N] &#x3D; phi[N]$$</li>
<li>若X,Y是质数，且$$N &#x3D; X \times Y , phi[N] &#x3D; (x - 1) \times (y - 1)$$</li>
<li>小于N且与N互质的数的和为： $$N&#x2F;2 \times phi[N]$$</li>
</ol>
<h4 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h4><p>对于和m 互质的 x ，有 $$ x ^{\phi(m)}\equiv 1\mod m$$</p>
<p>当m 为素数时， $$phi[m] &#x3D; m - 1$$  所以有 $$ x^{m - 1} \equiv 1(\mod m)$$</p>
<p>这就是费马小定理，所以说费马小定理是欧拉定理的特殊形式。</p>
<h4 id="欧拉定理的应用"><a href="#欧拉定理的应用" class="headerlink" title="欧拉定理的应用"></a>欧拉定理的应用</h4><p>$$ a^b \mod p &#x3D; (a \mod p)^{b \mod \phi(p)} \mod p$$       &#x2F;&#x2F;a和p互质</p>
<p>如果p为质数：</p>
<p>$$ a^b \mod p &#x3D; (a \mod p)^{b \mod (p - 1)} \mod p $$</p>
<p>还有一个真伪性我还没有验证的公式，先记录下来:</p>
<p>$$ a^b\mod p &#x3D; (a\mod p )^{\phi(p) + b \mod \phi(p)} \mod p $$        &#x2F;&#x2F;这里可以摆脱a 和 p互质的束缚</p>
]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>欧拉函数</tag>
      </tags>
  </entry>
  <entry>
    <title>数论之莫比乌斯反演</title>
    <url>/2019/05/30/%E6%95%B0%E8%AE%BA%E4%B9%8B%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</url>
    <content><![CDATA[<p>开始学习莫比乌斯反演，记录一下。</p>
<span id="more"></span>

<h3 id="学习前的预备知识—整除分块"><a href="#学习前的预备知识—整除分块" class="headerlink" title="学习前的预备知识—整除分块"></a>学习前的预备知识—整除分块</h3><p>在求解$ \sum_{i &#x3D; 1}^n\lfloor\frac{n}{i}\rfloor$ 的问题的时候，一般我们需要O（n）的遍历，但是其实有一段$\lfloor\frac{n}{i}\rfloor$是相同的，而这一个块的最后一个数字的下标就是n &#x2F; (n &#x2F; i),所以我们可以一块一块的算,这样就把复杂度降到了O($\sqrt{n}$)。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n ;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> ans ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">1</span>, r; l &lt;= n; l = r<span class="number">+1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        r = n / (n / l);</span><br><span class="line">        ans += (r - l + <span class="number">1</span>) * (n / l);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title>暑假牛客竞赛第四场K题 dp</title>
    <url>/2019/07/29/%E6%9A%91%E5%81%87%E7%89%9B%E5%AE%A2%E7%AB%9E%E8%B5%9B%E7%AC%AC%E5%9B%9B%E5%9C%BAK%E9%A2%98-dp/</url>
    <content><![CDATA[<p>用DP转移，复杂度为O(300N)</p>
<span id="more"></span>

<p>用$dp[i][j]$ 代表 末尾是第 i 个数字（i从1开始）对300取余为j的个数。</p>
<p>假设我们已经求得$dp[i][j]$</p>
<p> 那么用一个循环就能得到$dp[i + 1][j]$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(int j = 0; j &lt; 300; ++j)</span><br><span class="line">&#123;</span><br><span class="line">    dp[i+1][(j * 10 + s[i] - &#x27;0&#x27;) % 300] += dp[i][j]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">typedef long long ll;</span><br><span class="line"></span><br><span class="line">ll dp[100005][301];</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    int sz = s.size();</span><br><span class="line">    for(int i = 1; i &lt; s.size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i][s[i - 1]-&#x27;0&#x27;]++;</span><br><span class="line">        for(int j = 0; j &lt; 300; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i + 1][(j * 10 + s[i]-&#x27;0&#x27;) % 300] += dp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[sz][s[sz - 1] - &#x27;0&#x27;]++;</span><br><span class="line">    ll ans = 0;</span><br><span class="line">    for(int i = 1; i &lt;= sz; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += dp[i][0];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; &#x27;\n&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>暑假第一场个人赛总结</title>
    <url>/2019/07/23/%E6%9A%91%E5%81%87%E7%AC%AC%E4%B8%80%E5%9C%BA%E4%B8%AA%E4%BA%BA%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>又是自闭的一下午，但是收获还是挺多的。下面总结一下。</p>
<span id="more"></span>

<p><a href="https://vjudge.net/contest/313423#status//L/0/">比赛链接</a></p>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>看这道题，就算不会也能猜到奇偶的问题，但是我把输入的层数和里面的变量都用了n,然后就陷入了自闭。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,k;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">        <span class="keyword">if</span>(k % <span class="number">2</span>)cout &lt;&lt; <span class="string">&quot;Balanced&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span>  cout &lt;&lt; <span class="string">&quot;Bad&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><p>看题目中的2，3，5，7以及样例，直接发现类似做过的一道humble number题目，紫书也出现了(优先队列做的)，可以移步<a href="https://blog.csdn.net/weixin_43918531/article/details/87882219">题目</a></p>
<p>类似的这道题已经很熟练了，速度的敲完，发现TLE。什么情况，我都预处理完了。。发现询问的次数可以达到500000，因此二分，因为预处理的数组是有序的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">5900</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> aa ,bb,cc,dd ;</span><br><span class="line">    aa = <span class="number">0</span>,bb = <span class="number">0</span>,cc = <span class="number">0</span>, dd = <span class="number">0</span>;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5842</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = <span class="built_in">min</span>(<span class="number">2</span> * a[aa], <span class="built_in">min</span>(<span class="number">3</span> * a[bb], <span class="built_in">min</span>(<span class="number">5</span> * a[cc], <span class="number">7</span> * a[dd])));</span><br><span class="line">        <span class="keyword">if</span>(a[i] == <span class="number">2</span> *a[aa])</span><br><span class="line">            aa++;</span><br><span class="line">        <span class="keyword">if</span>(a[i] == <span class="number">3</span> * a[bb])</span><br><span class="line">            bb++;</span><br><span class="line">        <span class="keyword">if</span>(a[i] == <span class="number">5</span> * a[cc])</span><br><span class="line">            cc++;</span><br><span class="line">        <span class="keyword">if</span>(a[i] == <span class="number">7</span>* a[dd])</span><br><span class="line">            dd++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">f</span>();</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">lower_bound</span>(a , a + <span class="number">5500</span>, num) - a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[m]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p>也是自闭的一道题目，本身很简单。我想到N很大的时候，答案就确定了，可是为什么还是不对呢？？ 后来看到输入不超过1M，什么概念？？ 不清楚，看来输入上可能会出现超级大的一串数字了，所以输入改用string就过了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">zhuanhuan</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>() &gt;= <span class="number">7</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;1.64493\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">zhuanhuan</span>(s);</span><br><span class="line">    <span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n &gt;= <span class="number">115000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1.64493\n&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ; i&lt;=n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> num = <span class="built_in">double</span>((<span class="number">1.0</span>/i)*(<span class="number">1.0</span>/i));</span><br><span class="line">        sum += num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.5lf\n&quot;</span>,sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="G"><a href="#G" class="headerlink" title="G"></a>G</h2><p>数学题，按说应该不会也能猜出这个公式的，但是真的猜不出来啊QWQ。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n,k;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; k)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; (n - k + <span class="number">1</span>)*k &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="H"><a href="#H" class="headerlink" title="H"></a>H</h2><p>想到先求最长上升或者下降子序列的长度，但是却用到了单调栈，敲完才想到，单调栈的单调性是从第一个元素就开始确定的，可能我们都应该删除第一个元素，自闭了。还是老老实实用模板把。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dp[<span class="number">100005</span>];</span><br><span class="line"><span class="type">int</span> s[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,n,k;;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">1</span>] = s[<span class="number">1</span>];</span><br><span class="line">        len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] &gt; dp[len])&#123;</span><br><span class="line">                dp[++len] = s[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">int</span> m = <span class="built_in">lower_bound</span>(dp <span class="number">+1</span>,dp + len + <span class="number">1</span>,s[i])- dp;</span><br><span class="line">                dp[m] = s[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> len1 = len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n/<span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(s[i],s[n-i<span class="number">+1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">1</span>] = s[<span class="number">1</span>];</span><br><span class="line">        len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] &gt; dp[len])&#123;</span><br><span class="line">                dp[++len] = s[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">int</span> m = <span class="built_in">lower_bound</span>(dp + <span class="number">1</span>,dp + len + <span class="number">1</span>,s[i])- dp;</span><br><span class="line">                dp[m] = s[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> len2 = len;</span><br><span class="line">        <span class="keyword">if</span>(n - len1 &lt;= k || n - len2 &lt;= k)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;A is a magic array.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;A is not a magic array.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><p>开始大意了，没想到要开始就要消耗的情况，我直接用总的消耗和总的收获做差，然后我还奇怪，这么简单么。后来想到开始的路程可能是消耗的大于收获的，把这个差值积累一下，记录一下最大值即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> LL[<span class="number">105</span>];</span><br><span class="line"><span class="type">int</span> RR[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,caser = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> n,A,B,L;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; A &gt;&gt; B &gt;&gt; L;  <span class="comment">//失去A  得到B</span></span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> maxer = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; LL[i] &gt;&gt; RR[i];</span><br><span class="line">            <span class="type">int</span> num = (RR[i] - LL[i])*A;   <span class="comment">//num代表失去的</span></span><br><span class="line">            <span class="type">int</span> num1 = (LL[i] - RR[i - <span class="number">1</span>]) * B;</span><br><span class="line">            sum += num - num1;</span><br><span class="line">            maxer = <span class="built_in">max</span>(maxer,sum);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Case #&quot;</span> &lt;&lt; caser++ &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(maxer &lt;= <span class="number">0</span>)  cout &lt;&lt; <span class="string">&#x27;0&#x27;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; maxer &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="K"><a href="#K" class="headerlink" title="K"></a>K</h2><p>水题，但是没发现，始终在纠结别的题目。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,caser = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">          string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Case #&quot;</span> &lt;&lt; caser++ &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line">        string s2;</span><br><span class="line">        <span class="type">char</span> c = s[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;0.00&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> num = (<span class="built_in">pow</span>(<span class="number">10</span>,<span class="number">6</span>) * <span class="number">1.0</span>)/(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">20</span>)) * <span class="number">100</span>;</span><br><span class="line">            <span class="type">double</span> a = <span class="number">100</span> - num;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;K&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> num = (<span class="built_in">pow</span>(<span class="number">10</span>,<span class="number">3</span>) * <span class="number">1.0</span>)/(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">10</span>)) * <span class="number">100</span>;</span><br><span class="line">            <span class="type">double</span> a = <span class="number">100</span> - num;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> num = (<span class="built_in">pow</span>(<span class="number">10</span>,<span class="number">9</span>) * <span class="number">1.0</span>)/(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">30</span>)) * <span class="number">100</span>;</span><br><span class="line">            <span class="type">double</span> a = <span class="number">100</span> - num;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;T&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> num = (<span class="built_in">pow</span>(<span class="number">10</span>,<span class="number">12</span>) * <span class="number">1.0</span>)/(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">40</span>)) * <span class="number">100</span>;</span><br><span class="line">            <span class="type">double</span> a = <span class="number">100</span> - num;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> num = (<span class="built_in">pow</span>(<span class="number">10</span>,<span class="number">15</span>) * <span class="number">1.0</span>)/(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">50</span>)) * <span class="number">100</span>;</span><br><span class="line">            <span class="type">double</span> a = <span class="number">100</span> - num;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="type">double</span> num = (<span class="built_in">pow</span>(<span class="number">10</span>,<span class="number">18</span>) * <span class="number">1.0</span>)/(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">60</span>)) * <span class="number">100</span>;</span><br><span class="line">            <span class="type">double</span> a = <span class="number">100</span> - num;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="type">double</span> num = (<span class="built_in">pow</span>(<span class="number">10</span>,<span class="number">21</span>) * <span class="number">1.0</span>)/(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">70</span>)) * <span class="number">100</span>;</span><br><span class="line">            <span class="type">double</span> a = <span class="number">100</span> - num;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> num = (<span class="built_in">pow</span>(<span class="number">10</span>,<span class="number">24</span>) * <span class="number">1.0</span>)/(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">80</span>)) * <span class="number">100</span>;</span><br><span class="line">            <span class="type">double</span> a = <span class="number">100</span> - num;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,a);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;%&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="L"><a href="#L" class="headerlink" title="L"></a>L</h2><p>模拟</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>() &lt;= <span class="number">3</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i + <span class="number">3</span> &gt; s.<span class="built_in">size</span>() - <span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>((s[i] == <span class="string">&#x27;D&#x27;</span> || s[i] == <span class="string">&#x27;d&#x27;</span>) &amp;&amp; (s[i + <span class="number">1</span>] == <span class="string">&#x27;O&#x27;</span> || s[i<span class="number">+1</span>] == <span class="string">&#x27;o&#x27;</span>) &amp;&amp; (s[i + <span class="number">2</span>] == <span class="string">&#x27;G&#x27;</span>|| s[i<span class="number">+2</span>] == <span class="string">&#x27;g&#x27;</span> )&amp;&amp;(s[i <span class="number">+3</span>] == <span class="string">&#x27;E&#x27;</span> || s[i + <span class="number">3</span>] == <span class="string">&#x27;e&#x27;</span>))                cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM总结</category>
      </categories>
      <tags>
        <tag>比赛总结</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客多校第七场 Find the median 权值线段树 + 区间离散化</title>
    <url>/2019/08/21/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%83%E5%9C%BA-Find-the-median-%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91-%E5%8C%BA%E9%97%B4%E7%A6%BB%E6%95%A3%E5%8C%96/</url>
    <content><![CDATA[<p>相比较普通的线段树，权值线段树存的是每个区间的出现的次数，查找的时候也是根据这个权值来查找。</p>
<span id="more"></span>

<p><a href="https://ac.nowcoder.com/acm/contest/887/E">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>开始是一个空的序列，每次一个询问L,R，代表把L到R这R-L+1个数字加入到序列当中，每次放完，输出当前序列的中位数</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在这个题中，叶子节点存的也是一段区间，这段区间的个数不和普通的线段树一样，它的个数是人为确定的。我们把所有L,R离散化到一个数组中，还有注意的是R要先+1在存到数组中，这样存的就是一个左闭右开的区间了。然后初始建树的时候每个叶子节点存的区间就包括了所有的L,R区间。然后更新的时候，我们更新的是这个区间出现的次数，比如说第一次[1,3]，第二次[1,4], 那么存[1,3]这段区间的那个线段树节点的权值就是2，因为它出现两次。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">800005</span>;</span><br><span class="line">ll X[maxn],Y[maxn],L[maxn],R[maxn],b[maxn * <span class="number">2</span>];</span><br><span class="line">ll A[<span class="number">10</span>],B[<span class="number">10</span>],C[<span class="number">10</span>],M[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    ll lazy, len, sum;</span><br><span class="line">&#125;tr[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(ll node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[node].lazy == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    tr[node &lt;&lt; <span class="number">1</span>].lazy += tr[node].lazy;</span><br><span class="line">    tr[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>].lazy += tr[node].lazy;</span><br><span class="line">    tr[node &lt;&lt; <span class="number">1</span>].sum += tr[node].lazy * tr[node &lt;&lt; <span class="number">1</span>].len;</span><br><span class="line">    tr[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>].sum += tr[node].lazy * tr[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line">    tr[node].lazy = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(ll node, ll l, ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[node].lazy = <span class="number">0</span>;</span><br><span class="line">    tr[node].sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[node].len = b[l + <span class="number">1</span>] - b[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r ) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span>, l , mid);</span><br><span class="line">    <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    tr[node].len = tr[node &lt;&lt; <span class="number">1</span>].len + tr[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(ll node, ll l, ll r, ll ul, ll ur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ur &lt; l || ul &gt; r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(ul &lt;= l &amp;&amp; ur &gt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[node].sum += tr[node].len;</span><br><span class="line">        tr[node].lazy ++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(node);</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>, l , mid, ul ,ur);</span><br><span class="line">    <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, ul, ur);</span><br><span class="line">    tr[node].sum = tr[node &lt;&lt; <span class="number">1</span>].sum + tr[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> node, ll l, ll r, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        ll cmt = tr[node].sum / tr[node].len;</span><br><span class="line">        <span class="keyword">return</span> b[l] + (k - <span class="number">1</span>)/ cmt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(node);</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k &lt;= tr[node &lt;&lt; <span class="number">1</span>].sum) <span class="keyword">return</span> <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span> , l, mid, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, k - tr[node &lt;&lt; <span class="number">1</span>].sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld%lld%lld&quot;</span>,&amp;X[<span class="number">1</span>],&amp;X[<span class="number">2</span>],&amp;A[<span class="number">1</span>],&amp;B[<span class="number">1</span>],&amp;C[<span class="number">1</span>],&amp;M[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld%lld%lld&quot;</span>,&amp;Y[<span class="number">1</span>],&amp;Y[<span class="number">2</span>],&amp;A[<span class="number">2</span>],&amp;B[<span class="number">2</span>],&amp;C[<span class="number">2</span>],&amp;M[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        X[i] = (A[<span class="number">1</span>] * X[i - <span class="number">1</span>] + B[<span class="number">1</span>] * X[i - <span class="number">2</span>] + C[<span class="number">1</span>]) % M[<span class="number">1</span>];</span><br><span class="line">        Y[i] = (A[<span class="number">2</span>] * Y[i - <span class="number">1</span>] + B[<span class="number">2</span>] * Y[i - <span class="number">2</span>] + C[<span class="number">2</span>]) % M[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        L[i] = <span class="built_in">min</span>(X[i], Y[i]) + <span class="number">1</span>;</span><br><span class="line">        R[i] = <span class="built_in">max</span>(X[i], Y[i]) + <span class="number">1</span>;</span><br><span class="line">        b[++cnt] = L[i];</span><br><span class="line">        b[++cnt] = R[i] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + cnt + <span class="number">1</span>);</span><br><span class="line">    cnt = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + cnt + <span class="number">1</span>) - b - <span class="number">1</span>;</span><br><span class="line">    b[cnt + <span class="number">1</span>] = b[cnt] + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, cnt);</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += R[i] - L[i] + <span class="number">1</span>;</span><br><span class="line">        L[i] = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + cnt + <span class="number">1</span>, L[i]) - b ;</span><br><span class="line">        R[i] = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + cnt + <span class="number">1</span>, R[i] + <span class="number">1</span>) - b ;</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,cnt, L[i], R[i] - <span class="number">1</span>);</span><br><span class="line">        cout &lt;&lt; <span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,cnt,(sum - <span class="number">1</span>)/ <span class="number">2</span> + <span class="number">1</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>权值线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一思</title>
    <url>/2019/05/08/%E6%AF%8F%E6%97%A5%E4%B8%80%E6%80%9D/</url>
    <content><![CDATA[<p>单独开辟一个模块记录一些思考，方便以后查看。</p>
<span id="more"></span>

<h5 id="2019-5-8"><a href="#2019-5-8" class="headerlink" title="2019.5.8"></a>2019.5.8</h5><p>   今天魏晓超老师上课提到，对于KMP, floyd等一些比较复杂的算法其他老师都是直接跳过，但是他认为应该讲，因为我们学东西不是看它有没有用，而是它能不能给我们本身带来一些什么提高，也许你确实用不到KMP，用不到Floyd，但是如果你真的从底层去深度学习这个算法，给你思维的提高是很大的。这和我入队的初衷是一样的，学习算法，一个是对自己的提高，另一个我很佩服这些传承了几十年几百年的算法，这些都是祖先的智慧，传承这些不也是应该的么。</p>
<p>​    老师还提到，很多中国院士提出：我们现在很流行什么深度学习，机器学习，人工智能。我们国家对于这方面的应用很广，发展迅速，但是看看这些东西最底层的算法，设计，都是外国人提出的，包括今年的三位图灵奖外国人获得者，都是这方面的深度学习之父。所以我想，我们应该注重底层的东西，这样才能在本质上突破。</p>
<h5 id="2019-5-11"><a href="#2019-5-11" class="headerlink" title="2019.5.11"></a>2019.5.11</h5><p>今天是山东省第十届ACM竞赛的正式赛的前一天，我们来到了济南大学，走了很长一段路，觉得校园还是挺不错的。10点半左右从山师出发，到了济南大学之后先是去了八餐厅吃饭，然后在李老师的带领下去了一间教室休息了一段时间。1点半出发去礼堂观看开幕式（就是听领导讲话），2点半结束后前去比赛地点进行热身赛。热身赛的前三题都是以前做过的，还是比较顺利的过了。出来后又去八餐厅吃了饭。再坐车回学校已经是8点多了。听了李老师的讲话，觉得山东省的ACM比赛真的算是比较公平了。今年山大派出了20支队伍，想要和我们这些省属重点大学争荣誉，确实是有点过分了。相比较广东省的比赛，我们应该算是幸运的了，今年中山大学派出了40支队伍，这还有其他学校的活路么? 我们看的起一个人，不是说他的荣誉有多少，而是他够不够大度的把荣誉让给其他人。不管怎么说，还是自己的实力不行，还是需要加强自己的实力啊！</p>
<h5 id="2019-5-12"><a href="#2019-5-12" class="headerlink" title="2019.5.12"></a>2019.5.12</h5><p>今天是省赛的日子，早早起床（还需要感谢舍友的配合，但我却没赢得荣誉，感觉挺愧疚），在图书馆门前坐上车，大约8点半左右就到了济南大学。我们迅速进了机房，讨论一下接下来的配合了。比赛的详细内容就不多说了，会发专门的省赛过程的思考。比完赛后，大家其实心里都有点难受，在滚榜前，我其实还是有一丝的希望的。但是后来就彻底破灭了。滚榜的过程中当我们发现我们距离最后一个铜牌只有两个距离的时候，感到很可惜，但是永远不会有如果。今年山师得到七枚奖牌，我们正好是第八名，感觉辜负了师哥，辜负了队友。闭幕式结束，外边下起了雨，这天气正好符合我的心情，难道老天也在可怜我？好吧，我多想了。不就是一次省赛么，还有太多的机会。回学校放下行李，然后李老师带着我们去汉丽轩吃饭 ，大家也是聊得很嗨，尽管我们没拿牌子，但是我相信没人会嘲笑我们。吃饭期间，队长和我说他们打过太多次铁，我们才这一次，算不了什么。吃饭快结束了，我和宝乐听陶然师哥讲了很多，每次听师哥发自肺腑的感言，总是觉得很感动。听孙文韬师哥和以前的队长讲话，我知道了ACM会充实你的大学生活，会带给你特别多的东西，同时这样的比赛经历，也是别人体会不到的，这就足够了。我知道队员们也会感到很可惜，但是作为队长，我想不管是赛前，赛中，还是赛后，你的工作就是鼓舞队员,不放弃,勇于承担。5道题目从银到铁，我们是铁牌第二，只能够怪我们技不如人。本来想比赛当天晚上更新完这篇博客，但是和室友沛泽谈人生理想到了12点多，只能第二天早上补上了。每次和他聊天，我总能收获很多，我觉得尽管现在的他可能觉得自己比较颓废，但是一个有理想，心中有未来的绝对不会差。今天还是挺感动，不管是李老师，宋俊阳师哥，王福昌师哥，刘陶然师哥，还有我的舍友，他们都在鼓励我，说没什么，我觉得人生足够了。晚上了看了曾经一位山师传奇人物的区域赛金奖的荣誉，虽然觉得遥不可及，但是我还是会一步一步去追赶他的。省赛已经过去，我需要调整心态，未来的事情有太多等着我解决，不应该把昨天的情绪带到今天，进步又从第二天开始了。</p>
<h5 id="2019-5-17"><a href="#2019-5-17" class="headerlink" title="2019.5.17"></a>2019.5.17</h5><p>写这篇博客已经是5.17的早上了，昨天晚上回去与周毅，沛泽又聊到了一点，本来聊我的恋爱经历，他们会给我提出一些观点，也是我不得不思考的一些问题，我记得以前和他们说会为了恋爱舍弃一些东西，但是现在我改变主意了，即便有了恋爱的对象，也不能够改变我目前的一种状态，当然，也许会稍微改变一些。后来我们谈到了学业，谈到了各方各面，他们都有自己的故事，但是不说的话，表面上谁都是顽皮的孩子。他们都敞开心扉，这也是我很感动的一点吧，能有人跟你敞开心扉的谈，是对你的一种信任。经过昨天晚上的畅谈，我感觉我更加的佩服周毅和沛泽了，也许我们目前总是为学业奔波，可能学习上不是突出的人，但是我发自内心的想说，未来他们真的不会是一个平庸的人。</p>
<p>今天晚上去自习室上了会晚自习，发现其实挺多人都挺努力的，这学期因为ACM几乎没上过晚自习，在学习上落下的就得通过其他时间自己补了，我大约待到9点半多，自习室还剩下五六个人，其中就有我们班的第一名，这就是人家能获得第一名的原因吧。</p>
<h5 id="2019-7-29"><a href="#2019-7-29" class="headerlink" title="2019.7.29"></a>2019.7.29</h5><p>昨天是星期日，稍微有点空闲的时间了，看了看一些寒假看的动漫又更新了好多，天行九歌等等，追剧的时候听到了开头的歌曲是霍尊唱的，喜欢的动漫配上喜欢的人的歌曲，觉得妙不可言。遂把这篇博客开头加上这首歌曲了。</p>
<h5 id="2019-8-6"><a href="#2019-8-6" class="headerlink" title="2019.8.6"></a>2019.8.6</h5><p>今天刚要走出宿舍五楼，正好听到一阵前奏，于是又停下听了一会，果然是”一直很安静“，但是没有听出是不是阿桑唱的。心中有种莫名的激动。看过仙剑一的人虽然多，但是真正喜欢和一直听这首歌的我想并不多。每次听这首歌都能够让内心平静，这才真的是百听不厌的歌。</p>
<h5 id="2019-10-20"><a href="#2019-10-20" class="headerlink" title="2019.10.20"></a>2019.10.20</h5><p>不是，出大问题，忘记把这个hexo blog改名了，差点以为删掉了这个博客， 我又想起了花费一个星期在Hexo配置上的恐惧，好在找到了。这几天学校开运动会，3天假期中，学到了太多东西，都是计算机的一些修复问题，处理了以前解决不了的问题，蛮充实。</p>
<h5 id="2020-9-16"><a href="#2020-9-16" class="headerlink" title="2020.9.16"></a>2020.9.16</h5><p>似乎距离上次随笔已经一年了， 今年早期早就把wordpress搭建好了， 并发表了几篇文章 ， 无奈后期没时间打理， 被人盗了网站，今天又重新搭建好了，等以后网站如果有内容再连接把</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>洛谷 小白逛公园  线段树 最大子序列</title>
    <url>/2019/08/19/%E6%B4%9B%E8%B0%B7-%E5%B0%8F%E7%99%BD%E9%80%9B%E5%85%AC%E5%9B%AD-%E7%BA%BF%E6%AE%B5%E6%A0%91-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<p>以前的普通做法是O(N^3)做法，同时也不会更新，这里用了线段树 + 单点更新。</p>
<span id="more"></span>

<p><a href="https://www.luogu.org/problem/P4513">题目链接</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>用线段树维护一个子序列，同时进行更新。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lc k * 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rc k * 2 + 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">500005</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sum, max_sum, max_post, max_pre;</span><br><span class="line">&#125;tree[maxn * <span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ls = node &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> rs = node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">    tree[node].sum = tree[ls].sum + tree[rs].sum;</span><br><span class="line">    tree[node].max_post = <span class="built_in">max</span>(tree[rs].max_post, tree[ls].max_post + tree[rs].sum);</span><br><span class="line">    tree[node].max_pre = <span class="built_in">max</span>(tree[ls].max_pre, tree[ls].sum + tree[rs].max_pre);</span><br><span class="line">    tree[node].max_sum = <span class="built_in">max</span>(tree[ls].max_sum, <span class="built_in">max</span>(tree[rs].max_sum, tree[ls].max_post + tree[rs].max_pre));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].max_post = tree[node].max_pre = a[l];</span><br><span class="line">        tree[node].max_sum = tree[node].sum = a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r &amp;&amp; l == pos)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node].max_post = tree[node].max_pre =</span><br><span class="line">        tree[node].max_sum = tree[node].sum = k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid)</span><br><span class="line">        <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>, l, mid, pos, k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, pos, k);</span><br><span class="line">    <span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql &lt;= l &amp;&amp; qr &gt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[node];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(qr &lt;= mid)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>, l, mid, ql, qr);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ql &gt; mid)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(node &lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Node ans, ls, rs;</span><br><span class="line">        ls = <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>, l, mid, ql, qr);</span><br><span class="line">        rs = <span class="built_in">query</span>(node &lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">        ans.sum = ls.sum + rs.sum;</span><br><span class="line">        ans.max_post = <span class="built_in">max</span>(rs.max_post, ls.max_post + rs.sum);</span><br><span class="line">        ans.max_pre = <span class="built_in">max</span>(ls.max_pre, ls.sum + rs.max_pre);</span><br><span class="line">        ans.max_sum = <span class="built_in">max</span>(ls.max_sum, <span class="built_in">max</span>(rs.max_sum, ls.max_post + rs.max_pre));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, k, p, s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;k,&amp;p,&amp;s);</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p &gt; s) <span class="built_in">swap</span>(p,s);</span><br><span class="line">            Node ans = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, p, s);</span><br><span class="line">            cout &lt;&lt; ans.max_sum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,n, p, s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>最大子矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客竞赛34 能天使的愿望</title>
    <url>/2019/11/24/%E7%89%9B%E5%AE%A2%E7%AB%9E%E8%B5%9B34-%E8%83%BD%E5%A4%A9%E4%BD%BF%E7%9A%84%E6%84%BF%E6%9C%9B/</url>
    <content><![CDATA[<p>不是，出大问题，看我上一篇文章，刚写的分组背包，然后比赛就不会了?</p>
<p>好吧，其实比赛一眼就看出是分组背包了， 就是细节上不太会处理.</p>
<span id="more"></span>

<p><a href="https://ac.nowcoder.com/acm/contest/2271/A">题目链接</a></p>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>总共要买K个东西，告诉你了在每个商店买从1到M个商品的价格。但是每个商店只能有一种选择。问你买K个东西的最低价格。</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>很显然的分组背包了。但是需要求的是最小值，不是最大值，因此我们初始化的时候需要设成inf，而不是0。 同时我们需要知道转移方程dp[j] &#x3D; min(dp[j], dp[j - k] + $a[i][k]$)  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf =<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">ll a[<span class="number">806</span>][<span class="number">805</span>];</span><br><span class="line">ll v[<span class="number">1005</span>];</span><br><span class="line">ll f[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   ll N, M, Y, K;</span><br><span class="line">   cin &gt;&gt; N &gt;&gt; M &gt;&gt; K &gt;&gt; Y;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)&#123;</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;v[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= M; ++j)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i][j]);</span><br><span class="line">        <span class="keyword">if</span>(j &lt; Y)&#123;</span><br><span class="line">            a[i][j] += v[i] * j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="built_in">memset</span>(f, inf, <span class="built_in">sizeof</span>(f));</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = K; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= M; ++k)&#123;</span><br><span class="line">                f[j] = <span class="built_in">min</span>(f[j], f[j - k] + a[i][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     cout &lt;&lt; f[K] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>分组背包</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客竞赛第七场 A String</title>
    <url>/2019/08/10/%E7%89%9B%E5%AE%A2%E7%AB%9E%E8%B5%9B%E7%AC%AC%E4%B8%83%E5%9C%BA-A-String/</url>
    <content><![CDATA[<p>出题人说是水题。。</p>
<span id="more"></span>

<p><a href="https://ac.nowcoder.com/acm/contest/887/A">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>将原字符串分割，使得每一部分都是一个Perfect串，一个perfect串满足它是它的各种循环串中字典序最小的那个。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>既然尽量分割的少一些，我们从最后一个字符遍历，r &#x3D; len , l &#x3D; 0,看看行不行， 不行就往前扫，直到可以，那么这时候我们就更新为l &#x3D; index, r  &#x3D; len，同时输出满足的串，这样就将原序列化简为了一个更小的串了。更重要的是我们需要会写判断这个串是不是最小字典序。我们知道这个串的长度为len， 那么它所形成的的循环串一共有len个，因此我们的外层循环为len, 然后内层也为len,内层枚举的是这个字符串的每个字符，如果s[j] &gt; s[(i + j)%len],就说明这个串不是最小的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">panduan</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sz = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; sz; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j] &gt; s[(i + j) % sz])</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[j] &lt; s[(i + j) % sz])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">          string s;</span><br><span class="line">          cin &gt;&gt; s;</span><br><span class="line">          <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">          <span class="type">int</span> head = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">while</span>(head &lt; len)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">for</span>(<span class="type">int</span> j = len; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">              &#123;</span><br><span class="line">                  string t = s.<span class="built_in">substr</span>(head, j - head);</span><br><span class="line">                  <span class="keyword">if</span>(<span class="built_in">panduan</span>(t))</span><br><span class="line">                  &#123;</span><br><span class="line">                      cout &lt;&lt; t ;</span><br><span class="line">                      head += j - head;</span><br><span class="line">                      <span class="keyword">if</span>(j &lt; len)</span><br><span class="line">                        cout &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客竞赛第九场 H Cutting Bamboos 主席树 + 二分</title>
    <url>/2019/08/24/%E7%89%9B%E5%AE%A2%E7%AB%9E%E8%B5%9B%E7%AC%AC%E4%B9%9D%E5%9C%BA-H-Cutting-Bamboos-%E4%B8%BB%E5%B8%AD%E6%A0%91-%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<p>一道主席树的好题，虽然WA到哭， 但是最后再自己静下心来理一遍思路，还是很多地方值得学习的。</p>
<span id="more"></span>

<p><a href="https://ac.nowcoder.com/acm/contest/889/H">链接</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>根据题意我们可以很快算出X次Cut后，树木应该剩余的总的高度，但是我们不知道第X次应该从哪个高度去Cut，因此可以二分枚举这个高度，我们把序列用主席树建好，然后就可以查询小于当前高度的总的高度了，再加上高于当前高度的树木的个数 * 当前高度 就是 总的剩余的高度了，我们把这个和理论值比较即可二分。注意Long long 和double的问题。另外本题不需要离散化，因为最大的高度才100000，因此我们可以直接根据高度值建树。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> l,r;</span><br><span class="line">   ll sum, num;</span><br><span class="line">&#125;tr[MAXN * <span class="number">40</span>];</span><br><span class="line"><span class="type">int</span> rt[MAXN],h[MAXN],tot;</span><br><span class="line">ll sum_pre[MAXN];             <span class="comment">//注意Longlong</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;o, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    o = ++tot;</span><br><span class="line">    tr[o].num = <span class="number">0</span>, tr[o].sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(tr[o].l, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(tr[o].r, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> &amp;o, <span class="type">int</span> last, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    o = ++tot;</span><br><span class="line">    tr[o].l = tr[last].l;</span><br><span class="line">    tr[o].r = tr[last].r;</span><br><span class="line">    tr[o].num = tr[last].num + <span class="number">1</span>;</span><br><span class="line">    tr[o].sum = tr[last].sum + pos;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid ) <span class="built_in">update</span>(tr[o].l, tr[last].l, l, mid, pos);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(tr[o].r, tr[last].r,mid + <span class="number">1</span>, r, pos);</span><br><span class="line">&#125;</span><br><span class="line">ll sum, num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> &amp;o, <span class="type">int</span> last, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span>      <span class="comment">//查询小于等于K的树木的高度的总和</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k &lt; l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(k &gt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += tr[o].sum - tr[last].sum;</span><br><span class="line">        num += tr[o].num - tr[last].num;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">query</span>(tr[o].l, tr[last].l, l, mid, k);</span><br><span class="line">    <span class="built_in">query</span>(tr[o].r, tr[last].r, mid + <span class="number">1</span>, r, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">build</span>(rt[<span class="number">0</span>], <span class="number">1</span>, <span class="number">100000</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;h[i]);</span><br><span class="line">        <span class="built_in">update</span>(rt[i], rt[i - <span class="number">1</span>], <span class="number">1</span>, <span class="number">100000</span>, h[i]);</span><br><span class="line">        sum_pre[i] = sum_pre[i - <span class="number">1</span>] + h[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> L, R, x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;L,&amp;R,&amp;x,&amp;y);</span><br><span class="line">        <span class="type">double</span> zong = sum_pre[R] - sum_pre[L - <span class="number">1</span>];</span><br><span class="line">        <span class="type">double</span> standard = zong - (zong * <span class="number">1.0</span> )/y * x;</span><br><span class="line">        <span class="type">double</span> l = <span class="number">0</span>, r = <span class="number">100000</span>;</span><br><span class="line">        <span class="keyword">while</span>(r - l &gt; eps)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            sum = <span class="number">0</span>, num = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">query</span>(rt[R], rt[L - <span class="number">1</span>], <span class="number">1</span>, <span class="number">100000</span>, (<span class="type">int</span>)mid);</span><br><span class="line">            <span class="type">double</span> num1 = (sum + (R - L + <span class="number">1</span> - num) * mid);</span><br><span class="line">            <span class="keyword">if</span>(num1 &gt; standard)</span><br><span class="line">                r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.15f\n&quot;</span>, l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客第五场 B 矩阵快速幂(十进制)</title>
    <url>/2019/08/26/%E7%89%9B%E5%AE%A2%E7%AC%AC%E4%BA%94%E5%9C%BA-B-%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82-%E5%8D%81%E8%BF%9B%E5%88%B6/</url>
    <content><![CDATA[<p>当指数很大的时候可以考虑用十进制快速幂。</p>
<span id="more"></span>

<p><a href="https://ac.nowcoder.com/acm/contest/885/B">链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>标准的快速幂。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>以前是二进制拆分系数，现在改成十进制。</p>
<p>例如$2^{498} &#x3D; 2^8 \times (2^{10})^9 \times (2^{100})^4$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line">ll x0, x1, a, b, mod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span>&#123;</span><br><span class="line">   ll m[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">mul</span><span class="params">(Matrix A, Matrix B)</span></span>&#123;</span><br><span class="line">   Matrix tmp;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>; ++i)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2</span>; ++j)</span><br><span class="line">       &#123;</span><br><span class="line">           tmp.m[i][j] = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">2</span>; ++k)</span><br><span class="line">           &#123;</span><br><span class="line">               tmp.m[i][j] = (tmp.m[i][j] + A.m[i][k] * B.m[k][j]) % mod;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; x0 &gt;&gt; x1 &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cin &gt;&gt; s &gt;&gt; mod;</span><br><span class="line">    Matrix ans,c,d,o;</span><br><span class="line">    ans.m[<span class="number">1</span>][<span class="number">1</span>] = ans.m[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    ans.m[<span class="number">1</span>][<span class="number">2</span>] = ans.m[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    c.m[<span class="number">1</span>][<span class="number">1</span>] = a, c.m[<span class="number">1</span>][<span class="number">2</span>] = b;</span><br><span class="line">    c.m[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>, c.m[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    d.m[<span class="number">1</span>][<span class="number">1</span>] = x1;</span><br><span class="line">    d.m[<span class="number">2</span>][<span class="number">1</span>] = x0;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = s.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num = s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; num; ++j)</span><br><span class="line">            ans = <span class="built_in">mul</span>(ans, c);</span><br><span class="line">        o.m[<span class="number">1</span>][<span class="number">1</span>] = o.m[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        o.m[<span class="number">1</span>][<span class="number">2</span>] = o.m[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j)</span><br><span class="line">            o = <span class="built_in">mul</span>(o, c);</span><br><span class="line">        c = o;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="built_in">mul</span>(ans,d);</span><br><span class="line">    cout &lt;&lt; ans.m[<span class="number">2</span>][<span class="number">1</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>矩阵快速幂</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客第四场 J题 free 分层图</title>
    <url>/2019/11/11/%E7%89%9B%E5%AE%A2%E7%AC%AC%E5%9B%9B%E5%9C%BA-J%E9%A2%98-free-%E5%88%86%E5%B1%82%E5%9B%BE/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p><a href="https://ac.nowcoder.com/acm/contest/884/J">题目链接</a></p>
<p>给你一个图，但是可以把其中某条路的k条边的权值设置为0，问最短路的长度是多少。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>可以构建分层图， 每一层之间都是单向路径，而且长度为0，跑一遍dijkstra即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> v, w, next;</span><br><span class="line">&#125;edge[<span class="number">5000005</span>];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e6</span> + <span class="number">10000</span>;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>, head[maxn], vis[maxn], dist[maxn];</span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    edge[++tot].v = v;</span><br><span class="line">    edge[tot].w = w;</span><br><span class="line">    edge[tot].next = head[u];</span><br><span class="line">    head[u] = tot;</span><br><span class="line"> &#125;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt;Q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Q.<span class="built_in">push</span>(&#123;<span class="number">-0</span>, S&#125;);</span><br><span class="line">    dist[S] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = Q.<span class="built_in">top</span>().second;</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = head[u]; k != <span class="number">-1</span>; k = edge[k].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[k].v;</span><br><span class="line">            <span class="type">int</span> w = edge[k].w;</span><br><span class="line">            <span class="keyword">if</span>(dist[v] &gt; dist[u] + w)</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v] = dist[u] + w;</span><br><span class="line">                Q.<span class="built_in">push</span>(&#123;-dist[v], v&#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, S, T, k,u, v, w;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; S &gt;&gt; T &gt;&gt; k;</span><br><span class="line">    <span class="built_in">memset</span>(dist, inf, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="built_in">sizeof</span>(head));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">        <span class="built_in">add</span>(u, v, w);</span><br><span class="line">        <span class="built_in">add</span>(v, u, w);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add</span>(u + (j<span class="number">-1</span>) * N,v + j * N, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">add</span>(v + (j<span class="number">-1</span>) * N , u + j * N, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">add</span>(u + j * N , v + j * N, w);</span><br><span class="line">            <span class="built_in">add</span>(v + j * N, u + j * N, w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijkstra</span>(S);</span><br><span class="line">    <span class="type">int</span> Min = inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= k; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        Min = <span class="built_in">min</span>(Min, dist[T + i * N]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; Min &lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客练习赛35 背单词</title>
    <url>/2019/04/30/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B35-%E8%83%8C%E5%8D%95%E8%AF%8D/</url>
    <content><![CDATA[<p>题目链接： <a href="https://ac.nowcoder.com/acm/contest/326/B">背单词</a></p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>我们设置一个三维dp数组 ，$dp[i][j][k]$ 代表 第i个字符是j状态（j为0代表是元音，1为辅音）,同时该j状态已经持续了k个字母，这样我们就能唯一确定该字符序列由什么组成了。</p>
<span id="more"></span>

<p>$dp[1][0][1]$ &#x3D; 5  ,   $dp[1][1][1]$ &#x3D;  21.  这是初始化。</p>
<p>当i从2开始遍历的时候，我们先确定一下$dp[i][0][1]$ 以及 $dp[i][1][1]$的状态，之后的话，</p>
<p>$ dp[i][0][j] $ &#x3D; $dp[i - 1][0][j - 1]$ * 5 </p>
<p>$ dp[i][1][j] $  &#x3D; $dp[i - 1][1][j - 1]$ * 21 </p>
<p>就很好求了。  (记录一下在next主题中调用数学公式：需要在文章开头打开mathjax开关（mathjax: true), 同时注意配置中math中改为true)</p>
<p>如果求$dp[i][0][1]$的话，说明第i个字符是元音，且第i - 1个字符是辅音，至于前边有多少个辅音，我们就需要通过循环遍历去找了。</p>
<p>dp的题真的是妙啊，由前边的状态推后边的状态，一层一层的求出来答案。看来以后还要多多训练这方面的题目。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">5001</span>][<span class="number">2</span>][<span class="number">51</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T,N,A,B;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">        cin &gt;&gt; N &gt;&gt; A &gt;&gt; B;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] = <span class="number">21</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= N; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">min</span>(i - <span class="number">1</span>, B) ; ++j)</span><br><span class="line">            dp[i][<span class="number">0</span>][<span class="number">1</span>] = (dp[i][<span class="number">0</span>][<span class="number">1</span>] + dp[i - <span class="number">1</span>][<span class="number">1</span>][j] * <span class="number">5</span>) % mod;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">min</span>(i - <span class="number">1</span>, A); ++j)</span><br><span class="line">            dp[i][<span class="number">1</span>][<span class="number">1</span>] = (dp[i][<span class="number">1</span>][<span class="number">1</span>] + dp[i - <span class="number">1</span>][<span class="number">0</span>][j] * <span class="number">21</span>) % mod;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">2</span>; j &lt;= <span class="built_in">min</span>(i , A); ++j)</span><br><span class="line">            dp[i][<span class="number">0</span>][j] = dp[i - <span class="number">1</span>][<span class="number">0</span>][j - <span class="number">1</span>] * <span class="number">5</span> % mod;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">2</span>; j &lt;= <span class="built_in">min</span>(i, B); ++j)</span><br><span class="line">            dp[i][<span class="number">1</span>][j] = dp[i - <span class="number">1</span>][<span class="number">1</span>][j - <span class="number">1</span>] * <span class="number">21</span> % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">1</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">50</span>; ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum += dp[i][j][k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; sum % mod &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>省赛前的刷题训练(三)</title>
    <url>/2019/05/10/%E7%9C%81%E8%B5%9B%E5%89%8D%E7%9A%84%E5%88%B7%E9%A2%98%E8%AE%AD%E7%BB%83-%E4%B8%89/</url>
    <content><![CDATA[<p>省赛刷题训练（三）</p>
<span id="more"></span>

<p>[Goldbach&#96;s Conjecture](<a href="https://vjudge.net/contest/283110#problem/J">https://vjudge.net/contest/283110#problem/J</a>)</p>
<h4 id="LightOJ-1259"><a href="#LightOJ-1259" class="headerlink" title="LightOJ 1259"></a>LightOJ 1259</h4><p>验证任何一个大于2的偶数都已可表示成两个素数的和。第一次只用了is[]数组，这样的话需要多找一些不必要的数对，同时也会超时。用了prime[]数组后，就可以只遍历素数对了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">10000001</span>;</span><br><span class="line"><span class="type">bool</span> is[maxn];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;prime;</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Prime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(is,<span class="number">0</span>,<span class="built_in">sizeof</span>(is));</span><br><span class="line">    is[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; maxn; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!is[i])</span><br><span class="line">        &#123;</span><br><span class="line">            prime.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + i; j &lt; maxn; j += i)</span><br><span class="line">            &#123;</span><br><span class="line">                is[j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,caser = <span class="number">1</span>, num;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">Prime</span>();</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; num;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;Case %d: &quot;</span>,caser++);</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; prime[i] &lt;= num / <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!is[num - prime[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://poj.org/problem?id=1019">Number Sequence</a></p>
<h4 id="POJ-1019"><a href="#POJ-1019" class="headerlink" title="POJ 1019"></a>POJ 1019</h4><p>是一个思维题，我们需要记录的是每个组中有多少个数字，以及前i组中一共有多少个数字，当我们输入一个位置pos之后，可以判断出它在哪个组中，然后判断出它在这个组中的某个数字num当中，算到这，我们已经知道了在这个组中直到num一共有多少位数字sum，同时也知道了pos这个位置在这个组中的具体位置n,那么用最后的公式就可以求出来最终的答案。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum[<span class="number">35000</span>],s[<span class="number">35000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    sum[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">33001</span> ;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] + (<span class="type">int</span>)<span class="built_in">log10</span>(<span class="built_in">double</span>(i)) + <span class="number">1</span> ;    <span class="comment">//第i组所包含的数字个数</span></span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + s[i];               <span class="comment">//前i组一共的数字个数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="type">int</span> t, n, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(sum[i] &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        index = i;</span><br><span class="line">        n -= sum[index - <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>, index1;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= index; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += (<span class="type">int</span>)<span class="built_in">log10</span>(i) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(sum &gt;= n)</span><br><span class="line">            &#123;</span><br><span class="line">                index1 = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; (index1)/(<span class="type">int</span>)<span class="built_in">pow</span>(<span class="number">10</span>, sum - n) % <span class="number">10</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://acm.sdut.edu.cn/onlinejudge2/index.php/Home/Index/problemdetail/pid/3562.html">Proxy</a></p>
<h4 id="山东省第三届省赛C题"><a href="#山东省第三届省赛C题" class="headerlink" title="山东省第三届省赛C题"></a>山东省第三届省赛C题</h4><p>反向建图，需要我们求出来在最短路径中离0点最近的点，同时下标最小。反向建图时，我们先保存一下与起点相连的点。最后求出最短路径之后，在验证一下这个点可不可以是最短路径上的点。明明记得反向建图，但是还是在add时没有写对，让我一度怀疑链式前向星的问题。注意输出-1的情况，同时求出的这个点恰好就是n + 1点，说明这个图中的最短路径只有 0 点和 n + 1点，因此就把此时的情况输出为0，剩下的就是普通情况了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">     <span class="type">int</span> v,w,next;</span><br><span class="line">&#125;edge[<span class="number">40001</span>];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> head[<span class="number">3001</span>],vis[<span class="number">3001</span>],dist[<span class="number">3001</span>], n, m;</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].v = v;</span><br><span class="line">    edge[tot].w = w;</span><br><span class="line">    edge[tot].next = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dist[s] = <span class="number">0</span>;</span><br><span class="line">    vis[s] = <span class="number">1</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = head[u]; k != <span class="number">-1</span>; k = edge[k].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> w = edge[k].w;</span><br><span class="line">            <span class="type">int</span> v = edge[k].v;</span><br><span class="line">            <span class="keyword">if</span>(dist[v] &gt; dist[u] + w)</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v] = dist[u] + w;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                    Q.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t, num[<span class="number">1003</span>][<span class="number">2</span>], u,v,w;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        tot = <span class="number">1</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;V;</span><br><span class="line">        <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="built_in">sizeof</span>(head));</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(dist,inf,<span class="built_in">sizeof</span>(dist));</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="built_in">sizeof</span>(num));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            <span class="built_in">add</span>(v,u,w);</span><br><span class="line">            <span class="keyword">if</span>(u == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                V.<span class="built_in">push_back</span>(v);</span><br><span class="line">                num[v][<span class="number">0</span>] = w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">spfa</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(dist[<span class="number">0</span>] == inf)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> miner = inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; V.<span class="built_in">size</span>() ; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dist[V[i]] + num[V[i]][<span class="number">0</span>] == dist[<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(V[i] &lt; miner)</span><br><span class="line">                &#123;</span><br><span class="line">                    miner = V[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(miner == n + <span class="number">1</span>)</span><br><span class="line">            cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; miner &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1896">Stones</a></p>
<h4 id="HDU-1896"><a href="#HDU-1896" class="headerlink" title="HDU 1896"></a>HDU 1896</h4><p>扔石子游戏，只能扔奇数块的石头，在某一个位置可以扔那个位置上的石头，扔的距离由你输入的决定，一块石头扔出去之后会到达另一个位置。问最后石头到达的最远的位置是什么。优先队列模拟。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">   <span class="type">int</span> pos, dis;</span><br><span class="line">   <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp; a)<span class="type">const</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(a.pos != pos)</span><br><span class="line">        <span class="keyword">return</span> a.pos &lt; pos;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.dis &lt; dis;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;a[<span class="number">300001</span>];</span><br><span class="line">priority_queue&lt;node&gt;Q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a[i].pos , &amp;a[i].dis);</span><br><span class="line">            Q.<span class="built_in">push</span>(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> counter = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(counter % <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                node A = Q.<span class="built_in">top</span>();</span><br><span class="line">                Q.<span class="built_in">push</span>(&#123;A.pos + A.dis, A.dis&#125;);</span><br><span class="line">                sum = <span class="built_in">max</span>(sum, A.pos + A.dis);</span><br><span class="line">                Q.<span class="built_in">pop</span>();</span><br><span class="line">                counter ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                Q.<span class="built_in">pop</span>();</span><br><span class="line">                counter++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>思维</tag>
        <tag>stl</tag>
        <tag>最短路径</tag>
        <tag>素数筛</tag>
      </tags>
  </entry>
  <entry>
    <title>省赛前的刷题训练(四)</title>
    <url>/2019/05/10/%E7%9C%81%E8%B5%9B%E5%89%8D%E7%9A%84%E5%88%B7%E9%A2%98%E8%AE%AD%E7%BB%83-%E5%9B%9B/</url>
    <content><![CDATA[<p>省赛刷题训练（四）</p>
<span id="more"></span>

<p><a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=5555">Highway Project </a></p>
<h4 id="ZOJ-3946"><a href="#ZOJ-3946" class="headerlink" title="ZOJ 3946"></a>ZOJ 3946</h4><p>最短路问题,需要在最短时间的最基础求另一个最小花费，实际上只需要在if(dist[] &gt; dist[] + w)中加上另外判断的两句即可。还有需要注意的是，dist[]数组要开Long long ，最后求总的花费的时候，不要把0点加进去，除非你已经设定dist[0] &#x3D; 0 且 cost[0] &#x3D; 0.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">200001</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> v,t,m,next;</span><br><span class="line">&#125;edge[<span class="number">300001</span>];</span><br><span class="line"><span class="type">int</span> tot, N, M;</span><br><span class="line"><span class="type">int</span> vis[maxn],head[maxn],cost[maxn];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dist[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> time,<span class="type">int</span> money)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].v = v;</span><br><span class="line">    edge[tot].t = time;</span><br><span class="line">    edge[tot].m = money;</span><br><span class="line">    edge[tot].next = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dist[s] = <span class="number">0</span>;</span><br><span class="line">    vis[s] = <span class="number">1</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = head[u] ; k != <span class="number">-1</span>; k = edge[k].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[k].v;</span><br><span class="line">            <span class="type">int</span> t = edge[k].t;</span><br><span class="line">            <span class="type">int</span> m = edge[k].m;</span><br><span class="line">            <span class="keyword">if</span>(dist[v] &gt; dist[u] +  t || (dist[v] == dist[u] + t &amp;&amp; cost[v] &gt; m))</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v] = dist[u] + t;</span><br><span class="line">                cost[v] = m;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                    Q.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T, u ,v, t ,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;N,&amp;M);</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(dist,inf,<span class="built_in">sizeof</span>(dist));</span><br><span class="line">        <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="built_in">sizeof</span>(head));</span><br><span class="line">        <span class="built_in">memset</span>(cost,inf,<span class="built_in">sizeof</span>(cost));</span><br><span class="line">        tot = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= M; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;u,&amp;v,&amp;t,&amp;m);</span><br><span class="line">            <span class="built_in">add</span>(u,v,t,m);</span><br><span class="line">            <span class="built_in">add</span>(v,u,t,m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">spfa</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum1 += dist[i];</span><br><span class="line">            sum += cost[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; sum1 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; sum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1811">Rank of Tetris</a></p>
<h4 id="HDU-1811"><a href="#HDU-1811" class="headerlink" title="HDU 1811"></a>HDU 1811</h4><p>相等的时候需要用并查集进行合并，我做的时候，遇到 &gt; 就加边， 遇到&lt;就加边，遇到等号就合并，问题是合并了之后并不会对以前的结果有影响，因此第一次输入的时候我只是先处理等号的情况，其他的情况先存起来，先把&#x3D;的对象合并起来。第二次再处理 &gt;和&lt; ,但是我们在进行加边的时候，需要先查找两个对象的祖先，再进行加边，这样也就意味着我们把所有是&#x3D;的对象看成一个团体了，我WA了好几次，都是f[i]和 Find(i)傻傻分不清，还要注意在进行拓扑排序的时候，一开始我们往里push的时候，不仅要求in[i] &#x3D;&#x3D; 0 还必须满足 Find(i) &#x3D;&#x3D; i，否则对于那些我们已经不管的是等于号的节点也加进去了。感觉这道题还是很不错了，以后有时间还要再做一遍。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">20001</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">  <span class="type">int</span> A, B;</span><br><span class="line">  string s;</span><br><span class="line">&#125;a[<span class="number">20001</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;G[maxn];</span><br><span class="line"><span class="type">int</span> flag , sum, f[<span class="number">20001</span>], n, m, in[<span class="number">30001</span>],cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != f[x])</span><br><span class="line">    &#123;</span><br><span class="line">        f[x] = <span class="built_in">Find</span>(f[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">combine</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> fa = <span class="built_in">Find</span>(a);</span><br><span class="line">    <span class="type">int</span> fb = <span class="built_in">Find</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(fa != fb)</span><br><span class="line">    &#123;</span><br><span class="line">        f[fa] = fb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;Q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!in[i] &amp;&amp; <span class="built_in">Find</span>(i) == i)</span><br><span class="line">        &#123;</span><br><span class="line">            Q.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Q.<span class="built_in">size</span>() &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> u = Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = G[u][i];</span><br><span class="line">            in[v]--;</span><br><span class="line">            <span class="keyword">if</span>(!in[v])</span><br><span class="line">            &#123;</span><br><span class="line">                Q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt != sum)</span><br><span class="line">        flag = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span>  A, B;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line">    sum = n;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        G[i].<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="built_in">sizeof</span>(in));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        f[i] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; a[i].A &gt;&gt; a[i].s &gt;&gt; a[i].B;</span><br><span class="line">        <span class="keyword">if</span>(a[i].s[<span class="number">0</span>] == <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Find</span>(a[i].A) != <span class="built_in">Find</span>(a[i].B))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">combine</span>(a[i].A , a[i].B);</span><br><span class="line">                sum--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i].s[<span class="number">0</span>] == <span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            A = <span class="built_in">Find</span>(a[i].A);</span><br><span class="line">            B = <span class="built_in">Find</span>(a[i].B);</span><br><span class="line">            G[A].<span class="built_in">push_back</span>(B);</span><br><span class="line">            in[B] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i].s[<span class="number">0</span>] == <span class="string">&#x27;&lt;&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            A = <span class="built_in">Find</span>(a[i].A);</span><br><span class="line">            B = <span class="built_in">Find</span>(a[i].B);</span><br><span class="line">            G[B].<span class="built_in">push_back</span>(A);</span><br><span class="line">            in[A]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">2</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;CONFLICT&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(flag == <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;UNCERTAIN&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;OK&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
  </entry>
  <entry>
    <title>省赛前的刷题训练(一)</title>
    <url>/2019/05/09/%E7%9C%81%E8%B5%9B%E5%89%8D%E7%9A%84%E5%88%B7%E9%A2%98%E8%AE%AD%E7%BB%83%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>省赛刷题训练（一）</p>
<span id="more"></span>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1495">非常可乐</a></p>
<p>临近比赛，不再学习新知识，把以前csdn上的题拿过来重新做一遍。</p>
<h4 id="HDU-1495"><a href="#HDU-1495" class="headerlink" title="HDU 1495"></a>HDU 1495</h4><p>寒假训练的一道题，拿出来重新做，思路很清晰了，就是因为细节问题改了几遍。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">       <span class="type">int</span> x,y,z,time;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> vis[<span class="number">101</span>][<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> S,<span class="type">int</span> N,<span class="type">int</span> M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node A,B;</span><br><span class="line">    queue&lt;node&gt;Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(&#123;S,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">    vis[S][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        A = Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>((A.x == A.y &amp;&amp; A.x == S / <span class="number">2</span> &amp;&amp; A.z == <span class="number">0</span>) || (A.x == A.z &amp;&amp; A.x == S / <span class="number">2</span> &amp;&amp; A.y == <span class="number">0</span>) || (A.y == A.z &amp;&amp; A.y == S / <span class="number">2</span> &amp;&amp; A.x == <span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> A.time;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(A.x &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            B.y = A.y + <span class="built_in">min</span>(A.x, N - A.y);</span><br><span class="line">            B.x = A.x - <span class="built_in">min</span>(A.x, N - A.y);</span><br><span class="line">            B.z = A.z;</span><br><span class="line">            B.time = A.time + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!vis[B.x][B.y][B.z])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[B.x][B.y][B.z] = <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(B);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(A.x &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            B.z = A.z + <span class="built_in">min</span>(A.x, M - A.z);</span><br><span class="line">            B.x = A.x - <span class="built_in">min</span>(A.x, M - A.z);</span><br><span class="line">            B.y = A.y;</span><br><span class="line">             B.time = A.time + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!vis[B.x][B.y][B.z])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[B.x][B.y][B.z] = <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(B);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(A.y &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            B.y = A.y - <span class="built_in">min</span>(A.y, S - A.x);</span><br><span class="line">            B.x = A.x + <span class="built_in">min</span>(A.y, S - A.x);</span><br><span class="line">            B.z = A.z;</span><br><span class="line">             B.time = A.time + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!vis[B.x][B.y][B.z])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[B.x][B.y][B.z] = <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(B);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(A.y &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            B.y = A.y - <span class="built_in">min</span>(A.y, M - A.z);</span><br><span class="line">            B.z = A.z + <span class="built_in">min</span>(A.y, M - A.z);</span><br><span class="line">            B.x = A.x;</span><br><span class="line">            B.time = A.time + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!vis[B.x][B.y][B.z])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[B.x][B.y][B.z] = <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(B);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">if</span>(A.z &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            B.z = A.z - <span class="built_in">min</span>(A.z, S - A.x);</span><br><span class="line">            B.x = A.x + <span class="built_in">min</span>(A.z, S - A.x);</span><br><span class="line">            B.y = A.y;</span><br><span class="line">             B.time = A.time + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!vis[B.x][B.y][B.z])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[B.x][B.y][B.z] = <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(B);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">if</span>(A.z &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            B.z = A.z - <span class="built_in">min</span>(A.z, N - A.y);</span><br><span class="line">            B.y = A.y + <span class="built_in">min</span>(A.z, N - A.y);</span><br><span class="line">            B.x = A.x;</span><br><span class="line">             B.time = A.time + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!vis[B.x][B.y][B.z])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[B.x][B.y][B.z] = <span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(B);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> S,N,M;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; S &gt;&gt; N &gt;&gt; M)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">if</span>(S == <span class="number">0</span> &amp;&amp; N == <span class="number">0</span> &amp;&amp; M == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="type">int</span> c = <span class="built_in">bfs</span>(S,N,M);</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="number">-1</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; c &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="HDU-4006"><a href="#HDU-4006" class="headerlink" title="HDU 4006"></a>HDU 4006</h4><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4006">The kth great number</a></p>
<p>运用multiset应该更简单一些，不用排序了，这里练习vector的用法。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,k,num;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; k)</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;V;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; s;</span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cin &gt;&gt; num;</span><br><span class="line">                V.<span class="built_in">insert</span>(<span class="built_in">lower_bound</span>(V.<span class="built_in">begin</span>(),V.<span class="built_in">end</span>(),num), num);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cout &lt;&lt; V[V.<span class="built_in">size</span>() - k] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1556">Color the ball</a></p>
<h4 id="HDU-1556"><a href="#HDU-1556" class="headerlink" title="HDU 1556"></a>HDU 1556</h4><p>好长时间没写线段树了，竟然连区间更新有个Pushdown都忘记了，好歹看了一眼模板又想起来了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> tree[<span class="number">400001</span>];</span><br><span class="line"><span class="type">int</span> addmark[<span class="number">400001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> begin,<span class="type">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(addmark[node] == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (begin + end) / <span class="number">2</span>;</span><br><span class="line">    addmark[node &lt;&lt; <span class="number">1</span>] += addmark[node];</span><br><span class="line">    addmark[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>] += addmark[node];</span><br><span class="line">    tree[node &lt;&lt; <span class="number">1</span>] += addmark[node] * (mid - begin + <span class="number">1</span>);</span><br><span class="line">    tree[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>] += addmark[node] * (end - mid);</span><br><span class="line">    addmark[node] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> begin ,<span class="type">int</span> end,<span class="type">int</span> l ,<span class="type">int</span> r ,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; end || r &lt; begin)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= begin &amp;&amp; r &gt;= end)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[node] += k;</span><br><span class="line">        addmark[node] += k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(node,begin,end);</span><br><span class="line">    <span class="type">int</span> mid = (begin + end) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>, begin , mid, l, r, k);</span><br><span class="line">    <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, end, l ,r ,k);</span><br><span class="line">    tree[node] = tree[node &lt;&lt; <span class="number">1</span>] +  tree[node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> begin,<span class="type">int</span> end,<span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos &gt; end || pos &lt; begin)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos == begin &amp;&amp; begin == end)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[node];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(node,begin,end);</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (begin + end) / <span class="number">2</span>;</span><br><span class="line">    sum += <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>,begin ,mid, pos);</span><br><span class="line">    sum += <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>|<span class="number">1</span>,mid + <span class="number">1</span>,end,pos);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="built_in">memset</span>(tree,<span class="number">0</span>,<span class="built_in">sizeof</span>(tree));</span><br><span class="line">        <span class="built_in">memset</span>(addmark,<span class="number">0</span>,<span class="built_in">sizeof</span>(addmark));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">            <span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,i),i == n ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2141">Can you find it?</a></p>
<h4 id="HDU-2141"><a href="#HDU-2141" class="headerlink" title="HDU 2141"></a>HDU 2141</h4><p>再次做二分的题，第一次优化到n^2log(n)果然超时，因为我只是排了第三个数字的顺序。第二次把第一个和第二个数组的和放到一个数组里，再用二分。（可我竟然把a数组和b数组接连放到一个数组里，佩服我自己。在CSDN中用的是标准的二分，这里直接用的lower_bound函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">501</span>],b[<span class="number">501</span>],c[<span class="number">501</span>],L,N,M,num,k, caser = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> d[<span class="number">505</span>*<span class="number">505</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;L,&amp;N,&amp;M) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; L; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; L; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                d[tot++] = a[i] + b[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(d , d + tot);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case %d:\n&quot;</span>,caser++);</span><br><span class="line">        <span class="keyword">while</span>(num--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> num1 = k - c[i];</span><br><span class="line">            <span class="type">int</span> m = <span class="built_in">lower_bound</span>(d, d + tot, num1) - d;</span><br><span class="line">            <span class="keyword">if</span>(d[m] == num1)</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>bfs</tag>
        <tag>二分</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title>省赛前的刷题训练(二)</title>
    <url>/2019/05/09/%E7%9C%81%E8%B5%9B%E5%89%8D%E7%9A%84%E5%88%B7%E9%A2%98%E8%AE%AD%E7%BB%83%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>省赛刷题训练（二）</p>
<span id="more"></span>

<p><a href="http://fastvj.rainng.com/problem/UVA-1152">Values whose Sum is 0</a></p>
<h4 id="UVA-1152"><a href="#UVA-1152" class="headerlink" title="UVA 1152"></a>UVA 1152</h4><p>一个简单的二分题目，将a数组和b数组排个序，c数组和d数组排个序，然后对第二个数组进行二分查找。这里要找的是个数，所以upper_bound和lower_bound一相减然后加起来就是答案。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int e[4001 * 4001],f[4001 * 4001];</span><br><span class="line">int a[4001],b[4001],c[4001],d[4001];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t, n;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">    while(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">        for(int i = 0; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d %d %d %d&quot;,&amp;a[i],&amp;b[i],&amp;c[i],&amp;d[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        int tot = 0;</span><br><span class="line">        for(int i = 0 ; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">             for(int j = 0; j &lt; n; ++j)</span><br><span class="line">             &#123;</span><br><span class="line">                 e[tot++] = a[i] + b[j];</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tot = 0;</span><br><span class="line">        for(int i = 0; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int j = 0 ;j &lt; n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                f[tot++] = c[i] + d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(e , e + tot);</span><br><span class="line">        sort(f , f + tot);</span><br><span class="line">        int sum = 0;</span><br><span class="line">        for(int i = 0; i &lt; tot; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            int m = upper_bound(f , f + tot , -e[i]) - lower_bound(f ,f + tot, -e[i]);</span><br><span class="line">            sum += m;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; &#x27;\n&#x27;;</span><br><span class="line">        if(t)</span><br><span class="line">            cout &lt;&lt; &#x27;\n&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1058">Humble numbers</a></p>
<h4 id="HDU-1058"><a href="#HDU-1058" class="headerlink" title="HDU 1058"></a>HDU 1058</h4><p>再一次做感觉思路清晰了挺多，第一次做没有理解本质，再一次做的时候，想到每一个数其实都可以通过它前面的数字乘积得到。2 3 5 7作为乘积的一个参数，另一个参数就是前面已经出现过的数字。比如8，通过2 * 4得到，2是一个因子，4是因为前边已经出现过了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">elect</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> aa = <span class="number">1</span>, bb = <span class="number">1</span>, cc = <span class="number">1</span>, dd = <span class="number">1</span>;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">5842</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = <span class="built_in">min</span>(<span class="number">2</span> * a[aa], <span class="built_in">min</span>(<span class="number">3</span> * a[bb], <span class="built_in">min</span>(<span class="number">5</span> * a[cc] , <span class="number">7</span> * a[dd])));</span><br><span class="line">        <span class="keyword">if</span>(a[i] == <span class="number">2</span> * a[aa])</span><br><span class="line">         aa++;</span><br><span class="line">        <span class="keyword">if</span>(a[i] == <span class="number">3</span> * a[bb])</span><br><span class="line">        bb++;</span><br><span class="line">        <span class="keyword">if</span>(a[i] == <span class="number">5</span> * a[cc])</span><br><span class="line">            cc++;</span><br><span class="line">        <span class="keyword">if</span>(a[i] == <span class="number">7</span> * a[dd])</span><br><span class="line">            dd++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">elect</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span> ,&amp;n) != EOF &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">10</span> == <span class="number">1</span> &amp;&amp; n % <span class="number">100</span> != <span class="number">11</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;The %dst humble number is %d.\n&quot;</span>,n,a[n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n % <span class="number">10</span> == <span class="number">2</span> &amp;&amp; n % <span class="number">100</span> != <span class="number">12</span>)</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;The %dnd humble number is %d.\n&quot;</span>,n,a[n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n % <span class="number">10</span> == <span class="number">3</span> &amp;&amp; n % <span class="number">100</span> != <span class="number">13</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;The %drd humble number is %d.\n&quot;</span>,n,a[n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;The %dth humble number is %d.\n&quot;</span>,n,a[n]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1022">Train Problem I</a></p>
<h4 id="HDU-1022"><a href="#HDU-1022" class="headerlink" title="HDU 1022"></a>HDU 1022</h4><p>模拟火车的进出站。注意栈为空就要停止。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">&#125;b[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt;S;</span><br><span class="line">        string s,s1;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        cin &gt;&gt; s1;</span><br><span class="line">        <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            S.<span class="built_in">push</span>(s[i]);</span><br><span class="line">            b[ans++].s = <span class="string">&quot;in&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span>(s1[tot] == S.<span class="built_in">top</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                S.<span class="built_in">pop</span>();</span><br><span class="line">                tot++;</span><br><span class="line">                b[ans++].s = <span class="string">&quot;out&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span>(tot == s<span class="number">1.</span><span class="built_in">size</span>() || S.<span class="built_in">empty</span>())</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(S.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Yes.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; b[i].s &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;FINISH&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;FINISH&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3823">Prime Friend</a></p>
<h4 id="HDU-3823"><a href="#HDU-3823" class="headerlink" title="HDU 3823"></a>HDU 3823</h4><p>需要注意的是输入的A和B的大小关系不一定，素数打表范围要开的很大。第一次WA是因为没有搞懂什么是prime neighbor .  比如说输入2 和 4这两个数字，我们找到了1，因为1 + 2 和 1 + 4是素数，同时 3 和 5 还是素数相邻。  这样的话我们最终在枚举的时候，就枚举相邻的两个素数就行了，满足条件的话就输出对应的数字。而不是从1遍历任意一个数字，看这个数字是否满足条件。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">20000001</span>;</span><br><span class="line"><span class="type">bool</span> is[maxn];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="type">int</span> prime[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(is,<span class="number">0</span>,<span class="built_in">sizeof</span>(is));</span><br><span class="line">    is[<span class="number">0</span>] = is[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; maxn; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!is[i])</span><br><span class="line">        &#123;</span><br><span class="line">            prime[tot++] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + i; j &lt; maxn; j += i)</span><br><span class="line">            &#123;</span><br><span class="line">                is[j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Prime</span>();</span><br><span class="line">    <span class="type">int</span> t,caser = <span class="number">1</span>,A,B;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;A,&amp;B);</span><br><span class="line">        <span class="keyword">if</span>(A &gt; B)</span><br><span class="line">            <span class="built_in">swap</span>(A,B);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case %d: &quot;</span>,caser++);</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; tot; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(prime[i + <span class="number">1</span>] - prime[i] == B - A &amp;&amp; prime[i] &gt;= A)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = prime[i] - A;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       cout &lt;&lt; flag &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>stl</tag>
        <tag>素数筛</tag>
      </tags>
  </entry>
  <entry>
    <title>端午节之结束双向BFS的噩梦</title>
    <url>/2019/06/07/%E7%AB%AF%E5%8D%88%E8%8A%82%E4%B9%8B%E7%BB%93%E6%9D%9F%E5%8F%8C%E5%90%91BFS%E7%9A%84%E5%99%A9%E6%A2%A6/</url>
    <content><![CDATA[<p>这道题WA了好几天了，总是不知道哪里出了问题，后来看了看，到处都是问题. …… 本来想开始复习考试科目的，奈何总是受这道未A的题目的干扰，总算是解决了。</p>
<span id="more"></span>

<p><a href="http://poj.org/problem?id=1198">Solitaire </a></p>
<h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给你棋盘的初始状态和结束状态，问你从初始状态到结束状态能不能只通过不多于八步的移动。</p>
<h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>如果是单向BFS，每次移动有16种可能，8步就是$16^8$  ,还是很大的。不过通过剪枝还是能过的。</p>
<p>但是双向BFS，简单写写就过了，<del>前提是你得会啊QWQ</del></p>
<p>存储状态用的八维数组，找个时间用hash存储状态。</p>
<p>提醒几点我出错的地方。排序的时候忘记加引用，跳完两步之后，可能那个位置本身也有棋子，注意将状态Push进队列的顺序，是在判断完那几个if之后。记得vis要用char或者bool类型，否则会MLE。</p>
<p>本来已经总结了类似的模板，结果看了网上的题解，不断的修改模板，最后又改回了我的原本的模板。兜兜转转，人生如此QWQ。。</p>
<p>不得不说，双向BFS真快啊！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> vis[<span class="number">8</span>][<span class="number">8</span>][<span class="number">8</span>][<span class="number">8</span>][<span class="number">8</span>][<span class="number">8</span>][<span class="number">8</span>][<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x[<span class="number">4</span>], y[<span class="number">4</span>];</span><br><span class="line">&#125; a, b;</span><br><span class="line">queue&lt;node&gt;Q[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">selfsort</span><span class="params">(node &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a.x[i] &gt; a.x[j] || (a.x[i] == a.x[j] &amp;&amp; a.y[i] &gt; a.y[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a.x[i], a.x[j]);</span><br><span class="line">                <span class="built_in">swap</span>(a.y[i], a.y[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,&#123;<span class="number">0</span>, <span class="number">-1</span>&#125;,&#123;<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(node c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> vis[c.x[<span class="number">0</span>]][c.x[<span class="number">1</span>]][c.x[<span class="number">2</span>]][c.x[<span class="number">3</span>]][c.y[<span class="number">0</span>]][c.y[<span class="number">1</span>]][c.y[<span class="number">2</span>]][c.y[<span class="number">3</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sz = Q[id].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span>(sz--)</span><br><span class="line">    &#123;</span><br><span class="line">        node p = Q[id].<span class="built_in">front</span>();</span><br><span class="line">        Q[id].<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)        <span class="comment">//第几个棋子来走</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j)    <span class="comment">//这个棋子的走向</span></span><br><span class="line">            &#123;</span><br><span class="line">                node c = p;</span><br><span class="line">                c.x[i] = p.x[i] + dir[j][<span class="number">0</span>];</span><br><span class="line">                c.y[i] = p.y[i] + dir[j][<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k)        <span class="comment">//判断会不会跳过去</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(p.x[k] == c.x[i] &amp;&amp; p.y[k] == c.y[i] &amp;&amp; k != i)</span><br><span class="line">                    &#123;</span><br><span class="line">                        c.x[i] += dir[j][<span class="number">0</span>];</span><br><span class="line">                        c.y[i] += dir[j][<span class="number">1</span>];</span><br><span class="line">                        flag = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> flag1 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(flag)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(c.x[i] == p.x[k] &amp;&amp; c.y[i] == p.y[k])</span><br><span class="line">                    &#123;</span><br><span class="line">                        flag1 = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag1)  <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(c.x[i] &lt; <span class="number">0</span> || c.x[i] &gt; <span class="number">7</span> || c.y[i] &lt; <span class="number">0</span> || c.y[i] &gt; <span class="number">7</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="built_in">selfsort</span>(c);</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">check</span>(c) == id + <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>((id == <span class="number">0</span> &amp;&amp; <span class="built_in">check</span>(c) == <span class="number">2</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>((id == <span class="number">1</span> &amp;&amp; <span class="built_in">check</span>(c) == <span class="number">1</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                vis[c.x[<span class="number">0</span>]][c.x[<span class="number">1</span>]][c.x[<span class="number">2</span>]][c.x[<span class="number">3</span>]][c.y[<span class="number">0</span>]][c.y[<span class="number">1</span>]][c.y[<span class="number">2</span>]][c.y[<span class="number">3</span>]] = id + <span class="number">1</span>;</span><br><span class="line">                Q[id].<span class="built_in">push</span>(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!Q[<span class="number">0</span>].<span class="built_in">empty</span>())</span><br><span class="line">        Q[<span class="number">0</span>].<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">while</span>(!Q[<span class="number">1</span>].<span class="built_in">empty</span>())</span><br><span class="line">        Q[<span class="number">1</span>].<span class="built_in">pop</span>();</span><br><span class="line">    Q[<span class="number">0</span>].<span class="built_in">push</span>(a);</span><br><span class="line">    Q[<span class="number">1</span>].<span class="built_in">push</span>(b);</span><br><span class="line">    <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q[<span class="number">0</span>].<span class="built_in">empty</span>() || !Q[<span class="number">1</span>].<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num1 = <span class="built_in">bfs</span>(<span class="number">0</span>);</span><br><span class="line">        step++;</span><br><span class="line">        <span class="keyword">if</span>(num1)</span><br><span class="line">          <span class="keyword">return</span> step;</span><br><span class="line">        <span class="type">int</span> num2 = <span class="built_in">bfs</span>(<span class="number">1</span>);</span><br><span class="line">        step++;</span><br><span class="line">        <span class="keyword">if</span>(num2)</span><br><span class="line">            <span class="keyword">return</span> step;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d %d %d %d %d&quot;</span>,&amp;a.x[<span class="number">0</span>], &amp;a.y[<span class="number">0</span>], &amp;a.x[<span class="number">1</span>], &amp;a.y[<span class="number">1</span>], &amp;a.x[<span class="number">2</span>], &amp;a.y[<span class="number">2</span>], &amp;a.x[<span class="number">3</span>], &amp;a.y[<span class="number">3</span>]) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="string">&#x27;0&#x27;</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d %d %d %d %d&quot;</span>,&amp;b.x[<span class="number">0</span>], &amp;b.y[<span class="number">0</span>], &amp;b.x[<span class="number">1</span>], &amp;b.y[<span class="number">1</span>], &amp;b.x[<span class="number">2</span>], &amp;b.y[<span class="number">2</span>], &amp;b.x[<span class="number">3</span>], &amp;b.y[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            a.x[i]--;</span><br><span class="line">            a.y[i]--;</span><br><span class="line">            b.x[i]--;</span><br><span class="line">            b.y[i]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">selfsort</span>(a);</span><br><span class="line">        <span class="built_in">selfsort</span>(b);</span><br><span class="line">        vis[a.x[<span class="number">0</span>]][a.x[<span class="number">1</span>]][a.x[<span class="number">2</span>]][a.x[<span class="number">3</span>]][a.y[<span class="number">0</span>]][a.y[<span class="number">1</span>]][a.y[<span class="number">2</span>]][a.y[<span class="number">3</span>]] = <span class="number">1</span>;</span><br><span class="line">        vis[b.x[<span class="number">0</span>]][b.x[<span class="number">1</span>]][b.x[<span class="number">2</span>]][b.x[<span class="number">3</span>]][b.y[<span class="number">0</span>]][b.y[<span class="number">1</span>]][b.y[<span class="number">2</span>]][b.y[<span class="number">3</span>]] = <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> s = <span class="built_in">solve</span>();</span><br><span class="line">        <span class="keyword">if</span>(s &lt;= <span class="number">8</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>双向BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>算法竞赛入门经典 第三章例题</title>
    <url>/2019/05/15/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8-%E7%AC%AC%E4%B8%89%E7%AB%A0%E4%BE%8B%E9%A2%98/</url>
    <content><![CDATA[<p> 算法竞赛入门经典第三章例题部分</p>
<span id="more"></span>

<h5 id="TEX-Quotes"><a href="#TEX-Quotes" class="headerlink" title="TEX Quotes"></a>TEX Quotes</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(cin, s))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt % <span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;``&quot;</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;&#x27;&#x27;&quot;</span>;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout &lt;&lt; s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="WERTYU"><a href="#WERTYU" class="headerlink" title="WERTYU"></a>WERTYU</h5><p>学会了用常量数组，确实方便，一开始做用map，很麻烦。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> s[] = <span class="string">&quot;`1234567890-=QWERTYUIOP[]\\ASDFGHJKL;&#x27;ZXCVBNM,./&quot;</span>;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>((c = <span class="built_in">getchar</span>()) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; s[i] ; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == c)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">putchar</span>(s[i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="built_in">putchar</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Palindromes"><a href="#Palindromes" class="headerlink" title="Palindromes"></a>Palindromes</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string s1 = <span class="string">&quot;AEHIJLMOSTUVWXYZ12358&quot;</span>;</span><br><span class="line">string s2 = <span class="string">&quot;A3HILJMO2TUVWXY51SEZ8&quot;</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_palin</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sz = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= s.<span class="built_in">size</span>() / <span class="number">2</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] != s[sz - i])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_mirror</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sz = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= s.<span class="built_in">size</span>() / <span class="number">2</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; s<span class="number">1.</span><span class="built_in">size</span>(); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s1[j] == s[i])</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(s2[j] != s[sz - i])</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="type">int</span> num,num1;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num1 = <span class="built_in">is_palin</span>(s);</span><br><span class="line">        <span class="type">int</span> num2 = <span class="built_in">is_mirror</span>(s);</span><br><span class="line">        <span class="keyword">if</span>(num1 &amp;&amp; num2)</span><br><span class="line">            cout &lt;&lt; s &lt;&lt; <span class="string">&quot; -- is a mirrored palindrome.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!num1 &amp;&amp; !num2)</span><br><span class="line">            cout &lt;&lt; s &lt;&lt; <span class="string">&quot; -- is not a palindrome.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!num1 &amp;&amp; num2)</span><br><span class="line">            cout &lt;&lt; s &lt;&lt; <span class="string">&quot; -- is a mirrored string.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(num1 &amp;&amp; !num2)</span><br><span class="line">            cout &lt;&lt; s &lt;&lt; <span class="string">&quot; -- is a regular palindrome.&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Master-Mind-Hints"><a href="#Master-Mind-Hints" class="headerlink" title="Master-Mind Hints"></a>Master-Mind Hints</h5><p>代码1：自己写的算是比较暴力了</p>
<p>代码2： 参考的书，更简便一些。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">% 代码<span class="number">1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3005</span>],b[<span class="number">3005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> vis[<span class="number">1010</span>];</span><br><span class="line">    <span class="type">int</span> caser = <span class="number">1</span>, n;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Game %d:\n&quot;</span>,caser++);</span><br><span class="line">        multiset&lt;<span class="type">int</span>&gt;S;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            S.<span class="built_in">insert</span>(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b[i]);</span><br><span class="line">            <span class="keyword">if</span>(b[i] == <span class="number">0</span>)</span><br><span class="line">                cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt == n)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="type">int</span> cnt1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i] &amp;&amp; a[i] == b[i])</span><br><span class="line">            &#123;</span><br><span class="line">                S.<span class="built_in">erase</span>(S.<span class="built_in">find</span>(a[i]));</span><br><span class="line">                vis[i] = <span class="number">1</span>;</span><br><span class="line">                cnt1++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> cnt2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i] &amp;&amp; S.<span class="built_in">count</span>(b[i]) &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                S.<span class="built_in">erase</span>(S.<span class="built_in">find</span>(b[i]));</span><br><span class="line">                vis[i] = <span class="number">1</span>;</span><br><span class="line">                cnt2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;    (%d,%d)\n&quot;</span>,cnt1, cnt2);</span><br><span class="line">        S.<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">% 代码二</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3005</span>],b[<span class="number">3005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> vis[<span class="number">1005</span>];</span><br><span class="line">    <span class="type">int</span> n, caser = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Game %d:\n&quot;</span>,caser++);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b[i]);</span><br><span class="line">                <span class="keyword">if</span>(b[i] == a[i])</span><br><span class="line">                    cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(b[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="type">int</span> cnt3 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> cnt1 ,cnt2;</span><br><span class="line">                cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(a[j] == i) cnt1++;</span><br><span class="line">                    <span class="keyword">if</span>(b[j] == i) cnt2++;</span><br><span class="line">                &#125;</span><br><span class="line">                cnt3 += <span class="built_in">min</span>(cnt1,cnt2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;    (%d,%d)\n&quot;</span>,cnt,cnt3 - cnt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Digit-Generator"><a href="#Digit-Generator" class="headerlink" title="Digit Generator"></a>Digit Generator</h5><p>觉得数据范围也不大啊，枚举就行啊，还是超时了，毕竟我开始的算法每次都需要遍历N-1次，现在这个算法直接打表。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> vis[<span class="number">200001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t, n, ans[<span class="number">200001</span>];</span><br><span class="line">    <span class="built_in">memset</span>(ans,<span class="number">0</span>, <span class="built_in">sizeof</span>(ans));</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100001</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num = i + <span class="built_in">f</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(ans[num] == <span class="number">0</span> &amp;&amp; !vis[num])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[num] = <span class="number">1</span>;</span><br><span class="line">            ans[num] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">if</span>(ans[n] == <span class="number">0</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;0&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; ans[n] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Circular-Sequence"><a href="#Circular-Sequence" class="headerlink" title="Circular Sequence"></a>Circular Sequence</h5><p>开始不太会判断两个字符串的字典序大小，也是参考的书籍，而且我对这种循环的题目，不怎么喜欢求余，再补充一个序列感觉更简单一些。我们用ans记录当前最小字典序字符串的开始字符的下标，每次都不断更新。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Less</span><span class="params">(string s, <span class="type">int</span> pos, <span class="type">int</span> ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>() / <span class="number">2</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[pos + i] != s[ans + i])</span><br><span class="line">        <span class="keyword">return</span> s[pos + i] &lt; s[ans + i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        string s, s1, s3;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        s1 += s;</span><br><span class="line">        s1 += s;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Less</span>(s1, i, ans))  ans = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = ans; i &lt; ans + s.<span class="built_in">size</span>() ; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; s1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>数组和字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>计蒜客第三场总结</title>
    <url>/2019/06/01/%E8%AE%A1%E8%92%9C%E5%AE%A2%E7%AC%AC%E4%B8%89%E5%9C%BA%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>计蒜客第三场总结</p>
<span id="more"></span>

<h3 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h3><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>N的范围很小，所以套用最长递增子序列的模板即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">2001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> s[] , <span class="type">int</span> n, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dp[<span class="number">1</span>] = s[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == x) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[i] &gt; dp[len])</span><br><span class="line">        &#123;</span><br><span class="line">          dp[++len] = s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="type">int</span> m = <span class="built_in">lower_bound</span>(dp + <span class="number">1</span>,dp + len + <span class="number">1</span>, s[i]) - dp;</span><br><span class="line">        dp[m] = s[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, s[<span class="number">2001</span>], a[<span class="number">2001</span>], b[<span class="number">2001</span>];</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">        cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s[i]);</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= <span class="number">2</span>)</span><br><span class="line">        a[i - <span class="number">1</span>] = s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">cal</span>(s, n , <span class="number">0</span>);</span><br><span class="line">    b[++tot] = <span class="built_in">cal</span>(a, n - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        b[++tot] = <span class="built_in">cal</span>(s, n ,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i] &lt; len)</span><br><span class="line">            cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="B题及C题"><a href="#B题及C题" class="headerlink" title="B题及C题"></a>B题及C题</h3><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>请移步<a href="https://blog.csdn.net/weixin_43918531/article/details/88980496">题解</a></p>
<h3 id="D题"><a href="#D题" class="headerlink" title="D题"></a>D题</h3><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>早早做完前三个题就开始在这个题自闭了，完全没有遇到过N这么大的情况。后来听师哥说是欧拉降幂。</p>
<p>挡在指数爆炸的时候我们就用这个，求$a^b\mod c$ 时，可以转化为： </p>
<p>下面给出欧拉降幂公式<br>$$<br>a^{(\ b  \mod \phi(c)) + \phi(c)} \mod c<br>$$<br>$\phi（x）$ 指的是 欧拉函数 ，可以参考我记录的。 然后套用费马小定理，就可以过 。 虽说这里是普通的快速幂降幂公式，但是应用到矩阵似乎也是可以的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span>&#123;</span><br><span class="line">   ll m[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function">Matrix <span class="title">mul</span><span class="params">(Matrix A,Matrix B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Matrix tmp;</span><br><span class="line">   <span class="built_in">memset</span>(tmp.m,<span class="number">0</span>,<span class="built_in">sizeof</span>(tmp.m));</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span> ;i++)</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span> ;j++)</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">3</span> ;k++)</span><br><span class="line">   &#123;</span><br><span class="line">       tmp.m[i][j] = (tmp.m[i][j] + A.m[i][k] * B.m[k][j]) % mod;</span><br><span class="line">       tmp.m[i][j] %= mod;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Matrix <span class="title">pow</span><span class="params">(Matrix A,ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> i;</span><br><span class="line">   Matrix res;</span><br><span class="line">   <span class="built_in">memset</span>(res.m,<span class="number">0</span>,<span class="built_in">sizeof</span>(res.m));</span><br><span class="line">   <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">3</span> ;i++)</span><br><span class="line">       res.m[i][i] = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">while</span>(n)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span>(n &amp; <span class="number">1</span>)</span><br><span class="line">           res = <span class="built_in">mul</span>(res,A);</span><br><span class="line">       A = <span class="built_in">mul</span>(A,A);</span><br><span class="line">       n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">quyu</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum1 = (sum1 * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>) % (mod - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> T;</span><br><span class="line">   string s;</span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s )</span><br><span class="line">       &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        n = <span class="built_in">quyu</span>(s);</span><br><span class="line">        n = n + mod - <span class="number">1</span>;          <span class="comment">//这句我试了一下也可以去掉。定理感觉好玄学。。。</span></span><br><span class="line">       Matrix A;</span><br><span class="line">       A.m[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">       A.m[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">       A.m[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">       A.m[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">       A.m[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">       A.m[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">       A.m[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">       A.m[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">       A.m[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">       A = <span class="built_in">pow</span>(A,n - <span class="number">1</span>);</span><br><span class="line">       Matrix C;</span><br><span class="line">       C.m[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">       C.m[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">       C.m[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">       C = <span class="built_in">mul</span>(A,C);</span><br><span class="line">       cout &lt;&lt; C.m[<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM题解</category>
      </categories>
      <tags>
        <tag>比赛题解</tag>
      </tags>
  </entry>
  <entry>
    <title>英语小积累</title>
    <url>/2019/05/07/%E8%8B%B1%E8%AF%AD%E5%B0%8F%E7%A7%AF%E7%B4%AF/</url>
    <content><![CDATA[<p>  英语积累</p>
<span id="more"></span>

<ul>
<li>in uniform speed    匀速</li>
<li>vice versa           反之亦然</li>
<li>inventory            目录，清单</li>
<li>conjecture         [n,v] 推测</li>
<li>echo                   重复</li>
<li>negligible           忽略不计的</li>
<li>beverage           饮料</li>
<li>relatively            相对的，相当地</li>
<li>staple                 主要的 常用的</li>
<li>exclusively          专有地，独占地</li>
<li>reap                  收获</li>
<li>radical                 完全的，彻底的</li>
<li>cluster                聚集</li>
<li>initiate              开始 ，发起(with the reform and open up was initiated,  随着改革开放以来)</li>
<li>incorporate        包含，将……包含在内</li>
<li>diversify          多样化</li>
<li>aside from         除什么之外</li>
<li>dispute              争论</li>
<li>intensify              加强，加剧</li>
<li>humanities           人类 人性</li>
<li>generate               产生 ，引起</li>
<li>hazard                  危险</li>
<li>compromise            妥协</li>
<li>formulate               制订，规划</li>
<li>genuine                  真的，诚实的</li>
<li>furnish                      布置家具</li>
<li>footprint                脚印，足迹</li>
<li>wonderland            仙境</li>
<li>surgery                外科手术</li>
<li>pave                     （用砖石）铺（地）</li>
<li>rational                      理性的</li>
<li>dynamic               充满活力的</li>
<li>exposure              接触</li>
<li>enroll                       登记，报名</li>
<li>operate                  运转，经营</li>
<li>eternal                    永久的，永恒的</li>
<li>idol                       偶像</li>
<li>invisible                  看不见的</li>
<li>enhance                   提高</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>英语积累</tag>
      </tags>
  </entry>
</search>
